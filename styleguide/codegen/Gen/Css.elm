module Gen.Css exposing (absolute, active, after, alignItems, alignSelf, all, allPetiteCaps, allScroll, allSmallCaps, animationDelay, animationDuration, animationIterationCount, animationName, annotation_, any, arabicIndic, armenian, auto, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundColor, backgroundImage, backgroundOrigin, backgroundPosition, backgroundPosition2, backgroundRepeat, backgroundRepeat2, backgroundSize, backgroundSize2, baseline, batch, before, bengali, blink, block, bold, bolder, border, border2, border3, borderBottom, borderBottom2, borderBottom3, borderBottomColor, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderBottomStyle, borderBottomWidth, borderBox, borderCollapse, borderColor, borderColor2, borderColor3, borderColor4, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, borderLeft, borderLeft2, borderLeft3, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderRight, borderRight2, borderRight3, borderRightColor, borderRightStyle, borderRightWidth, borderSpacing, borderSpacing2, borderStyle, borderTop, borderTop2, borderTop3, borderTopColor, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderTopStyle, borderTopWidth, borderWidth, borderWidth2, borderWidth3, borderWidth4, both, bottom, boxShadow, boxShadow2, boxShadow3, boxShadow4, boxShadow5, boxShadow6, boxSizing, breakWord, calc, call_, capitalize, cell, center, ch, checked, circle, cjkEarthlyBranch, cjkHeavenlyStem, clip, cm, colResize, collapse, color, colorBurn, colorDodge, column, columnReverse, commonLigatures, contain, content, contentBox, contextMenu, contextual, copy, cover, crosshair, currentColor, cursive, cursor, cursorAlias, darken, dashed, decimal, decimalLeadingZero, default, deg, devanagari, diagonalFractions, difference, disabled, disc, discretionaryLigatures, display, displayFlex, dotted, double, eResize, eachLine, ellipsis, em, empty, enabled, end, ewResize, ex, exclusion, fantasy, featureOff, featureOn, featureTag, featureTag2, fill, fillAvailable, fillBox, first, firstChild, firstLetter, firstLine, firstOfType, fitContent, fixed, flat, flex, flex2, flex3, flexBasis, flexDirection, flexEnd, flexFlow1, flexFlow2, flexGrow, flexShrink, flexStart, flexWrap, float, focus, fontFace, fontFamilies, fontFamily, fontFeatureSettings, fontFeatureSettingsList, fontSize, fontStyle, fontVariant, fontVariant2, fontVariant3, fontVariantCaps, fontVariantLigatures, fontVariantNumeric, fontVariantNumeric2, fontVariantNumeric3, fontVariantNumerics, fontWeight, fullWidth, fullscreen, geometricPrecision, georgian, grab, grabbing, grad, groove, gujarati, gurmukhi, hanging, hardLight, height, help, hex, hidden, historicalLigatures, horizontal, hover, hsl, hsla, hue, important, inches, indeterminate, infinite, inherit, initial, inline, inlineBlock, inlineFlex, inlineListItem, inlineTable, inset, inside, int, invalid, italic, justify, justifyAll, justifyContent, kannada, khmer, lang, lao, large, larger, lastChild, lastOfType, left, letterSpacing, lighten, lighter, lineHeight, lineThrough, linearGradient, linearGradient2, liningNums, link, listItem, listStyle, listStyle2, listStyle3, listStylePosition, listStyleType, local, lowerAlpha, lowerGreek, lowerLatin, lowerRoman, lowercase, luminosity, make_, malayalam, manipulation, margin, margin2, margin3, margin4, marginBlockEnd, marginBlockStart, marginBottom, marginInlineEnd, marginInlineStart, marginLeft, marginRight, marginTop, matchParent, matrix, matrix3d, maxContent, maxHeight, maxWidth, medium, middle, minContent, minHeight, minWidth, minus, mm, moduleName_, monospace, move, ms, multiply, myanmar, nResize, neResize, neswResize, noCommonLigatures, noContextual, noDiscretionaryLigatures, noDrop, noHistoricalLigatures, noRepeat, noWrap, none, normal, notAllowed, nsResize, nthChild, nthLastChild, nthLastOfType, nthOfType, num, nwResize, nwseResize, oblique, oldstyleNums, onlyChild, onlyOfType, opacity, optimizeLegibility, optimizeSpeed, optional, order, ordinal, oriya, outOfRange, outline, outline3, outlineColor, outlineOffset, outlineStyle, outlineWidth, outset, outside, overflow, overflowWrap, overflowX, overflowY, overlay, overline, padding, padding2, padding3, padding4, paddingBottom, paddingBox, paddingLeft, paddingRight, paddingTop, painted, panDown, panLeft, panRight, panUp, panX, panY, pc, pct, perspective, petiteCaps, pinchZoom, plus, pointer, pointerEvents, pointerEventsAll, pointerEventsFill, position, pre, preLine, preWrap, preserve3d, progress, property, proportionalNums, pseudoClass, pseudoElement, pt, px, qt, rad, readWrite, relative, rem, repeat, repeatX, repeatY, required, resize, rgb, rgba, ridge, right, root, rotate, rotate3d, rotateX, rotateY, rotateZ, round, row, rowResize, rowReverse, sResize, sansSerif, saturation, scale, scale2, scale3d, scaleX, scaleY, scope, screenBlendMode, scroll, seResize, sec, selection, separate, serif, skew, skew2, skewX, skewY, slashedZero, small, smallCaps, smaller, softLight, solid, space, spaceAround, spaceBetween, square, src_, stackedFractions, start, static, sticky, stop, stop2, stretch, stroke, sub, super, swResize, table, tableCaption, tableCell, tableColumn, tableColumnGroup, tableFooterGroup, tableHeaderGroup, tableLayout, tableRow, tableRowGroup, tabularNums, target, telugu, textAlign, textAlignLast, textBottom, textDecoration, textDecoration2, textDecoration3, textDecorationLine, textDecorationLines, textDecorationStyle, textDecorations, textDecorations2, textDecorations3, textEmphasisColor, textIndent, textIndent2, textIndent3, textOrientation, textOverflow, textRendering, textShadow, textShadow2, textShadow3, textShadow4, textTop, textTransform, text_, thai, thick, thin, titlingCaps, toBottom, toBottomLeft, toBottomRight, toLeft, toRight, toTop, toTopLeft, toTopRight, top, touchAction, transform, transformBox, transformStyle, transforms, translate, translate2, translate3d, translateX, translateY, translateZ, transparent, true, turn, underline, unicase, unset, upperAlpha, upperLatin, upperRoman, uppercase, url, valid, values_, vertical, verticalAlign, verticalText, vh, viewBox, visibility, visible, visibleFill, visiblePainted, visibleStroke, visited, vmax, vmin, vw, wResize, wait, wavy, whiteSpace, width, wrap, wrapReverse, xLarge, xSmall, xxLarge, xxSmall, zIndex, zero, zoomIn, zoomOut)

{-| 
@docs moduleName_, batch, property, flex, flex2, flex3, medium, alignSelf, alignItems, justifyContent, order, flexDirection, flexFlow1, flexFlow2, flexWrap, flexBasis, flexGrow, flexShrink, transformStyle, transformBox, transform, transforms, currentColor, underline, overline, lineThrough, textOrientation, textDecoration, textDecoration2, textDecoration3, textDecorations, textDecorations2, textDecorations3, textDecorationLine, textDecorationLines, textDecorationStyle, textEmphasisColor, capitalize, uppercase, lowercase, fullWidth, hanging, eachLine, textIndent, textIndent2, textIndent3, clip, ellipsis, textOverflow, optimizeSpeed, optimizeLegibility, geometricPrecision, textRendering, textTransform, textAlign, textAlignLast, left, right, center, justify, justifyAll, start, end, matchParent, true, verticalAlign, display, opacity, minContent, maxContent, fitContent, fillAvailable, width, minWidth, maxWidth, height, minHeight, maxHeight, padding, padding2, padding3, padding4, paddingTop, paddingBottom, paddingRight, paddingLeft, pointerEvents, margin, margin2, margin3, margin4, marginTop, marginBottom, marginRight, marginLeft, marginBlockStart, marginBlockEnd, marginInlineStart, marginInlineEnd, boxSizing, overflow, overflowX, overflowY, overflowWrap, whiteSpace, backgroundColor, color, textShadow, textShadow2, textShadow3, textShadow4, boxShadow, boxShadow2, boxShadow3, boxShadow4, boxShadow5, boxShadow6, lineHeight, letterSpacing, fontFace, fontFamily, fontSize, fontStyle, fontWeight, fontVariant, fontVariant2, fontVariant3, fontVariantLigatures, fontVariantCaps, fontVariantNumeric, fontVariantNumeric2, fontVariantNumeric3, fontFamilies, fontVariantNumerics, fontFeatureSettings, fontFeatureSettingsList, cursor, outline, outline3, outlineColor, outlineWidth, outlineStyle, outlineOffset, zIndex, spaceAround, spaceBetween, resize, fill, touchAction, borderSpacing, borderSpacing2, visibility, all, important, solid, transparent, rgb, rgba, hsl, hsla, hex, featureTag, featureTag2, featureOn, featureOff, borderCollapse, borderColor, borderColor2, borderColor3, borderColor4, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderWidth, borderWidth2, borderWidth3, borderWidth4, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderBottomStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderStyle, borderBottomColor, borderLeftColor, borderRightColor, borderTopColor, borderBox, contentBox, border, border2, border3, borderTop, borderTop2, borderTop3, borderBottom, borderBottom2, borderBottom3, borderLeft, borderLeft2, borderLeft3, borderRight, borderRight2, borderRight3, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, scroll, visible, block, inlineBlock, inlineFlex, inline, none, auto, inherit, unset, initial, noWrap, top, static, fixed, sticky, relative, absolute, position, float, bottom, middle, baseline, sub, super, textTop, textBottom, hidden, wavy, dotted, dashed, double, groove, ridge, inset, outset, matrix, matrix3d, perspective, rotate3d, rotateX, rotateY, rotateZ, scale, scale2, scale3d, scaleX, scaleY, skew, skew2, skewX, skewY, translate, translate2, translate3d, translateX, translateY, translateZ, rotate, fillBox, viewBox, flat, preserve3d, content, wrapReverse, wrap, flexStart, flexEnd, stretch, row, rowReverse, column, columnReverse, serif, sansSerif, monospace, cursive, fantasy, xxSmall, xSmall, small, large, xLarge, xxLarge, smaller, larger, normal, italic, oblique, bold, lighter, bolder, smallCaps, allSmallCaps, petiteCaps, allPetiteCaps, unicase, titlingCaps, commonLigatures, noCommonLigatures, discretionaryLigatures, noDiscretionaryLigatures, historicalLigatures, noHistoricalLigatures, contextual, noContextual, liningNums, oldstyleNums, proportionalNums, tabularNums, diagonalFractions, stackedFractions, ordinal, slashedZero, default, pointer, crosshair, contextMenu, help, progress, wait, cell, text_, verticalText, cursorAlias, copy, move, noDrop, notAllowed, eResize, nResize, neResize, nwResize, sResize, seResize, swResize, wResize, ewResize, nsResize, neswResize, nwseResize, colResize, rowResize, allScroll, zoomIn, zoomOut, grab, grabbing, visiblePainted, visibleFill, visibleStroke, painted, stroke, pct, px, em, pt, ex, ch, rem, vh, vw, vmin, vmax, mm, cm, inches, pc, int, num, zero, calc, plus, minus, deg, rad, grad, turn, sec, ms, pseudoClass, active, any, checked, disabled, empty, enabled, first, firstChild, firstOfType, fullscreen, focus, hover, visited, indeterminate, invalid, lang, lastChild, lastOfType, link, nthChild, nthLastChild, nthLastOfType, nthOfType, onlyChild, onlyOfType, optional, outOfRange, readWrite, required, root, scope, target, valid, pseudoElement, after, before, firstLetter, firstLine, selection, src_, qt, listStyleType, disc, circle, square, decimal, decimalLeadingZero, lowerRoman, upperRoman, lowerGreek, lowerAlpha, lowerLatin, upperAlpha, upperLatin, arabicIndic, armenian, bengali, cjkEarthlyBranch, cjkHeavenlyStem, devanagari, georgian, gujarati, gurmukhi, kannada, khmer, lao, malayalam, myanmar, oriya, telugu, thai, listStylePosition, inside, outside, listStyle, listStyle2, listStyle3, linearGradient, linearGradient2, stop, stop2, toBottom, toBottomLeft, toBottomRight, toLeft, toRight, toTop, toTopLeft, toTopRight, pre, preLine, preWrap, infinite, url, vertical, tableRowGroup, tableRow, tableLayout, tableHeaderGroup, tableFooterGroup, tableColumnGroup, tableCell, tableColumn, tableCaption, table, space, softLight, separate, screenBlendMode, saturation, round, repeatY, repeatX, repeat, pointerEventsFill, pointerEventsAll, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundImage, backgroundOrigin, backgroundPosition, backgroundPosition2, backgroundRepeat, backgroundRepeat2, backgroundSize, backgroundSize2, both, breakWord, collapse, colorBurn, colorDodge, contain, cover, darken, difference, displayFlex, exclusion, hardLight, horizontal, hue, inlineListItem, inlineTable, lighten, listItem, local, luminosity, manipulation, multiply, noRepeat, overlay, paddingBox, panDown, panLeft, panRight, panUp, panX, panY, pinchZoom, animationName, animationDelay, animationDuration, animationIterationCount, thin, thick, blink, annotation_, make_, call_, values_
-}


import Elm
import Elm.Annotation as Type
import Tuple


{-| The name of this module. -}
moduleName_ : List String
moduleName_ =
    [ "Css" ]


{-| Create a style from multiple other styles.

    underlineOnHover =
        batch
            [ textDecoration none

            , hover
                [ textDecoration underline ]
            ]

    css
        [ color (rgb 128 64 32)
        , underlineOnHover
        ]

...has the same result as:

    css
        [ color (rgb 128 64 32)
        , textDecoration none
        , hover
            [ textDecoration underline ]
        ]

batch: List Css.Style -> Css.Style
-}
batch : List Elm.Expression -> Elm.Expression
batch batchArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "batch"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list batchArg ]


{-| Define a custom property.

    css [ property "-webkit-font-smoothing" "none" ]

...outputs

    -webkit-font-smoothing: none;

property: String -> String -> Css.Style
-}
property : String -> String -> Elm.Expression
property propertyArg propertyArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "property"
            , annotation =
                Just
                    (Type.function
                        [ Type.string, Type.string ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string propertyArg, Elm.string propertyArg0 ]


{-| Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.

flex (none | content | auto | (int 1) | (px 10))
flex2 (int 1) ((int 1) | (px 10 ))
flex3 (int 1) (int 1) ((int 1) | (px 10))

flex: Css.LengthOrNumberOrAutoOrNoneOrContent compatible -> Css.Style
-}
flex : Elm.Expression -> Elm.Expression
flex flexArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumberOrAutoOrNoneOrContent"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexArg ]


{-| Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.

flex (none | content | auto | (int 1) | (px 10))
flex2 (int 1) ((int 1) | (px 10 ))
flex3 (int 1) (int 1) ((int 1) | (px 10))

flex2: Css.Number compatibleA -> Css.LengthOrNumber compatibleB -> Css.Style
-}
flex2 : Elm.Expression -> Elm.Expression -> Elm.Expression
flex2 flex2Arg flex2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flex2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flex2Arg, flex2Arg0 ]


{-| Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.

flex (none | content | auto | (int 1) | (px 10))
flex2 (int 1) ((int 1) | (px 10 ))
flex3 (int 1) (int 1) ((int 1) | (px 10))

flex3: 
    Css.Number compatibleA
    -> Css.Number compatibleB
    -> Css.LengthOrNumber compatibleC
    -> Css.Style
-}
flex3 : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
flex3 flex3Arg flex3Arg0 flex3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flex3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flex3Arg, flex3Arg0, flex3Arg1 ]


{-| medium: Css.FontSize {} -}
medium : Elm.Expression
medium =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "medium"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| Sets [`align-self`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self).

**Note:** `auto` is not currently supported here. If you need to set this property to `auto`,
use this workaround:

property "align-self" "auto"

If this is annoying, please file an issue, so adding support for "auto"
can be prioritized!

alignSelf: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
alignSelf : (Elm.Expression -> Elm.Expression) -> Elm.Expression
alignSelf alignSelfArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "alignSelf"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "alignSelfUnpack" alignSelfArg ]


{-| Sets [`align-items`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items).

**Note:** `auto` is not currently supported here. If you need to set this property to `auto`,
use this workaround:

property "align-items" "auto"

If this is annoying, please file an issue, so adding support for "auto"
can be prioritized!

alignItems: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
alignItems : (Elm.Expression -> Elm.Expression) -> Elm.Expression
alignItems alignItemsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "alignItems"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "alignItemsUnpack" alignItemsArg ]


{-| Sets [`justify-content`](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content).

justifyContent: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
justifyContent : (Elm.Expression -> Elm.Expression) -> Elm.Expression
justifyContent justifyContentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "justifyContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "justifyContentUnpack" justifyContentArg ]


{-| Sets [`order`](https://developer.mozilla.org/en-US/docs/Web/CSS/order) property.

order: Css.Number compatible -> Css.Style
-}
order : Elm.Expression -> Elm.Expression
order orderArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "order"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ orderArg ]


{-| Sets [`flex-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property.

flexDirection: Css.FlexDirection compatible -> Css.Style
-}
flexDirection : Elm.Expression -> Elm.Expression
flexDirection flexDirectionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexDirection"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexDirectionArg ]


{-| Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.

flexFlow1 (wrap | wrapReverse | noWrap)
flexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)

Or vice versa, order is not important for flex-flow

flexFlow1: Css.FlexDirectionOrWrap compatible -> Css.Style
-}
flexFlow1 : Elm.Expression -> Elm.Expression
flexFlow1 flexFlow1Arg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexFlow1"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexFlow1Arg ]


{-| Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.

flexFlow1 (wrap | wrapReverse | noWrap)
flexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)

Or vice versa, order is not important for flex-flow

flexFlow2: 
    Css.FlexDirectionOrWrap compatibleA
    -> Css.FlexDirectionOrWrap compatibleB
    -> Css.Style
-}
flexFlow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
flexFlow2 flexFlow2Arg flexFlow2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexFlow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexFlow2Arg, flexFlow2Arg0 ]


{-| Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.

flexWrap: Css.FlexWrap compatible -> Css.Style
-}
flexWrap : Elm.Expression -> Elm.Expression
flexWrap flexWrapArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexWrap"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexWrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexWrapArg ]


{-| Sets [`flex-basis`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis) property.

flex (none | content | auto | (int 1) | (px 10))
flex2 (int 1) ((int 1) | (px 10 ))
flex3 (int 1) (int 1) ((int 1) | (px 10))

flexBasis: Css.FlexBasis compatible -> Css.Style
-}
flexBasis : Elm.Expression -> Elm.Expression
flexBasis flexBasisArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexBasis"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexBasis"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexBasisArg ]


{-| Sets [`flex-grow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) property.

flexGrow: Css.Number compatible -> Css.Style
-}
flexGrow : Elm.Expression -> Elm.Expression
flexGrow flexGrowArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexGrow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexGrowArg ]


{-| Sets [`flex-shrink`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink) property.

flexShrink: Css.Number compatible -> Css.Style
-}
flexShrink : Elm.Expression -> Elm.Expression
flexShrink flexShrinkArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "flexShrink"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ flexShrinkArg ]


{-| The [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.

transformStyle: Css.TransformStyle compatible -> Css.Style
-}
transformStyle : Elm.Expression -> Elm.Expression
transformStyle transformStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "transformStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TransformStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ transformStyleArg ]


{-| The [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.

transformBox: Css.TransformBox compatible -> Css.Style
-}
transformBox : Elm.Expression -> Elm.Expression
transformBox transformBoxArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "transformBox"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TransformBox"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ transformBoxArg ]


{-| Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
with a single explicit transform value. If you need to set the transform
property to `none`, use the `transforms` function with an empty list. See
`transforms` for more details.

    transform (scaleX 1.4)

transform: Css.Transform compatible -> Css.Style
-}
transform : Elm.Expression -> Elm.Expression
transform transformArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "transform"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Transform"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ transformArg ]


{-| Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
with a series of transform-functions. If an empty list is provided, the CSS
output will be `none`, as if to state directly that the set of transforms
applied to the current selector is empty:

    transforms [] -- transform: none;

In the case that only one transform is needed, the `transform` function may be
used instead for convenience. `transform` expects exactly one transform-function
and cannot be passed `none`:

    transform (matrix 1 2 3 4 5 6) -- transform: matrix(1, 2, 3, 4, 5, 6);

If a collection of transforms is needed, use the `transforms` function with a
populated list:

    transforms [ perspective 1, scale2 1 1.4 ]

transforms: List (Css.Transform compatible) -> Css.Style
-}
transforms : List Elm.Expression -> Elm.Expression
transforms transformsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "transforms"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "Transform"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list transformsArg ]


{-| The [`currentColor`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword)
value.

currentColor: Css.ColorValue Css.NonMixable
-}
currentColor : Elm.Expression
currentColor =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "currentColor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ColorValue"
                    [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                )
        }


{-| An [`underline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)
text decoration line.

underline: Css.TextDecorationLine {}
-}
underline : Elm.Expression
underline =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "underline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextDecorationLine"
                    [ Type.record [] ]
                )
        }


{-| An [`overline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)
text decoration line.

overline: Css.TextDecorationLine {}
-}
overline : Elm.Expression
overline =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "overline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextDecorationLine"
                    [ Type.record [] ]
                )
        }


{-| A [`line-through`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)
text decoration line.

lineThrough: Css.TextDecorationLine {}
-}
lineThrough : Elm.Expression
lineThrough =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lineThrough"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextDecorationLine"
                    [ Type.record [] ]
                )
        }


{-| Sets [`text-orientation`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation).

    text - orientation mixed

textOrientation: Css.TextOrientation compatible -> Css.Style
-}
textOrientation : Elm.Expression -> Elm.Expression
textOrientation textOrientationArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textOrientation"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextOrientation"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textOrientationArg ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecoration underline

    textDecoration2 underline wavy

    textDecoration3 underline wavy (rgb 128 64 32)

You can specify multiple line decorations with `textDecorations`.

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecoration: Css.TextDecorationLine a -> Css.Style
-}
textDecoration : Elm.Expression -> Elm.Expression
textDecoration textDecorationArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textDecorationArg ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecoration underline

    textDecoration2 underline wavy

    textDecoration3 underline wavy (rgb 128 64 32)

You can specify multiple line decorations with `textDecorations`.

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecoration2: 
    Css.TextDecorationLine compatibleA
    -> Css.TextDecorationStyle compatibleB
    -> Css.Style
-}
textDecoration2 : Elm.Expression -> Elm.Expression -> Elm.Expression
textDecoration2 textDecoration2Arg textDecoration2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textDecoration2Arg, textDecoration2Arg0 ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecoration underline

    textDecoration2 underline wavy

    textDecoration3 underline wavy (rgb 128 64 32)

You can specify multiple line decorations with `textDecorations`.

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecoration3: 
    Css.TextDecorationLine compatibleA
    -> Css.TextDecorationStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
textDecoration3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
textDecoration3 textDecoration3Arg textDecoration3Arg0 textDecoration3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textDecoration3Arg, textDecoration3Arg0, textDecoration3Arg1 ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecorations: List (Css.TextDecorationLine compatible) -> Css.Style
-}
textDecorations : List Elm.Expression -> Elm.Expression
textDecorations textDecorationsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list textDecorationsArg ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecorations2: 
    List (Css.TextDecorationLine compatibleA)
    -> Css.TextDecorationStyle compatibleB
    -> Css.Style
-}
textDecorations2 : List Elm.Expression -> Elm.Expression -> Elm.Expression
textDecorations2 textDecorations2Arg textDecorations2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations2"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatibleA" ]
                            )
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list textDecorations2Arg, textDecorations2Arg0 ]


{-| Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)

    textDecorations [ underline, overline ]

    textDecorations2 [ underline, overline ] wavy

    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)

textDecorations3: 
    List (Css.TextDecorationLine compatibleA)
    -> Css.TextDecorationStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
textDecorations3 :
    List Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
textDecorations3 textDecorations3Arg textDecorations3Arg0 textDecorations3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations3"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatibleA" ]
                            )
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list textDecorations3Arg
        , textDecorations3Arg0
        , textDecorations3Arg1
        ]


{-| Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)

    textDecorationLine underline

You can specify multiple line decorations with `textDecorationLines`.

    textDecorationLines [ underline, overline ]

textDecorationLine: Css.TextDecorationLine compatible -> Css.Style
-}
textDecorationLine : Elm.Expression -> Elm.Expression
textDecorationLine textDecorationLineArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationLine"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textDecorationLineArg ]


{-| Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)

    textDecorationLines [ underline, overline ]

textDecorationLines: List (Css.TextDecorationLine compatible) -> Css.Style
-}
textDecorationLines : List Elm.Expression -> Elm.Expression
textDecorationLines textDecorationLinesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationLines"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list textDecorationLinesArg ]


{-| Sets [`text-decoration-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)

    textDecorationStyle dotted

textDecorationStyle: Css.TextDecorationStyle compatible -> Css.Style
-}
textDecorationStyle : Elm.Expression -> Elm.Expression
textDecorationStyle textDecorationStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textDecorationStyleArg ]


{-| Sets ['text-emphasis-color'](https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-color)

     textEmphasisColor (rgb 100 100 100)

textEmphasisColor: Css.ColorValue compatible -> Css.Style
-}
textEmphasisColor : Elm.Expression -> Elm.Expression
textEmphasisColor textEmphasisColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textEmphasisColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textEmphasisColorArg ]


{-| `capitalize` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value

capitalize: Css.TextTransform {}
-}
capitalize : Elm.Expression
capitalize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "capitalize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ])
        }


{-| `uppercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value

uppercase: Css.TextTransform {}
-}
uppercase : Elm.Expression
uppercase =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "uppercase"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ])
        }


{-| `lowercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value

lowercase: Css.TextTransform {}
-}
lowercase : Elm.Expression
lowercase =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lowercase"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ])
        }


{-| `full-width` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value

fullWidth: Css.TextTransform {}
-}
fullWidth : Elm.Expression
fullWidth =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fullWidth"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ])
        }


{-| `hanging` [`hanging`](https://developer.mozilla.org/en-US/docs/Web/CSS/hanging#Values) value

hanging: Css.TextIndent {}
-}
hanging : Elm.Expression
hanging =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "hanging"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextIndent" [ Type.record [] ])
        }


{-| `each-line` [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent#Values) value

eachLine: Css.TextIndent {}
-}
eachLine : Elm.Expression
eachLine =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "eachLine"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextIndent" [ Type.record [] ])
        }


{-| Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).

    textIndent (px 40)

    textIndent2 (px 40) hanging

    textIndent3 (px 40) hanging eachLine

textIndent: Css.Length compatible units -> Css.Style
-}
textIndent : Elm.Expression -> Elm.Expression
textIndent textIndentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textIndentArg ]


{-| Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).

    textIndent (px 40)

    textIndent2 (px 40) hanging

    textIndent3 (px 40) hanging eachLine

textIndent2: Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.Style
-}
textIndent2 : Elm.Expression -> Elm.Expression -> Elm.Expression
textIndent2 textIndent2Arg textIndent2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textIndent2Arg, textIndent2Arg0 ]


{-| Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).

    textIndent (px 40)

    textIndent2 (px 40) hanging

    textIndent3 (px 40) hanging eachLine

textIndent3: 
    Css.Length compatibleA unitsA
    -> Css.TextIndent compatibleB
    -> Css.TextIndent compatibleC
    -> Css.Style
-}
textIndent3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
textIndent3 textIndent3Arg textIndent3Arg0 textIndent3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textIndent3Arg, textIndent3Arg0, textIndent3Arg1 ]


{-| `clip` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value

clip: Css.TextOverflow {}
-}
clip : Elm.Expression
clip =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "clip"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextOverflow" [ Type.record [] ])
        }


{-| `ellipsis` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value

ellipsis: Css.TextOverflow {}
-}
ellipsis : Elm.Expression
ellipsis =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "ellipsis"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextOverflow" [ Type.record [] ])
        }


{-| Sets [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow).

    textOverflow ellipsis

textOverflow: Css.TextOverflow compatible -> Css.Style
-}
textOverflow : Elm.Expression -> Elm.Expression
textOverflow textOverflowArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textOverflow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextOverflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textOverflowArg ]


{-| `optimizeSpeed` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value

optimizeSpeed: Css.TextRendering {}
-}
optimizeSpeed : Elm.Expression
optimizeSpeed =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "optimizeSpeed"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ])
        }


{-| `optimizeLegibility` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value

optimizeLegibility: Css.TextRendering {}
-}
optimizeLegibility : Elm.Expression
optimizeLegibility =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "optimizeLegibility"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ])
        }


{-| `geometricPrecision` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value

geometricPrecision: Css.TextRendering {}
-}
geometricPrecision : Elm.Expression
geometricPrecision =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "geometricPrecision"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ])
        }


{-| Sets [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering).

textRendering: Css.TextRendering a -> Css.Style
-}
textRendering : Elm.Expression -> Elm.Expression
textRendering textRenderingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textRendering"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextRendering"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textRenderingArg ]


{-| Sets [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform).

textTransform: Css.TextTransform compatible -> Css.Style
-}
textTransform : Elm.Expression -> Elm.Expression
textTransform textTransformArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textTransform"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextTransform"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textTransformArg ]


{-| Sets [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

textAlign: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
textAlign : (Elm.Expression -> Elm.Expression) -> Elm.Expression
textAlign textAlignArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textAlign"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "textAlignUnpack" textAlignArg ]


{-| Sets [`text-align-last`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last).
**Note:** `auto` is not currently supported here. If you need to set this property to `auto`,
use this workaround:

    property "text-align-last" "auto"

    If this is annoying, please file an issue, so adding support for "auto"
    can be prioritized!

textAlignLast: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
textAlignLast : (Elm.Expression -> Elm.Expression) -> Elm.Expression
textAlignLast textAlignLastArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textAlignLast"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "textAlignLastUnpack" textAlignLastArg ]


{-| The [`left`](https://developer.mozilla.org/en-US/docs/Web/CSS/left) property.

    position absolute

    left (px 5)

This can also be used as a `left` [text alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:

    textAlign left

It can also be used as a `left` [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float) value :

    float left

left: Css.LengthOrAuto compatible -> Css.Style
-}
left : Elm.Expression -> Elm.Expression
left leftArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "left"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ leftArg ]


{-| Sets [`right`](https://developer.mozilla.org/en-US/docs/Web/CSS/right).

    position absolute

    right (px 5)

This can also be used as a `right` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:

    textAlign right

It can also be used as a `right` [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float) value :

    float right

right: Css.LengthOrAuto compatible -> Css.Style
-}
right : Elm.Expression -> Elm.Expression
right rightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "right"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ rightArg ]


{-| `center` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).
Can also be used with flex-box's align-items and justify-content properties to apply the value of center

center: Css.TextAlign a b
-}
center : Elm.Expression
center =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `justify` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

justify: Css.TextAlign a b
-}
justify : Elm.Expression
justify =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "justify"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `justify-all` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

justifyAll: Css.TextAlign a b
-}
justifyAll : Elm.Expression
justifyAll =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "justifyAll"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `start` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

start: Css.TextAlign a b
-}
start : Elm.Expression
start =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "start"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `end` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

end: Css.TextAlign a b
-}
end : Elm.Expression
end =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "end"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `match-parent` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

matchParent: Css.TextAlign a b
-}
matchParent : Elm.Expression
matchParent =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "matchParent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `true` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).

true: Css.TextAlign a b
-}
true : Elm.Expression
true =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "true"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| Sets [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align).

verticalAlign: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
verticalAlign : (Elm.Expression -> Elm.Expression) -> Elm.Expression
verticalAlign verticalAlignArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "verticalAlign"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "verticalAlignUnpack" verticalAlignArg ]


{-| For `display: flex`, use [`displayFlex`](#displayFlex).

display: Css.Display compatible -> Css.Style
-}
display : Elm.Expression -> Elm.Expression
display displayArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "display"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Display"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ displayArg ]


{-| opacity: Css.Number compatible -> Css.Style -}
opacity : Elm.Expression -> Elm.Expression
opacity opacityArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "opacity"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ opacityArg ]


{-| The `min-content` value for
[`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),
[`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),
[`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and
[`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)

minContent: Css.MinMaxDimension {}
-}
minContent : Elm.Expression
minContent =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "minContent"
        , annotation =
            Just (Type.namedWith [ "Css" ] "MinMaxDimension" [ Type.record [] ])
        }


{-| The `max-content` value for
[`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),
[`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),
[`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and
[`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)

maxContent: Css.MinMaxDimension {}
-}
maxContent : Elm.Expression
maxContent =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "maxContent"
        , annotation =
            Just (Type.namedWith [ "Css" ] "MinMaxDimension" [ Type.record [] ])
        }


{-| The `fit-content` value for
[`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),
[`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),
[`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and
[`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)

fitContent: Css.MinMaxDimension {}
-}
fitContent : Elm.Expression
fitContent =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fitContent"
        , annotation =
            Just (Type.namedWith [ "Css" ] "MinMaxDimension" [ Type.record [] ])
        }


{-| The `fill-available` value for
[`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),
[`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),
[`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and
[`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)

fillAvailable: Css.MinMaxDimension {}
-}
fillAvailable : Elm.Expression
fillAvailable =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fillAvailable"
        , annotation =
            Just (Type.namedWith [ "Css" ] "MinMaxDimension" [ Type.record [] ])
        }


{-| Sets [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)

    width (px 960)

width: Css.LengthOrAuto compatible -> Css.Style
-}
width : Elm.Expression -> Elm.Expression
width widthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "width"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ widthArg ]


{-| Sets [`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)

    minWidth (px 100)

minWidth: Css.LengthOrMinMaxDimension compatible -> Css.Style
-}
minWidth : Elm.Expression -> Elm.Expression
minWidth minWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "minWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ minWidthArg ]


{-| Sets [`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)

    maxWidth (px 960)

maxWidth: Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Style
-}
maxWidth : Elm.Expression -> Elm.Expression
maxWidth maxWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "maxWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNoneOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ maxWidthArg ]


{-| Sets [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height)

    height (px 800)

height: Css.LengthOrAuto compatible -> Css.Style
-}
height : Elm.Expression -> Elm.Expression
height heightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "height"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ heightArg ]


{-| Sets [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)

    minHeight (px 100)

minHeight: Css.LengthOrMinMaxDimension compatible -> Css.Style
-}
minHeight : Elm.Expression -> Elm.Expression
minHeight minHeightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "minHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ minHeightArg ]


{-| Sets [`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)

    maxHeight (px 1024)

maxHeight: Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Style
-}
maxHeight : Elm.Expression -> Elm.Expression
maxHeight maxHeightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "maxHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNoneOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ maxHeightArg ]


{-| Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)

    padding (px 10)

    padding2 (px 10) (px 10)

    padding3 (px 10) (px 10) (px 10)

    padding4 (px 10) (px 10) (px 10) (px 10)

padding: Css.Length compatible units -> Css.Style
-}
padding : Elm.Expression -> Elm.Expression
padding paddingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "padding"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ paddingArg ]


{-| Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)

    padding (px 10)

    padding2 (px 10) (px 10)

    padding3 (px 10) (px 10) (px 10)

    padding4 (px 10) (px 10) (px 10) (px 10)

padding2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
padding2 : Elm.Expression -> Elm.Expression -> Elm.Expression
padding2 padding2Arg padding2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "padding2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ padding2Arg, padding2Arg0 ]


{-| Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)

    padding (px 10)

    padding2 (px 10) (px 10)

    padding3 (px 10) (px 10) (px 10)

    padding4 (px 10) (px 10) (px 10) (px 10)

padding3: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Style
-}
padding3 : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
padding3 padding3Arg padding3Arg0 padding3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "padding3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ padding3Arg, padding3Arg0, padding3Arg1 ]


{-| Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)

    padding (px 10)

    padding2 (px 10) (px 10)

    padding3 (px 10) (px 10) (px 10)

    padding4 (px 10) (px 10) (px 10) (px 10)

padding4: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Length compatible units
    -> Css.Style
-}
padding4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
padding4 padding4Arg padding4Arg0 padding4Arg1 padding4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "padding4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ padding4Arg, padding4Arg0, padding4Arg1, padding4Arg2 ]


{-| Sets [`padding-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top)

    paddingTop (px 10)

paddingTop: Css.Length compatible units -> Css.Style
-}
paddingTop : Elm.Expression -> Elm.Expression
paddingTop paddingTopArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ paddingTopArg ]


{-| Sets [`padding-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom)

    paddingBottom (px 10)

paddingBottom: Css.Length compatible units -> Css.Style
-}
paddingBottom : Elm.Expression -> Elm.Expression
paddingBottom paddingBottomArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ paddingBottomArg ]


{-| Sets [`padding-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right)

    paddingRight (px 10)

paddingRight: Css.Length compatible units -> Css.Style
-}
paddingRight : Elm.Expression -> Elm.Expression
paddingRight paddingRightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ paddingRightArg ]


{-| Sets [`padding-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)

    paddingLeft (px 10)

paddingLeft: Css.Length compatible units -> Css.Style
-}
paddingLeft : Elm.Expression -> Elm.Expression
paddingLeft paddingLeftArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ paddingLeftArg ]


{-| The [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events#Values)
property specifies under what circumstances (if any) a particular graphic
element can become the target of mouse events.

pointerEvents: Css.PointerEvents compatible -> Css.Style
-}
pointerEvents : Elm.Expression -> Elm.Expression
pointerEvents pointerEventsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pointerEvents"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "PointerEvents"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ pointerEventsArg ]


{-| Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)

    margin (px 10)

    margin2 (px 10) (px 10)

    margin3 (px 10) (px 10) (px 10)

    margin4 (px 10) (px 10) (px 10) (px 10)

margin: Css.LengthOrAuto compatible -> Css.Style
-}
margin : Elm.Expression -> Elm.Expression
margin marginArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "margin"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginArg ]


{-| Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)

    margin (px 10)

    margin2 (px 10) (px 10)

    margin3 (px 10) (px 10) (px 10)

    margin4 (px 10) (px 10) (px 10) (px 10)

margin2: Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Style
-}
margin2 : Elm.Expression -> Elm.Expression -> Elm.Expression
margin2 margin2Arg margin2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "margin2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ margin2Arg, margin2Arg0 ]


{-| Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)

    margin (px 10)

    margin2 (px 10) (px 10)

    margin3 (px 10) (px 10) (px 10)

    margin4 (px 10) (px 10) (px 10) (px 10)

margin3: 
    Css.LengthOrAuto compatibleA
    -> Css.LengthOrAuto compatibleB
    -> Css.LengthOrAuto compatibleC
    -> Css.Style
-}
margin3 : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
margin3 margin3Arg margin3Arg0 margin3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "margin3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ margin3Arg, margin3Arg0, margin3Arg1 ]


{-| Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)

    margin (px 10)

    margin2 (px 10) (px 10)

    margin3 (px 10) (px 10) (px 10)

    margin4 (px 10) (px 10) (px 10) (px 10)

margin4: 
    Css.LengthOrAuto compatibleA
    -> Css.LengthOrAuto compatibleB
    -> Css.LengthOrAuto compatibleC
    -> Css.LengthOrAuto compatibleD
    -> Css.Style
-}
margin4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
margin4 margin4Arg margin4Arg0 margin4Arg1 margin4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "margin4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ margin4Arg, margin4Arg0, margin4Arg1, margin4Arg2 ]


{-| Sets [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top)

    marginTop (px 10)

marginTop: Css.LengthOrAuto compatible -> Css.Style
-}
marginTop : Elm.Expression -> Elm.Expression
marginTop marginTopArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginTopArg ]


{-| Sets [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom)

    marginBottom (px 10)

marginBottom: Css.LengthOrAuto compatible -> Css.Style
-}
marginBottom : Elm.Expression -> Elm.Expression
marginBottom marginBottomArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginBottomArg ]


{-| Sets [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right)

    marginRight (px 10)

marginRight: Css.LengthOrAuto compatible -> Css.Style
-}
marginRight : Elm.Expression -> Elm.Expression
marginRight marginRightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginRightArg ]


{-| Sets [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left)

    marginLeft (px 10)

marginLeft: Css.LengthOrAuto compatible -> Css.Style
-}
marginLeft : Elm.Expression -> Elm.Expression
marginLeft marginLeftArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginLeftArg ]


{-| Sets [`margin-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)

    marginBlockStart (px 10)

marginBlockStart: Css.LengthOrAuto compatible -> Css.Style
-}
marginBlockStart : Elm.Expression -> Elm.Expression
marginBlockStart marginBlockStartArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBlockStart"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginBlockStartArg ]


{-| Sets [`margin-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end)

    marginBlockEnd (px 10)

marginBlockEnd: Css.LengthOrAuto compatible -> Css.Style
-}
marginBlockEnd : Elm.Expression -> Elm.Expression
marginBlockEnd marginBlockEndArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBlockEnd"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginBlockEndArg ]


{-| Sets [`margin-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start)

    marginInlineStart (px 10)

marginInlineStart: Css.LengthOrAuto compatible -> Css.Style
-}
marginInlineStart : Elm.Expression -> Elm.Expression
marginInlineStart marginInlineStartArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginInlineStart"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginInlineStartArg ]


{-| Sets [`margin-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end)

    marginInlineEnd (px 10)

marginInlineEnd: Css.LengthOrAuto compatible -> Css.Style
-}
marginInlineEnd : Elm.Expression -> Elm.Expression
marginInlineEnd marginInlineEndArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "marginInlineEnd"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ marginInlineEndArg ]


{-| Sets [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)

    boxSizing borderBox

boxSizing: Css.BoxSizing compatible -> Css.Style
-}
boxSizing : Elm.Expression -> Elm.Expression
boxSizing boxSizingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxSizing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BoxSizing"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxSizingArg ]


{-| overflow: Css.Overflow compatible -> Css.Style -}
overflow : Elm.Expression -> Elm.Expression
overflow overflowArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "overflow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ overflowArg ]


{-| overflowX: Css.Overflow compatible -> Css.Style -}
overflowX : Elm.Expression -> Elm.Expression
overflowX overflowXArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ overflowXArg ]


{-| overflowY: Css.Overflow compatible -> Css.Style -}
overflowY : Elm.Expression -> Elm.Expression
overflowY overflowYArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ overflowYArg ]


{-| overflowWrap: Css.Wrap compatible -> Css.Style -}
overflowWrap : Elm.Expression -> Elm.Expression
overflowWrap overflowWrapArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowWrap"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Wrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ overflowWrapArg ]


{-| whiteSpace: Css.WhiteSpace compatible -> Css.Style -}
whiteSpace : Elm.Expression -> Elm.Expression
whiteSpace whiteSpaceArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "whiteSpace"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "WhiteSpace"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ whiteSpaceArg ]


{-| backgroundColor: Css.ColorValue compatible -> Css.Style -}
backgroundColor : Elm.Expression -> Elm.Expression
backgroundColor backgroundColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundColorArg ]


{-| color: Css.ColorValue compatible -> Css.Style -}
color : Elm.Expression -> Elm.Expression
color colorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "color"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ colorArg ]


{-| Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).

    textShadow none

    textShadow2 (px 1) (px 2)

    textShadow3 (px 1) (px 2) (rgb 211 121 112)

    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

textShadow: Css.None compatible -> Css.Style
-}
textShadow : Elm.Expression -> Elm.Expression
textShadow textShadowArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "None"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textShadowArg ]


{-| Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).

    textShadow none

    textShadow2 (px 1) (px 2)

    textShadow3 (px 1) (px 2) (rgb 211 121 112)

    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

textShadow2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
textShadow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
textShadow2 textShadow2Arg textShadow2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textShadow2Arg, textShadow2Arg0 ]


{-| Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).

    textShadow none

    textShadow2 (px 1) (px 2)

    textShadow3 (px 1) (px 2) (rgb 211 121 112)

    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

textShadow3: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
textShadow3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
textShadow3 textShadow3Arg textShadow3Arg0 textShadow3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textShadow3Arg, textShadow3Arg0, textShadow3Arg1 ]


{-| Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).

    textShadow none

    textShadow2 (px 1) (px 2)

    textShadow3 (px 1) (px 2) (rgb 211 121 112)

    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

textShadow4: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.ColorValue compatibleD
    -> Css.Style
-}
textShadow4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
textShadow4 textShadow4Arg textShadow4Arg0 textShadow4Arg1 textShadow4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ textShadow4Arg, textShadow4Arg0, textShadow4Arg1, textShadow4Arg2 ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow: Css.None compatible -> Css.Style
-}
boxShadow : Elm.Expression -> Elm.Expression
boxShadow boxShadowArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "None"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadowArg ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
boxShadow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
boxShadow2 boxShadow2Arg boxShadow2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadow2Arg, boxShadow2Arg0 ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow3: Css.Value a -> Css.Length compatibleB unitsB -> Css.Value c -> Css.Style
-}
boxShadow3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
boxShadow3 boxShadow3Arg boxShadow3Arg0 boxShadow3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith [ "Css" ] "Value" [ Type.var "c" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadow3Arg, boxShadow3Arg0, boxShadow3Arg1 ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow4: 
    Css.Value a
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Value d
    -> Css.Style
-}
boxShadow4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
boxShadow4 boxShadow4Arg boxShadow4Arg0 boxShadow4Arg1 boxShadow4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith [ "Css" ] "Value" [ Type.var "d" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadow4Arg, boxShadow4Arg0, boxShadow4Arg1, boxShadow4Arg2 ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow5: 
    Css.Value a
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Length compatibleD unitsD
    -> Css.ColorValue compatibleE
    -> Css.Style
-}
boxShadow5 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
boxShadow5 boxShadow5Arg boxShadow5Arg0 boxShadow5Arg1 boxShadow5Arg2 boxShadow5Arg3 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow5"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleE" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadow5Arg
        , boxShadow5Arg0
        , boxShadow5Arg1
        , boxShadow5Arg2
        , boxShadow5Arg3
        ]


{-| Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).

    boxShadow none

    boxShadow2 (px 1) (px 2)

    boxShadow3 (px 1) (px 2) (rgb 211 121 112)

    boxShadow3 (px 1) (px 2) (px 3)

    boxShadow3 inset (px 2) (px 3)

    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)

    boxShadow4 (px 1) (px 2) (px 3) (px 4)

    boxShadow4 inset (px 2) (px 3) (px 4)

    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)

    boxShadow6 inset (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)

boxShadow6: 
    Css.Value a
    -> Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Length compatibleD unitsD
    -> Css.ColorValue compatibleE
    -> Css.Style
-}
boxShadow6 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
boxShadow6 boxShadow6Arg boxShadow6Arg0 boxShadow6Arg1 boxShadow6Arg2 boxShadow6Arg3 boxShadow6Arg4 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow6"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleE" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ boxShadow6Arg
        , boxShadow6Arg0
        , boxShadow6Arg1
        , boxShadow6Arg2
        , boxShadow6Arg3
        , boxShadow6Arg4
        ]


{-| Sets [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)

    lineHeight (px 10)

lineHeight: Css.LengthOrNumber compatible -> Css.Style
-}
lineHeight : Elm.Expression -> Elm.Expression
lineHeight lineHeightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "lineHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ lineHeightArg ]


{-| Sets [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)

    letterSpacing (px 10)

letterSpacing: Css.Length compatible units -> Css.Style
-}
letterSpacing : Elm.Expression -> Elm.Expression
letterSpacing letterSpacingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "letterSpacing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ letterSpacingArg ]


{-| fontFace: String -> String -}
fontFace : String -> Elm.Expression
fontFace fontFaceArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFace"
            , annotation = Just (Type.function [ Type.string ] Type.string)
            }
        )
        [ Elm.string fontFaceArg ]


{-| For when your font is one of [`serif`](#serif), [`sansSerif`](#sansSerif), [`monospace`](#monospace), [`cursive`](#cursive) or [`fantasy`](#fantasy).
If you want to refer to a font by its name (like Helvetica or Arial), use [`fontFamilies`](#fontFamilies) instead.

fontFamily: Css.FontFamily a -> Css.Style
-}
fontFamily : Elm.Expression -> Elm.Expression
fontFamily fontFamilyArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFamily"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontFamily" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontFamilyArg ]


{-| Sets [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)

    fontSize xxSmall

    fontSize (px 12)

fontSize: Css.FontSize a -> Css.Style
-}
fontSize : Elm.Expression -> Elm.Expression
fontSize fontSizeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontSize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontSize" [ Type.var "a" ] ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontSizeArg ]


{-| Sets [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)

    fontStyle italic

fontStyle: Css.FontStyle a -> Css.Style
-}
fontStyle : Elm.Expression -> Elm.Expression
fontStyle fontStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontStyle" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontStyleArg ]


{-| Sets [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)

    fontWeight bold

    fontWeight (int 300)

fontWeight: Css.FontWeight a -> Css.Style
-}
fontWeight : Elm.Expression -> Elm.Expression
fontWeight fontWeightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontWeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontWeight" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontWeightArg ]


{-| Sets [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant)

    fontVariant smallCaps

    fontVariant2 commonLigatures smallCaps

    fontVariant3 commonLigatures smallCaps slashedZero

    fontVariants [ oldstyleNums tabularNums stackedFractions ordinal slashedZero ]

fontVariant: Css.FontVariant a -> Css.Style
-}
fontVariant : Elm.Expression -> Elm.Expression
fontVariant fontVariantArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantArg ]


{-| fontVariant2: Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.Style -}
fontVariant2 : Elm.Expression -> Elm.Expression -> Elm.Expression
fontVariant2 fontVariant2Arg fontVariant2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariant2Arg, fontVariant2Arg0 ]


{-| fontVariant3: 
    Css.FontVariant compatibleA
    -> Css.FontVariant compatibleB
    -> Css.FontVariant compatibleC
    -> Css.Style
-}
fontVariant3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
fontVariant3 fontVariant3Arg fontVariant3Arg0 fontVariant3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariant3Arg, fontVariant3Arg0, fontVariant3Arg1 ]


{-| fontVariantLigatures: Css.FontVariantLigatures a -> Css.Style -}
fontVariantLigatures : Elm.Expression -> Elm.Expression
fontVariantLigatures fontVariantLigaturesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantLigatures"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantLigatures"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantLigaturesArg ]


{-| fontVariantCaps: Css.FontVariantCaps a -> Css.Style -}
fontVariantCaps : Elm.Expression -> Elm.Expression
fontVariantCaps fontVariantCapsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantCaps"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantCaps"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantCapsArg ]


{-| fontVariantNumeric: Css.FontVariantNumeric a -> Css.Style -}
fontVariantNumeric : Elm.Expression -> Elm.Expression
fontVariantNumeric fontVariantNumericArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantNumericArg ]


{-| fontVariantNumeric2: 
    Css.FontVariantNumeric compatibleA
    -> Css.FontVariantNumeric compatibleB
    -> Css.Style
-}
fontVariantNumeric2 : Elm.Expression -> Elm.Expression -> Elm.Expression
fontVariantNumeric2 fontVariantNumeric2Arg fontVariantNumeric2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantNumeric2Arg, fontVariantNumeric2Arg0 ]


{-| fontVariantNumeric3: 
    Css.FontVariantNumeric compatibleA
    -> Css.FontVariantNumeric compatibleB
    -> Css.FontVariantNumeric compatibleC
    -> Css.Style
-}
fontVariantNumeric3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
fontVariantNumeric3 fontVariantNumeric3Arg fontVariantNumeric3Arg0 fontVariantNumeric3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontVariantNumeric3Arg
        , fontVariantNumeric3Arg0
        , fontVariantNumeric3Arg1
        ]


{-| For multiple font families:

    fontFamilies [ "Verdana", "Arial" ]

    fontFamilies [ qt "Gill Sans Extrabold", "Helvetica", .value sansSerif ]

fontFamilies: List String -> Css.Style
-}
fontFamilies : List String -> Elm.Expression
fontFamilies fontFamiliesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFamilies"
            , annotation =
                Just
                    (Type.function
                        [ Type.list Type.string ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list (List.map Elm.string fontFamiliesArg) ]


{-| fontVariantNumerics: List (Css.FontVariantNumeric compatible) -> Css.Style -}
fontVariantNumerics : List Elm.Expression -> Elm.Expression
fontVariantNumerics fontVariantNumericsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumerics"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "FontVariantNumeric"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list fontVariantNumericsArg ]


{-| Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)

    fontFeatureSettings (featureTag "hist")

    fontFeatureSettings (featureTag2 "smcp" on)

    fontFeatureSettings (featureTag2 "swsh" 2)

fontFeatureSettings: Css.FeatureTagValue a -> Css.Style
-}
fontFeatureSettings : Elm.Expression -> Elm.Expression
fontFeatureSettings fontFeatureSettingsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFeatureSettings"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fontFeatureSettingsArg ]


{-| Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)

    fontFeatureSettingsList [ featureTag "c2sc", featureTag "smcp" ]

fontFeatureSettingsList: List (Css.FeatureTagValue a) -> Css.Style
-}
fontFeatureSettingsList : List Elm.Expression -> Elm.Expression
fontFeatureSettingsList fontFeatureSettingsListArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFeatureSettingsList"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "FeatureTagValue"
                                [ Type.var "a" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list fontFeatureSettingsListArg ]


{-| A [`cursor`](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values)
specifies the mouse cursor displayed when mouse pointer is over an element.

cursor: Css.Cursor compatible -> Css.Style
-}
cursor : Elm.Expression -> Elm.Expression
cursor cursorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "cursor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Cursor"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ cursorArg ]


{-| Sets [`outline`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline)

    outline zero

    outline initial

    outline3 (px 10) dashed (rgb 11 14 17)

outline: Css.Outline compatible -> Css.Style
-}
outline : Elm.Expression -> Elm.Expression
outline outlineArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Outline"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outlineArg ]


{-| Sets [`outline`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline)

    outline zero

    outline initial

    outline3 (px 10) dashed (rgb 11 14 17)

outline3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
outline3 : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
outline3 outline3Arg outline3Arg0 outline3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outline3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outline3Arg, outline3Arg0, outline3Arg1 ]


{-| Sets [`outline-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color)

    outlineColor (rgb 11 14 17)

    outlineColor (hex "#ffffff")

    outlineColor (hsla 120 0.5 0.5 0.5)

outlineColor: Css.ColorValue compatible -> Css.Style
-}
outlineColor : Elm.Expression -> Elm.Expression
outlineColor outlineColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outlineColorArg ]


{-| Sets [`outline-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width)

    outlineWidth (px 10)

    outlineWidth (em 1.4)

    outlineWidth none

outlineWidth: Css.LengthOrNone compatible -> Css.Style
-}
outlineWidth : Elm.Expression -> Elm.Expression
outlineWidth outlineWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNone"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outlineWidthArg ]


{-| Sets [`outline-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style)

    outlineStyle dashed

    outlineStyle solid

    outlineStyle outset

outlineStyle: Css.BorderStyle compatible -> Css.Style
-}
outlineStyle : Elm.Expression -> Elm.Expression
outlineStyle outlineStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outlineStyleArg ]


{-| Sets [`outline-offset`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset)

    outlineOffset (px 10)

    outlineOffset (em 1.4)

    outlineOffset (pct 50)

outlineOffset: Css.Length compatible units -> Css.Style
-}
outlineOffset : Elm.Expression -> Elm.Expression
outlineOffset outlineOffsetArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineOffset"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ outlineOffsetArg ]


{-| Sets [`z-index`](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)

    zIndex (int 2)

See <http://package.elm-lang.org/packages/rtfeldman/count/latest> for a useful library
to manage z-index values.

zIndex: Css.IntOrAuto compatible -> Css.Style
-}
zIndex : Elm.Expression -> Elm.Expression
zIndex zIndexArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "zIndex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "IntOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ zIndexArg ]


{-| The[`space-around`](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#Values) value for the
justify-content property.

spaceAround: Css.JustifyContent a b
-}
spaceAround : Elm.Expression
spaceAround =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "spaceAround"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "JustifyContent"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The[`space-between`](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#Values) value for the
justify-content property.

spaceBetween: Css.JustifyContent a b
-}
spaceBetween : Elm.Expression
spaceBetween =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "spaceBetween"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "JustifyContent"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| resize: Css.Resize compatible -> Css.Style -}
resize : Elm.Expression -> Elm.Expression
resize resizeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "resize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Resize"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ resizeArg ]


{-| fill: Css.ColorValue compatible -> Css.Style -}
fill : Elm.Expression -> Elm.Expression
fill fillArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fill"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ fillArg ]


{-| Sets [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

touchAction (auto | none | panX | panLeft | panRight | panY | panUp | panDown | pinchZoom | manipulation | inherit | initial | unset)

touchAction: Css.TouchAction compatible -> Css.Style
-}
touchAction : Elm.Expression -> Elm.Expression
touchAction touchActionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "touchAction"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TouchAction"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ touchActionArg ]


{-| Sets [`border-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing)

    borderSpacing (em 4)

    borderSpacing2 (em 4) (px 2)

borderSpacing: Css.Length compatible units -> Css.Style
-}
borderSpacing : Elm.Expression -> Elm.Expression
borderSpacing borderSpacingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderSpacing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderSpacingArg ]


{-| Sets [`border-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing)

    borderSpacing (em 4)

    borderSpacing2 (em 4) (px 2)

borderSpacing2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderSpacing2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderSpacing2 borderSpacing2Arg borderSpacing2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderSpacing2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderSpacing2Arg, borderSpacing2Arg0 ]


{-| visibility: Css.Visibility compatible -> Css.Style -}
visibility : Elm.Expression -> Elm.Expression
visibility visibilityArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "visibility"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Visibility"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ visibilityArg ]


{-| An [`all`](https://developer.mozilla.org/en-US/docs/Web/CSS/all) property.

all: Css.All compatible -> Css.Style
-}
all : Elm.Expression -> Elm.Expression
all allArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "all"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "All"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ allArg ]


{-| Transforms the given property by adding !important to the end of its
declaration.

important: Css.Style -> Css.Style
-}
important : Elm.Expression -> Elm.Expression
important importantArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "important"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Style" [] ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ importantArg ]


{-| A `solid` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

solid: Css.BorderStyle (Css.TextDecorationStyle {})
-}
solid : Elm.Expression
solid =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "solid"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BorderStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "TextDecorationStyle"
                        [ Type.record [] ]
                    ]
                )
        }


{-| A [`transparent`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#transparent_keyword) color.

transparent: Css.ColorValue Css.NonMixable
-}
transparent : Elm.Expression
transparent =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "transparent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ColorValue"
                    [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                )
        }


{-| [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())
in functional notation.

rgb: Int -> Int -> Int -> Css.Color
-}
rgb : Int -> Int -> Int -> Elm.Expression
rgb rgbArg rgbArg0 rgbArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rgb"
            , annotation =
                Just
                    (Type.function
                        [ Type.int, Type.int, Type.int ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
        )
        [ Elm.int rgbArg, Elm.int rgbArg0, Elm.int rgbArg1 ]


{-| [RGBA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba()).

rgba: Int -> Int -> Int -> Float -> Css.Color
-}
rgba : Int -> Int -> Int -> Float -> Elm.Expression
rgba rgbaArg rgbaArg0 rgbaArg1 rgbaArg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rgba"
            , annotation =
                Just
                    (Type.function
                        [ Type.int, Type.int, Type.int, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
        )
        [ Elm.int rgbaArg
        , Elm.int rgbaArg0
        , Elm.int rgbaArg1
        , Elm.float rgbaArg2
        ]


{-| [HSL color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl())
`s` and `l` values are expressed as a number between 0 and 1 and are converted
to the appropriate percentage at compile-time

hsl: Float -> Float -> Float -> Css.Color
-}
hsl : Float -> Float -> Float -> Elm.Expression
hsl hslArg hslArg0 hslArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "hsl"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
        )
        [ Elm.float hslArg, Elm.float hslArg0, Elm.float hslArg1 ]


{-| [HSLA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsla())
`s` and `l` values are expressed as a number between 0 and 1 and are converted
to the appropriate percentage at compile-time

hsla: Float -> Float -> Float -> Float -> Css.Color
-}
hsla : Float -> Float -> Float -> Float -> Elm.Expression
hsla hslaArg hslaArg0 hslaArg1 hslaArg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "hsla"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
        )
        [ Elm.float hslaArg
        , Elm.float hslaArg0
        , Elm.float hslaArg1
        , Elm.float hslaArg2
        ]


{-| [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())
in hexadecimal notation. You can optionally include `#` as the first character,
for benefits like syntax highlighting in editors, ease of copy/pasting from
tools which express these as e.g. `#abcdef0`, etc.

hex: String -> Css.Color
-}
hex : String -> Elm.Expression
hex hexArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "hex"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
        )
        [ Elm.string hexArg ]


{-| Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)
with the default value of `1`

    fontFeatureSettings (featureTag "hist")

featureTag: String -> Css.FeatureTagValue {}
-}
featureTag : String -> Elm.Expression
featureTag featureTagArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "featureTag"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.string featureTagArg ]


{-| Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)
with a particular integer value

    fontFeatureSettings (featureTag2 "smcp" on)

    fontFeatureSettings (featureTag2 "swsh" 2)

featureTag2: String -> Int -> Css.FeatureTagValue {}
-}
featureTag2 : String -> Int -> Elm.Expression
featureTag2 featureTag2Arg featureTag2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "featureTag2"
            , annotation =
                Just
                    (Type.function
                        [ Type.string, Type.int ]
                        (Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.string featureTag2Arg, Elm.int featureTag2Arg0 ]


{-| Alias for `on` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)

featureOn: Int
-}
featureOn : Elm.Expression
featureOn =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "featureOn"
        , annotation = Just Type.int
        }


{-| Alias for `off` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)

featureOff: Int
-}
featureOff : Elm.Expression
featureOff =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "featureOff"
        , annotation = Just Type.int
        }


{-| Sets [`border-collapse`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse)

    borderCollapse collapse

borderCollapse: Css.BorderCollapse compatible -> Css.Style
-}
borderCollapse : Elm.Expression -> Elm.Expression
borderCollapse borderCollapseArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderCollapse"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderCollapse"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderCollapseArg ]


{-| Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)

    borderColor (rgb 12 11 10)

    borderColor2 (rgb 12 11 10) (hex "FFBBCC")

    borderColor3 (rgb 12 11 10) (hex "FFBBCC") inherit

    borderColor4 (rgb 12 11 10) (hex "FFBBCC") inherit (rgb 1 2 3)

borderColor: Css.ColorValue compatible -> Css.Style
-}
borderColor : Elm.Expression -> Elm.Expression
borderColor borderColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderColorArg ]


{-| Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)

    borderColor (rgb 12 11 10)

    borderColor2 (rgb 12 11 10) (hex "FFBBCC")

    borderColor3 (rgb 12 11 10) (hex "FFBBCC") inherit

    borderColor4 (rgb 12 11 10) (hex "FFBBCC") inherit (rgb 1 2 3)

borderColor2: Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.Style
-}
borderColor2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderColor2 borderColor2Arg borderColor2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderColor2Arg, borderColor2Arg0 ]


{-| Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)

    borderColor (rgb 12 11 10)

    borderColor2 (rgb 12 11 10) (hex "FFBBCC")

    borderColor3 (rgb 12 11 10) (hex "FFBBCC") inherit

    borderColor4 (rgb 12 11 10) (hex "FFBBCC") inherit (rgb 1 2 3)

borderColor3: 
    Css.ColorValue compatibleA
    -> Css.ColorValue compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
borderColor3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderColor3 borderColor3Arg borderColor3Arg0 borderColor3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderColor3Arg, borderColor3Arg0, borderColor3Arg1 ]


{-| Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)

    borderColor (rgb 12 11 10)

    borderColor2 (rgb 12 11 10) (hex "FFBBCC")

    borderColor3 (rgb 12 11 10) (hex "FFBBCC") inherit

    borderColor4 (rgb 12 11 10) (hex "FFBBCC") inherit (rgb 1 2 3)

borderColor4: 
    Css.ColorValue compatibleA
    -> Css.ColorValue compatibleB
    -> Css.ColorValue compatibleC
    -> Css.ColorValue compatibleD
    -> Css.Style
-}
borderColor4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
borderColor4 borderColor4Arg borderColor4Arg0 borderColor4Arg1 borderColor4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderColor4Arg
        , borderColor4Arg0
        , borderColor4Arg1
        , borderColor4Arg2
        ]


{-| Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)

    borderBottomLeftRadius (em 4)

    borderBottomLeftRadius2 (em 4) (px 2)

borderBottomLeftRadius: Css.Length compatible units -> Css.Style
-}
borderBottomLeftRadius : Elm.Expression -> Elm.Expression
borderBottomLeftRadius borderBottomLeftRadiusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomLeftRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomLeftRadiusArg ]


{-| Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)

    borderBottomLeftRadius (em 4)

    borderBottomLeftRadius2 (em 4) (px 2)

borderBottomLeftRadius2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderBottomLeftRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderBottomLeftRadius2 borderBottomLeftRadius2Arg borderBottomLeftRadius2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomLeftRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomLeftRadius2Arg, borderBottomLeftRadius2Arg0 ]


{-| Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)

    borderBottomRightRadius (em 4)

    borderBottomRightRadius2 (em 4) (px 2)

borderBottomRightRadius: Css.Length compatible units -> Css.Style
-}
borderBottomRightRadius : Elm.Expression -> Elm.Expression
borderBottomRightRadius borderBottomRightRadiusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomRightRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomRightRadiusArg ]


{-| Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)

    borderBottomRightRadius (em 4)

    borderBottomRightRadius2 (em 4) (px 2)

borderBottomRightRadius2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderBottomRightRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderBottomRightRadius2 borderBottomRightRadius2Arg borderBottomRightRadius2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomRightRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomRightRadius2Arg, borderBottomRightRadius2Arg0 ]


{-| Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)

    borderTopLeftRadius (em 4)

    borderTopLeftRadius2 (em 4) (px 2)

borderTopLeftRadius: Css.Length compatible units -> Css.Style
-}
borderTopLeftRadius : Elm.Expression -> Elm.Expression
borderTopLeftRadius borderTopLeftRadiusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopLeftRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopLeftRadiusArg ]


{-| Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)

    borderTopLeftRadius (em 4)

    borderTopLeftRadius2 (em 4) (px 2)

borderTopLeftRadius2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderTopLeftRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderTopLeftRadius2 borderTopLeftRadius2Arg borderTopLeftRadius2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopLeftRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopLeftRadius2Arg, borderTopLeftRadius2Arg0 ]


{-| Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)

    borderTopRightRadius (em 4)

    borderTopRightRadius2 (em 4) (px 2)

borderTopRightRadius: Css.Length compatible units -> Css.Style
-}
borderTopRightRadius : Elm.Expression -> Elm.Expression
borderTopRightRadius borderTopRightRadiusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopRightRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopRightRadiusArg ]


{-| Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)

    borderTopRightRadius (em 4)

    borderTopRightRadius2 (em 4) (px 2)

borderTopRightRadius2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderTopRightRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderTopRightRadius2 borderTopRightRadius2Arg borderTopRightRadius2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopRightRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopRightRadius2Arg, borderTopRightRadius2Arg0 ]


{-| Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)

    borderRadius (em 4)

    borderRadius2 (em 4) (px 2)

    borderRadius3 (em 4) (px 2) (pct 5)

    borderRadius4 (em 4) (px 2) (pct 5) (px 3)

borderRadius: Css.Length compatible units -> Css.Style
-}
borderRadius : Elm.Expression -> Elm.Expression
borderRadius borderRadiusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRadiusArg ]


{-| Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)

    borderRadius (em 4)

    borderRadius2 (em 4) (px 2)

    borderRadius3 (em 4) (px 2) (pct 5)

    borderRadius4 (em 4) (px 2) (pct 5) (px 3)

borderRadius2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderRadius2 borderRadius2Arg borderRadius2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRadius2Arg, borderRadius2Arg0 ]


{-| Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)

    borderRadius (em 4)

    borderRadius2 (em 4) (px 2)

    borderRadius3 (em 4) (px 2) (pct 5)

    borderRadius4 (em 4) (px 2) (pct 5) (px 3)

borderRadius3: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Style
-}
borderRadius3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderRadius3 borderRadius3Arg borderRadius3Arg0 borderRadius3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRadius3Arg, borderRadius3Arg0, borderRadius3Arg1 ]


{-| Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)

    borderRadius (em 4)

    borderRadius2 (em 4) (px 2)

    borderRadius3 (em 4) (px 2) (pct 5)

    borderRadius4 (em 4) (px 2) (pct 5) (px 3)

borderRadius4: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Length compatibleD unitsD
    -> Css.Style
-}
borderRadius4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
borderRadius4 borderRadius4Arg borderRadius4Arg0 borderRadius4Arg1 borderRadius4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRadius4Arg
        , borderRadius4Arg0
        , borderRadius4Arg1
        , borderRadius4Arg2
        ]


{-| Sets [`border-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)

    borderWidth (em 4)

    borderWidth2 (em 4) (px 2)

    borderWidth3 (em 4) (px 2) (pct 5)

    borderWidth4 (em 4) (px 2) (pct 5) (px 3)

borderWidth: Css.Length compatible units -> Css.Style
-}
borderWidth : Elm.Expression -> Elm.Expression
borderWidth borderWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderWidthArg ]


{-| Sets [`border-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)

    borderWidth (em 4)

    borderWidth2 (em 4) (px 2)

    borderWidth3 (em 4) (px 2) (pct 5)

    borderWidth4 (em 4) (px 2) (pct 5) (px 3)

borderWidth2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
borderWidth2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderWidth2 borderWidth2Arg borderWidth2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderWidth2Arg, borderWidth2Arg0 ]


{-| Sets [`border-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)

    borderWidth (em 4)

    borderWidth2 (em 4) (px 2)

    borderWidth3 (em 4) (px 2) (pct 5)

    borderWidth4 (em 4) (px 2) (pct 5) (px 3)

borderWidth3: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Style
-}
borderWidth3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderWidth3 borderWidth3Arg borderWidth3Arg0 borderWidth3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderWidth3Arg, borderWidth3Arg0, borderWidth3Arg1 ]


{-| Sets [`border-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)

    borderWidth (em 4)

    borderWidth2 (em 4) (px 2)

    borderWidth3 (em 4) (px 2) (pct 5)

    borderWidth4 (em 4) (px 2) (pct 5) (px 3)

borderWidth4: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Length compatibleD unitsD
    -> Css.Style
-}
borderWidth4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
borderWidth4 borderWidth4Arg borderWidth4Arg0 borderWidth4Arg1 borderWidth4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderWidth4Arg
        , borderWidth4Arg0
        , borderWidth4Arg1
        , borderWidth4Arg2
        ]


{-| Sets [`border-bottom-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)

    borderBottomWidth (em 4)

borderBottomWidth: Css.Length compatible units -> Css.Style
-}
borderBottomWidth : Elm.Expression -> Elm.Expression
borderBottomWidth borderBottomWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomWidthArg ]


{-| Sets [`border-left-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)

    borderLeftWidth (em 4)

borderLeftWidth: Css.Length compatible units -> Css.Style
-}
borderLeftWidth : Elm.Expression -> Elm.Expression
borderLeftWidth borderLeftWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeftWidthArg ]


{-| Sets [`border-right-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)

    borderRightWidth (em 4)

borderRightWidth: Css.Length compatible units -> Css.Style
-}
borderRightWidth : Elm.Expression -> Elm.Expression
borderRightWidth borderRightWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRightWidthArg ]


{-| Sets [`border-top-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)

    borderTopWidth (em 4)

    borderTopWidth2 (em 4) (px 2)

borderTopWidth: Css.Length compatible units -> Css.Style
-}
borderTopWidth : Elm.Expression -> Elm.Expression
borderTopWidth borderTopWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopWidthArg ]


{-| Sets [`border-bottom-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)

    borderBottomStyle dashed

borderBottomStyle: Css.BorderStyle compatible -> Css.Style
-}
borderBottomStyle : Elm.Expression -> Elm.Expression
borderBottomStyle borderBottomStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomStyleArg ]


{-| Sets [`border-left-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)

    borderLeftStyle dashed

borderLeftStyle: Css.BorderStyle compatible -> Css.Style
-}
borderLeftStyle : Elm.Expression -> Elm.Expression
borderLeftStyle borderLeftStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeftStyleArg ]


{-| Sets [`border-right-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)

    borderRightStyle dashed

borderRightStyle: Css.BorderStyle compatible -> Css.Style
-}
borderRightStyle : Elm.Expression -> Elm.Expression
borderRightStyle borderRightStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRightStyleArg ]


{-| Sets [`border-top-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)

    borderTopStyle dashed

borderTopStyle: Css.BorderStyle compatible -> Css.Style
-}
borderTopStyle : Elm.Expression -> Elm.Expression
borderTopStyle borderTopStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopStyleArg ]


{-| Sets [`border-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)

    borderStyle dashed

borderStyle: Css.BorderStyle compatible -> Css.Style
-}
borderStyle : Elm.Expression -> Elm.Expression
borderStyle borderStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderStyleArg ]


{-| Sets [`border-bottom-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)

    borderBottomColor (rgb 101 202 0)

borderBottomColor: Css.ColorValue compatible -> Css.Style
-}
borderBottomColor : Elm.Expression -> Elm.Expression
borderBottomColor borderBottomColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomColorArg ]


{-| Sets [`border-left-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)

    borderLeftColor (rgb 101 202 0)

borderLeftColor: Css.ColorValue compatible -> Css.Style
-}
borderLeftColor : Elm.Expression -> Elm.Expression
borderLeftColor borderLeftColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeftColorArg ]


{-| Sets [`border-right-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)

    borderRightColor (rgb 101 202 0)

borderRightColor: Css.ColorValue compatible -> Css.Style
-}
borderRightColor : Elm.Expression -> Elm.Expression
borderRightColor borderRightColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRightColorArg ]


{-| Sets [`border-top-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)

    borderTopColor (rgb 101 202 0)

borderTopColor: Css.ColorValue compatible -> Css.Style
-}
borderTopColor : Elm.Expression -> Elm.Expression
borderTopColor borderTopColorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopColorArg ]


{-| The `border-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.
Can also be used as `border-box` value for the [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) property.

borderBox: Css.BoxSizing (Css.BackgroundClip {})
-}
borderBox : Elm.Expression
borderBox =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "borderBox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BoxSizing"
                    [ Type.namedWith
                        [ "Css" ]
                        "BackgroundClip"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The `content-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.
Can also be used as `content-box` value for the [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) property.

contentBox: Css.BoxSizing (Css.BackgroundClip {})
-}
contentBox : Elm.Expression
contentBox =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "contentBox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BoxSizing"
                    [ Type.namedWith
                        [ "Css" ]
                        "BackgroundClip"
                        [ Type.record [] ]
                    ]
                )
        }


{-| Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)

    border (px 10)

    border2 (px 10) dashed

    border3 (px 10) dashed (rgb 11 14 17)

border: Css.Length compatible units -> Css.Style
-}
border : Elm.Expression -> Elm.Expression
border borderArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "border"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderArg ]


{-| Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)

    border (px 10)

    border2 (px 10) dashed

    border3 (px 10) dashed (rgb 11 14 17)

border2: Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Style
-}
border2 : Elm.Expression -> Elm.Expression -> Elm.Expression
border2 border2Arg border2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "border2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ border2Arg, border2Arg0 ]


{-| Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)

    border (px 10)

    border2 (px 10) dashed

    border3 (px 10) dashed (rgb 11 14 17)

border3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
border3 : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
border3 border3Arg border3Arg0 border3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "border3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ border3Arg, border3Arg0, border3Arg1 ]


{-| Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)

    borderTop (px 5)

    borderTop2 (px 5) dashed

    borderTop3 (px 5) dashed (rgb 11 14 17)

borderTop: Css.Length compatible units -> Css.Style
-}
borderTop : Elm.Expression -> Elm.Expression
borderTop borderTopArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTopArg ]


{-| Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)

    borderTop (px 5)

    borderTop2 (px 5) dashed

    borderTop3 (px 5) dashed (rgb 11 14 17)

borderTop2: Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Style
-}
borderTop2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderTop2 borderTop2Arg borderTop2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTop2Arg, borderTop2Arg0 ]


{-| Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)

    borderTop (px 5)

    borderTop2 (px 5) dashed

    borderTop3 (px 5) dashed (rgb 11 14 17)

borderTop3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
borderTop3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderTop3 borderTop3Arg borderTop3Arg0 borderTop3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderTop3Arg, borderTop3Arg0, borderTop3Arg1 ]


{-| Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)

    borderBottom (px 5)

    borderBottom2 (px 5) dashed

    borderBottom3 (px 5) dashed (rgb 11 14 17)

borderBottom: Css.Length compatible units -> Css.Style
-}
borderBottom : Elm.Expression -> Elm.Expression
borderBottom borderBottomArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottomArg ]


{-| Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)

    borderBottom (px 5)

    borderBottom2 (px 5) dashed

    borderBottom3 (px 5) dashed (rgb 11 14 17)

borderBottom2: Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Style
-}
borderBottom2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderBottom2 borderBottom2Arg borderBottom2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottom2Arg, borderBottom2Arg0 ]


{-| Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)

    borderBottom (px 5)

    borderBottom2 (px 5) dashed

    borderBottom3 (px 5) dashed (rgb 11 14 17)

borderBottom3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
borderBottom3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderBottom3 borderBottom3Arg borderBottom3Arg0 borderBottom3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderBottom3Arg, borderBottom3Arg0, borderBottom3Arg1 ]


{-| Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)

    borderLeft (px 5)

    borderLeft2 (px 5) dashed

    borderLeft3 (px 5) dashed (rgb 11 14 17)

borderLeft: Css.Length compatible units -> Css.Style
-}
borderLeft : Elm.Expression -> Elm.Expression
borderLeft borderLeftArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeftArg ]


{-| Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)

    borderLeft (px 5)

    borderLeft2 (px 5) dashed

    borderLeft3 (px 5) dashed (rgb 11 14 17)

borderLeft2: Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Style
-}
borderLeft2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderLeft2 borderLeft2Arg borderLeft2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeft2Arg, borderLeft2Arg0 ]


{-| Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)

    borderLeft (px 5)

    borderLeft2 (px 5) dashed

    borderLeft3 (px 5) dashed (rgb 11 14 17)

borderLeft3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
borderLeft3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderLeft3 borderLeft3Arg borderLeft3Arg0 borderLeft3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderLeft3Arg, borderLeft3Arg0, borderLeft3Arg1 ]


{-| Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)

    borderRight (px 5)

    borderRight2 (px 5) dashed

    borderRight3 (px 5) dashed (rgb 11 14 17)

borderRight: Css.Length compatible units -> Css.Style
-}
borderRight : Elm.Expression -> Elm.Expression
borderRight borderRightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRightArg ]


{-| Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)

    borderRight (px 5)

    borderRight2 (px 5) dashed

    borderRight3 (px 5) dashed (rgb 11 14 17)

borderRight2: Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Style
-}
borderRight2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderRight2 borderRight2Arg borderRight2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRight2Arg, borderRight2Arg0 ]


{-| Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)

    borderRight (px 5)

    borderRight2 (px 5) dashed

    borderRight3 (px 5) dashed (rgb 11 14 17)

borderRight3: 
    Css.Length compatibleA unitsA
    -> Css.BorderStyle compatibleB
    -> Css.ColorValue compatibleC
    -> Css.Style
-}
borderRight3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderRight3 borderRight3Arg borderRight3Arg0 borderRight3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderRight3Arg, borderRight3Arg0, borderRight3Arg1 ]


{-| Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)

    borderImageOutset (int 2)

    borderImageOutset2 (int 2) (px 15)

    borderImageOutset3 (int 2) (px 15) (int 1.5)

    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)

borderImageOutset: Css.LengthOrNumber compatible -> Css.Style
-}
borderImageOutset : Elm.Expression -> Elm.Expression
borderImageOutset borderImageOutsetArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageOutsetArg ]


{-| Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)

    borderImageOutset (int 2)

    borderImageOutset2 (int 2) (px 15)

    borderImageOutset3 (int 2) (px 15) (int 1.5)

    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)

borderImageOutset2: Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Style
-}
borderImageOutset2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderImageOutset2 borderImageOutset2Arg borderImageOutset2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageOutset2Arg, borderImageOutset2Arg0 ]


{-| Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)

    borderImageOutset (int 2)

    borderImageOutset2 (int 2) (px 15)

    borderImageOutset3 (int 2) (px 15) (int 1.5)

    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)

borderImageOutset3: 
    Css.LengthOrNumber compatibleA
    -> Css.LengthOrNumber compatibleB
    -> Css.LengthOrNumber compatibleC
    -> Css.Style
-}
borderImageOutset3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderImageOutset3 borderImageOutset3Arg borderImageOutset3Arg0 borderImageOutset3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageOutset3Arg
        , borderImageOutset3Arg0
        , borderImageOutset3Arg1
        ]


{-| Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)

    borderImageOutset (int 2)

    borderImageOutset2 (int 2) (px 15)

    borderImageOutset3 (int 2) (px 15) (int 1.5)

    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)

borderImageOutset4: 
    Css.LengthOrNumber compatibleA
    -> Css.LengthOrNumber compatibleB
    -> Css.LengthOrNumber compatibleC
    -> Css.LengthOrNumber compatibleD
    -> Css.Style
-}
borderImageOutset4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
borderImageOutset4 borderImageOutset4Arg borderImageOutset4Arg0 borderImageOutset4Arg1 borderImageOutset4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageOutset4Arg
        , borderImageOutset4Arg0
        , borderImageOutset4Arg1
        , borderImageOutset4Arg2
        ]


{-| Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)

    borderImageWidth (int 3)

    borderImageWidth2 (int 3) (px 15)

    borderImageWidth3 (int 3) (px 15) auto

    borderImageWidth4 (int 3) (px 15) auto (int 2)

borderImageWidth: Css.LengthOrNumber compatible -> Css.Style
-}
borderImageWidth : Elm.Expression -> Elm.Expression
borderImageWidth borderImageWidthArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageWidthArg ]


{-| Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)

    borderImageWidth (int 3)

    borderImageWidth2 (int 3) (px 15)

    borderImageWidth3 (int 3) (px 15) auto

    borderImageWidth4 (int 3) (px 15) auto (int 2)

borderImageWidth2: Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Style
-}
borderImageWidth2 : Elm.Expression -> Elm.Expression -> Elm.Expression
borderImageWidth2 borderImageWidth2Arg borderImageWidth2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageWidth2Arg, borderImageWidth2Arg0 ]


{-| Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)

    borderImageWidth (int 3)

    borderImageWidth2 (int 3) (px 15)

    borderImageWidth3 (int 3) (px 15) auto

    borderImageWidth4 (int 3) (px 15) auto (int 2)

borderImageWidth3: 
    Css.LengthOrNumber compatibleA
    -> Css.LengthOrNumber compatibleB
    -> Css.LengthOrNumber compatibleC
    -> Css.Style
-}
borderImageWidth3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
borderImageWidth3 borderImageWidth3Arg borderImageWidth3Arg0 borderImageWidth3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageWidth3Arg, borderImageWidth3Arg0, borderImageWidth3Arg1 ]


{-| Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)

    borderImageWidth (int 3)

    borderImageWidth2 (int 3) (px 15)

    borderImageWidth3 (int 3) (px 15) auto

    borderImageWidth4 (int 3) (px 15) auto (int 2)

borderImageWidth4: 
    Css.LengthOrNumber compatibleA
    -> Css.LengthOrNumber compatibleB
    -> Css.LengthOrNumber compatibleC
    -> Css.LengthOrNumber compatibleD
    -> Css.Style
-}
borderImageWidth4 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
borderImageWidth4 borderImageWidth4Arg borderImageWidth4Arg0 borderImageWidth4Arg1 borderImageWidth4Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ borderImageWidth4Arg
        , borderImageWidth4Arg0
        , borderImageWidth4Arg1
        , borderImageWidth4Arg2
        ]


{-| The `scroll` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.
This can also represent a `scroll` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.
It can also be used in the overflow-block and oveflow-line media features.

scroll: 
    { value : String
    , scroll : Css.Compatible
    , overflow : Css.Compatible
    , backgroundAttachment : Css.Compatible
    , blockAxisOverflow : Css.Compatible
    , inlineAxisOverflow : Css.Compatible
    }
-}
scroll : Elm.Expression
scroll =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "scroll"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "scroll", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "overflow", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "backgroundAttachment"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "blockAxisOverflow"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "inlineAxisOverflow"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| This can represent:
a `visible` [`visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility#Values),
a `visible` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values), or
a `visible` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

visible: 
    { value : String
    , overflow : Css.Compatible
    , visibility : Css.Compatible
    , pointerEvents : Css.Compatible
    }
-}
visible : Elm.Expression
visible =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "visible"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "overflow", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "visibility", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "pointerEvents"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| block: Css.Display {} -}
block : Elm.Expression
block =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "block"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| inlineBlock: Css.Display {} -}
inlineBlock : Elm.Expression
inlineBlock =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inlineBlock"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`inline-flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

inlineFlex: Css.Display {}
-}
inlineFlex : Elm.Expression
inlineFlex =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inlineFlex"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| inline: Css.Display {} -}
inline : Elm.Expression
inline =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inline"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| none: 
    { borderStyle : Css.Compatible
    , cursor : Css.Compatible
    , display : Css.Compatible
    , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible
    , none : Css.Compatible
    , keyframes : Css.Compatible
    , lengthOrNone : Css.Compatible
    , lengthOrNoneOrMinMaxDimension : Css.Compatible
    , listStyleType : Css.Compatible
    , listStyleTypeOrPositionOrImage : Css.Compatible
    , outline : Css.Compatible
    , pointerEvents : Css.Compatible
    , resize : Css.Compatible
    , textDecorationLine : Css.Compatible
    , transform : Css.Compatible
    , backgroundImage : Css.Compatible
    , value : String
    , textTransform : Css.Compatible
    , touchAction : Css.Compatible
    , updateFrequency : Css.Compatible
    , blockAxisOverflow : Css.Compatible
    , inlineAxisOverflow : Css.Compatible
    , pointerDevice : Css.Compatible
    , hoverCapability : Css.Compatible
    , scriptingSupport : Css.Compatible
    }
-}
none : Elm.Expression
none =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "none"
        , annotation =
            Just
                (Type.record
                    [ ( "borderStyle"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "display", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "lengthOrNumberOrAutoOrNoneOrContent"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "none", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "keyframes", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "lengthOrNone"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrNoneOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "listStyleType"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "listStyleTypeOrPositionOrImage"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "outline", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "pointerEvents"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "resize", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "textDecorationLine"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "transform", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "backgroundImage"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "value", Type.string )
                    , ( "textTransform"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "touchAction"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "updateFrequency"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "blockAxisOverflow"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "inlineAxisOverflow"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "pointerDevice"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "hoverCapability"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "scriptingSupport"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| auto: 
    { lengthOrAuto : Css.Compatible
    , overflow : Css.Compatible
    , textRendering : Css.Compatible
    , flexBasis : Css.Compatible
    , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible
    , alignItemsOrAuto : Css.Compatible
    , justifyContentOrAuto : Css.Compatible
    , cursor : Css.Compatible
    , value : String
    , lengthOrAutoOrCoverOrContain : Css.Compatible
    , intOrAuto : Css.Compatible
    , pointerEvents : Css.Compatible
    , touchAction : Css.Compatible
    , tableLayout : Css.Compatible
    }
-}
auto : Elm.Expression
auto =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "auto"
        , annotation =
            Just
                (Type.record
                    [ ( "lengthOrAuto"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "overflow", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "textRendering"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "flexBasis", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "lengthOrNumberOrAutoOrNoneOrContent"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "alignItemsOrAuto"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "justifyContentOrAuto"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "value", Type.string )
                    , ( "lengthOrAutoOrCoverOrContain"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "intOrAuto", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "pointerEvents"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "touchAction"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "tableLayout"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| The [`inherit`](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit) value.
Any CSS property can be set to this value.

inherit: Css.BasicProperty
-}
inherit : Elm.Expression
inherit =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inherit"
        , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
        }


{-| The [`unset`](https://developer.mozilla.org/en-US/docs/Web/CSS/unset) value.
Any CSS property can be set to this value.

unset: Css.BasicProperty
-}
unset : Elm.Expression
unset =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "unset"
        , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
        }


{-| The [`initial`](https://developer.mozilla.org/en-US/docs/Web/CSS/initial) value.
Any CSS property can be set to this value.

initial: Css.BasicProperty
-}
initial : Elm.Expression
initial =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "initial"
        , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
        }


{-| noWrap: Css.WhiteSpace (Css.FlexDirectionOrWrap (Css.FlexWrap {})) -}
noWrap : Elm.Expression
noWrap =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noWrap"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "WhiteSpace"
                    [ Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith [ "Css" ] "FlexWrap" [ Type.record [] ]
                        ]
                    ]
                )
        }


{-| The [`top`](https://developer.mozilla.org/en-US/docs/Web/CSS/top) property.

    position absolute

    top (px 5)

This can also be used as a `top` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:

    verticalAlign top

top: Css.LengthOrAuto compatible -> Css.Style
-}
top : Elm.Expression -> Elm.Expression
top topArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "top"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ topArg ]


{-| A `static` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.

    position static

static: Css.Position {}
-}
static : Elm.Expression
static =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "static"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
        }


{-| A `fixed` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.
This can also represent a `fixed` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.

    position fixed

This can also be the `fixed` value for [`table-layout`](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout#Values).

fixed: 
    { value : String
    , position : Css.Compatible
    , backgroundAttachment : Css.Compatible
    , tableLayout : Css.Compatible
    }
-}
fixed : Elm.Expression
fixed =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fixed"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "position", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "backgroundAttachment"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "tableLayout"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| A `sticky` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.

    position sticky

sticky: Css.Position {}
-}
sticky : Elm.Expression
sticky =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "sticky"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
        }


{-| A `relative` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.

    position relative

relative: Css.Position {}
-}
relative : Elm.Expression
relative =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "relative"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
        }


{-| An `absolute` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.

    position absolute

absolute: Css.Position {}
-}
absolute : Elm.Expression
absolute =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "absolute"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
        }


{-| The [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property.

position: Css.Position compatible -> Css.Style
-}
position : Elm.Expression -> Elm.Expression
position positionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "position"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Position"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ positionArg ]


{-| Sets ['float'](https://developer.mozilla.org/en-US/docs/Web/CSS/float)
float : Float compatible -> Style

    float right

float: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
float : (Elm.Expression -> Elm.Expression) -> Elm.Expression
float floatArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "float"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "floatUnpack" floatArg ]


{-| The [`bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/bottom) property.

    position absolute

    bottom (px 5)

This can also be used as a `bottom` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:

    verticalAlign bottom

bottom: Css.LengthOrAuto compatible -> Css.Style
-}
bottom : Elm.Expression -> Elm.Expression
bottom bottomArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "bottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ bottomArg ]


{-| The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign middle

middle: Css.VerticalAlign a b
-}
middle : Elm.Expression
middle =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "middle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The `baseline` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign baseline

baseline: Css.VerticalAlign a b
-}
baseline : Elm.Expression
baseline =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "baseline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The `sub` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign sub

sub: Css.VerticalAlign a b
-}
sub : Elm.Expression
sub =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "sub"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The `super` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign super

super: Css.VerticalAlign a b
-}
super : Elm.Expression
super =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "super"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The `text-top` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign textTop

textTop: Css.VerticalAlign a b
-}
textTop : Elm.Expression
textTop =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "textTop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The `text-bottom` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.

    verticalAlign textBottom

textBottom: Css.VerticalAlign a b
-}
textBottom : Elm.Expression
textBottom =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "textBottom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "VerticalAlign"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| `hidden` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.

This can also represent a `hidden` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values),
as well as a `hidden` [`visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility#Values).

hidden: Css.Overflow (Css.BorderStyle (Css.Visibility {}))
-}
hidden : Elm.Expression
hidden =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "hidden"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "Overflow"
                    [ Type.namedWith
                        [ "Css" ]
                        "BorderStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "Visibility"
                            [ Type.record [] ]
                        ]
                    ]
                )
        }


{-| A `wavy` [text decoration style](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style#Values).

wavy: Css.TextDecorationStyle {}
-}
wavy : Elm.Expression
wavy =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "wavy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "TextDecorationStyle"
                    [ Type.record [] ]
                )
        }


{-| A `dotted` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

dotted: Css.BorderStyle (Css.TextDecorationStyle {})
-}
dotted : Elm.Expression
dotted =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "dotted"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BorderStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "TextDecorationStyle"
                        [ Type.record [] ]
                    ]
                )
        }


{-| A `dashed` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

dashed: Css.BorderStyle (Css.TextDecorationStyle {})
-}
dashed : Elm.Expression
dashed =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "dashed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BorderStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "TextDecorationStyle"
                        [ Type.record [] ]
                    ]
                )
        }


{-| A `double` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

double: Css.BorderStyle (Css.TextDecorationStyle {})
-}
double : Elm.Expression
double =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "double"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BorderStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "TextDecorationStyle"
                        [ Type.record [] ]
                    ]
                )
        }


{-| A `groove` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

groove: Css.BorderStyle {}
-}
groove : Elm.Expression
groove =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "groove"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
        }


{-| A `ridge` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

ridge: Css.BorderStyle {}
-}
ridge : Elm.Expression
ridge =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "ridge"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
        }


{-| An `inset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

inset: Css.BorderStyle {}
-}
inset : Elm.Expression
inset =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inset"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
        }


{-| An `outset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).

outset: Css.BorderStyle {}
-}
outset : Elm.Expression
outset =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "outset"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
        }


{-| The [`matrix()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix()) transform-function.

    transform (matrix 0.5 1 1.5 2 2.5 3)

matrix: Float -> Float -> Float -> Float -> Float -> Float -> Css.Transform {}
-}
matrix : Float -> Float -> Float -> Float -> Float -> Float -> Elm.Expression
matrix matrixArg matrixArg0 matrixArg1 matrixArg2 matrixArg3 matrixArg4 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "matrix"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float matrixArg
        , Elm.float matrixArg0
        , Elm.float matrixArg1
        , Elm.float matrixArg2
        , Elm.float matrixArg3
        , Elm.float matrixArg4
        ]


{-| The [`matrix3d()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix3d()) transform-function.

    transform (matrix3d 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3)

matrix3d: 
    Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Css.Transform {}
-}
matrix3d :
    Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Float
    -> Elm.Expression
matrix3d matrix3dArg matrix3dArg0 matrix3dArg1 matrix3dArg2 matrix3dArg3 matrix3dArg4 matrix3dArg5 matrix3dArg6 matrix3dArg7 matrix3dArg8 matrix3dArg9 matrix3dArg10 matrix3dArg11 matrix3dArg12 matrix3dArg13 matrix3dArg14 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "matrix3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float matrix3dArg
        , Elm.float matrix3dArg0
        , Elm.float matrix3dArg1
        , Elm.float matrix3dArg2
        , Elm.float matrix3dArg3
        , Elm.float matrix3dArg4
        , Elm.float matrix3dArg5
        , Elm.float matrix3dArg6
        , Elm.float matrix3dArg7
        , Elm.float matrix3dArg8
        , Elm.float matrix3dArg9
        , Elm.float matrix3dArg10
        , Elm.float matrix3dArg11
        , Elm.float matrix3dArg12
        , Elm.float matrix3dArg13
        , Elm.float matrix3dArg14
        ]


{-| The [`perspective()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#perspective()) transform-function.

     transform (perspective 0.5)

perspective: Float -> Css.Transform {}
-}
perspective : Float -> Elm.Expression
perspective perspectiveArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "perspective"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float perspectiveArg ]


{-| The [`rotate3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate3d()) transform-function.

     transform (rotate3d 1 1 1 (deg 90))

rotate3d: Float -> Float -> Float -> Css.Angle compatible -> Css.Transform {}
-}
rotate3d : Float -> Float -> Float -> Elm.Expression -> Elm.Expression
rotate3d rotate3dArg rotate3dArg0 rotate3dArg1 rotate3dArg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rotate3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float rotate3dArg
        , Elm.float rotate3dArg0
        , Elm.float rotate3dArg1
        , rotate3dArg2
        ]


{-| The [`rotateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateX()) transform-function.

     transform (rotateX (deg 90))

rotateX: Css.Angle compatible -> Css.Transform {}
-}
rotateX : Elm.Expression -> Elm.Expression
rotateX rotateXArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ rotateXArg ]


{-| The [`rotateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateY()) transform-function.

     transform (rotateY (deg 90))

rotateY: Css.Angle compatible -> Css.Transform {}
-}
rotateY : Elm.Expression -> Elm.Expression
rotateY rotateYArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ rotateYArg ]


{-| The [`rotateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateZ()) transform-function.

     transform (rotateZ (deg 90))

rotateZ: Css.Angle compatible -> Css.Transform {}
-}
rotateZ : Elm.Expression -> Elm.Expression
rotateZ rotateZArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateZ"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ rotateZArg ]


{-| The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.

     transform (scale 0.5)
     transform (scale2 0.5 0.7)

scale: Float -> Css.Transform {}
-}
scale : Float -> Elm.Expression
scale scaleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scale"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float scaleArg ]


{-| The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.

     transform (scale 0.5)
     transform (scale2 0.5 0.7)

scale2: Float -> Float -> Css.Transform {}
-}
scale2 : Float -> Float -> Elm.Expression
scale2 scale2Arg scale2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scale2"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float scale2Arg, Elm.float scale2Arg0 ]


{-| The [`scale3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale3d()) transform-function.

     transform (scale3d 0.5 0.5 1)

scale3d: Float -> Float -> Float -> Css.Transform {}
-}
scale3d : Float -> Float -> Float -> Elm.Expression
scale3d scale3dArg scale3dArg0 scale3dArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scale3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float scale3dArg, Elm.float scale3dArg0, Elm.float scale3dArg1 ]


{-| The [`scaleX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleX()) transform-function.

     transform (scaleX 0.5)

scaleX: Float -> Css.Transform {}
-}
scaleX : Float -> Elm.Expression
scaleX scaleXArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scaleX"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float scaleXArg ]


{-| The [`scaleY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleY()) transform-function.

     transform (scaleY 0.5)

scaleY: Float -> Css.Transform {}
-}
scaleY : Float -> Elm.Expression
scaleY scaleYArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scaleY"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.float scaleYArg ]


{-| The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.

     transform (skew (deg 90))
     transform (skew2 (deg 90) (deg 45))

skew: Css.Angle compatible -> Css.Transform {}
-}
skew : Elm.Expression -> Elm.Expression
skew skewArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "skew"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ skewArg ]


{-| The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.

     transform (skew (deg 90))
     transform (skew2 (deg 90) (deg 45))

skew2: Css.Angle compatibleA -> Css.Angle compatibleB -> Css.Transform {}
-}
skew2 : Elm.Expression -> Elm.Expression -> Elm.Expression
skew2 skew2Arg skew2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "skew2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ skew2Arg, skew2Arg0 ]


{-| The [`skewX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewX()) transform-function.

     transform (skewX (deg 90))

skewX: Css.Angle compatible -> Css.Transform {}
-}
skewX : Elm.Expression -> Elm.Expression
skewX skewXArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "skewX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ skewXArg ]


{-| The [`skewY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewY()) transform-function.

    transform (skewY (deg 90))

skewY: Css.Angle compatible -> Css.Transform {}
-}
skewY : Elm.Expression -> Elm.Expression
skewY skewYArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "skewY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ skewYArg ]


{-| The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.

    transform (translate (px 100))

    transform (translate2 (px 100) (pct -45))

translate: Css.Length compatible units -> Css.Transform {}
-}
translate : Elm.Expression -> Elm.Expression
translate translateArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translate"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translateArg ]


{-| The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.

    transform (translate (px 100))

    transform (translate2 (px 100) (pct -45))

translate2: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Transform {}
-}
translate2 : Elm.Expression -> Elm.Expression -> Elm.Expression
translate2 translate2Arg translate2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translate2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translate2Arg, translate2Arg0 ]


{-| The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.

    transform (translate3d (px 100) (px 100) (px 100))

translate3d: 
    Css.Length compatibleA unitsA
    -> Css.Length compatibleB unitsB
    -> Css.Length compatibleC unitsC
    -> Css.Transform {}
-}
translate3d :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
translate3d translate3dArg translate3dArg0 translate3dArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translate3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translate3dArg, translate3dArg0, translate3dArg1 ]


{-| The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.

    transform (translateX (px 100))

translateX: Css.Length compatible units -> Css.Transform {}
-}
translateX : Elm.Expression -> Elm.Expression
translateX translateXArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translateX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translateXArg ]


{-| The [`translateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateY()) transform-function.

    transform (translateY (px 100))

translateY: Css.Length compatible units -> Css.Transform {}
-}
translateY : Elm.Expression -> Elm.Expression
translateY translateYArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translateY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translateYArg ]


{-| The [`translateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateZ()) transform-function.

    transform (translateZ (px 100))

translateZ: Css.Length compatible units -> Css.Transform {}
-}
translateZ : Elm.Expression -> Elm.Expression
translateZ translateZArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "translateZ"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ translateZArg ]


{-| The [`rotate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()) transform-function.

     transform (rotate (deg 90))

rotate: Css.Angle compatible -> Css.Transform {}
-}
rotate : Elm.Expression -> Elm.Expression
rotate rotateArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rotate"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
        )
        [ rotateArg ]


{-| The `fill-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.

fillBox: Css.TransformBox {}
-}
fillBox : Elm.Expression
fillBox =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fillBox"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TransformBox" [ Type.record [] ])
        }


{-| The `view-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.

viewBox: Css.TransformBox {}
-}
viewBox : Elm.Expression
viewBox =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "viewBox"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TransformBox" [ Type.record [] ])
        }


{-| The `flat` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.

flat: Css.TransformStyle {}
-}
flat : Elm.Expression
flat =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "flat"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TransformStyle" [ Type.record [] ])
        }


{-| The `preserve-3d` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.

preserve3d: Css.TransformStyle {}
-}
preserve3d : Elm.Expression
preserve3d =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "preserve3d"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TransformStyle" [ Type.record [] ])
        }


{-| The [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis#Values) value for the
flex-basis property.

content: Css.LengthOrNumberOrAutoOrNoneOrContent (Css.FlexBasis {})
-}
content : Elm.Expression
content =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "content"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "LengthOrNumberOrAutoOrNoneOrContent"
                    [ Type.namedWith [ "Css" ] "FlexBasis" [ Type.record [] ] ]
                )
        }


{-| The[`wrap-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the
flex-wrap property.

wrapReverse: Css.FlexDirectionOrWrap (Css.FlexWrap {})
-}
wrapReverse : Elm.Expression
wrapReverse =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "wrapReverse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith [ "Css" ] "FlexWrap" [ Type.record [] ] ]
                )
        }


{-| The[`wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the
flex-wrap property.

wrap: Css.FlexDirectionOrWrap (Css.FlexWrap {})
-}
wrap : Elm.Expression
wrap =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "wrap"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith [ "Css" ] "FlexWrap" [ Type.record [] ] ]
                )
        }


{-| The[`flex-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the
align-items property.
Can also be used with flex-box's justify-content property to apply the value of flex-start.

flexStart: Css.AlignItems a b
-}
flexStart : Elm.Expression
flexStart =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "flexStart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "AlignItems"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The[`flex-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the
align-items property.
Can also be used with flex-box's justify-content property to apply the value of flex-end.

flexEnd: Css.AlignItems a b
-}
flexEnd : Elm.Expression
flexEnd =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "flexEnd"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "AlignItems"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The[`stretch`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the
align-items property.

stretch: Css.AlignItems a b
-}
stretch : Elm.Expression
stretch =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "stretch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "AlignItems"
                    [ Type.var "a", Type.var "b" ]
                )
        }


{-| The[`row`](<https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction> #Values) value for the
flex-direction property.

row: Css.FlexDirectionOrWrap (Css.FlexDirection {})
-}
row : Elm.Expression
row =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "row"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith
                        [ "Css" ]
                        "FlexDirection"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The[`row-reverse`](<https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction> #Values) value for the
flex-direction property.

rowReverse: Css.FlexDirectionOrWrap (Css.FlexDirection {})
-}
rowReverse : Elm.Expression
rowReverse =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "rowReverse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith
                        [ "Css" ]
                        "FlexDirection"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The[`column`](<https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction> #Values) value for the
flex-direction property.

column: Css.FlexDirectionOrWrap (Css.FlexDirection {})
-}
column : Elm.Expression
column =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "column"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith
                        [ "Css" ]
                        "FlexDirection"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The[`column-reverse`](<https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction> #Values) value for the
flex-direction property.

columnReverse: Css.FlexDirectionOrWrap (Css.FlexDirection {})
-}
columnReverse : Elm.Expression
columnReverse =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "columnReverse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FlexDirectionOrWrap"
                    [ Type.namedWith
                        [ "Css" ]
                        "FlexDirection"
                        [ Type.record [] ]
                    ]
                )
        }


{-| serif: Css.FontFamily {} -}
serif : Elm.Expression
serif =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "serif"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
        }


{-| sansSerif: Css.FontFamily {} -}
sansSerif : Elm.Expression
sansSerif =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "sansSerif"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
        }


{-| monospace: Css.FontFamily {} -}
monospace : Elm.Expression
monospace =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "monospace"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
        }


{-| cursive: Css.FontFamily {} -}
cursive : Elm.Expression
cursive =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cursive"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
        }


{-| fantasy: Css.FontFamily {} -}
fantasy : Elm.Expression
fantasy =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "fantasy"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
        }


{-| xxSmall: Css.FontSize {} -}
xxSmall : Elm.Expression
xxSmall =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "xxSmall"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| xSmall: Css.FontSize {} -}
xSmall : Elm.Expression
xSmall =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "xSmall"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| small: Css.FontSize {} -}
small : Elm.Expression
small =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "small"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| large: Css.FontSize {} -}
large : Elm.Expression
large =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "large"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| xLarge: Css.FontSize {} -}
xLarge : Elm.Expression
xLarge =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "xLarge"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| xxLarge: Css.FontSize {} -}
xxLarge : Elm.Expression
xxLarge =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "xxLarge"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| smaller: Css.FontSize {} -}
smaller : Elm.Expression
smaller =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "smaller"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| larger: Css.FontSize {} -}
larger : Elm.Expression
larger =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "larger"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
        }


{-| normal: Css.Normal -}
normal : Elm.Expression
normal =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "normal"
        , annotation = Just (Type.namedWith [ "Css" ] "Normal" [])
        }


{-| italic: Css.FontStyle {} -}
italic : Elm.Expression
italic =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "italic"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontStyle" [ Type.record [] ])
        }


{-| oblique: Css.FontStyle {} -}
oblique : Elm.Expression
oblique =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "oblique"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontStyle" [ Type.record [] ])
        }


{-| bold: Css.FontWeight {} -}
bold : Elm.Expression
bold =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "bold"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
        }


{-| lighter: Css.FontWeight {} -}
lighter : Elm.Expression
lighter =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lighter"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
        }


{-| bolder: Css.FontWeight {} -}
bolder : Elm.Expression
bolder =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "bolder"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
        }


{-| smallCaps: Css.FontVariantCaps {} -}
smallCaps : Elm.Expression
smallCaps =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "smallCaps"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| allSmallCaps: Css.FontVariantCaps {} -}
allSmallCaps : Elm.Expression
allSmallCaps =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "allSmallCaps"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| petiteCaps: Css.FontVariantCaps {} -}
petiteCaps : Elm.Expression
petiteCaps =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "petiteCaps"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| allPetiteCaps: Css.FontVariantCaps {} -}
allPetiteCaps : Elm.Expression
allPetiteCaps =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "allPetiteCaps"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| unicase: Css.FontVariantCaps {} -}
unicase : Elm.Expression
unicase =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "unicase"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| titlingCaps: Css.FontVariantCaps {} -}
titlingCaps : Elm.Expression
titlingCaps =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "titlingCaps"
        , annotation =
            Just (Type.namedWith [ "Css" ] "FontVariantCaps" [ Type.record [] ])
        }


{-| commonLigatures: Css.FontVariantLigatures {} -}
commonLigatures : Elm.Expression
commonLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "commonLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| noCommonLigatures: Css.FontVariantLigatures {} -}
noCommonLigatures : Elm.Expression
noCommonLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noCommonLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| discretionaryLigatures: Css.FontVariantLigatures {} -}
discretionaryLigatures : Elm.Expression
discretionaryLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "discretionaryLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| noDiscretionaryLigatures: Css.FontVariantLigatures {} -}
noDiscretionaryLigatures : Elm.Expression
noDiscretionaryLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noDiscretionaryLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| historicalLigatures: Css.FontVariantLigatures {} -}
historicalLigatures : Elm.Expression
historicalLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "historicalLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| noHistoricalLigatures: Css.FontVariantLigatures {} -}
noHistoricalLigatures : Elm.Expression
noHistoricalLigatures =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noHistoricalLigatures"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| contextual: Css.FontVariantLigatures {} -}
contextual : Elm.Expression
contextual =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "contextual"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| noContextual: Css.FontVariantLigatures {} -}
noContextual : Elm.Expression
noContextual =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noContextual"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantLigatures"
                    [ Type.record [] ]
                )
        }


{-| liningNums: Css.FontVariantNumeric {} -}
liningNums : Elm.Expression
liningNums =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "liningNums"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| oldstyleNums: Css.FontVariantNumeric {} -}
oldstyleNums : Elm.Expression
oldstyleNums =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "oldstyleNums"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| proportionalNums: Css.FontVariantNumeric {} -}
proportionalNums : Elm.Expression
proportionalNums =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "proportionalNums"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| tabularNums: Css.FontVariantNumeric {} -}
tabularNums : Elm.Expression
tabularNums =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tabularNums"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| diagonalFractions: Css.FontVariantNumeric {} -}
diagonalFractions : Elm.Expression
diagonalFractions =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "diagonalFractions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| stackedFractions: Css.FontVariantNumeric {} -}
stackedFractions : Elm.Expression
stackedFractions =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "stackedFractions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| ordinal: Css.FontVariantNumeric {} -}
ordinal : Elm.Expression
ordinal =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "ordinal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| slashedZero: Css.FontVariantNumeric {} -}
slashedZero : Elm.Expression
slashedZero =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "slashedZero"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "FontVariantNumeric"
                    [ Type.record [] ]
                )
        }


{-| default: Css.Cursor {} -}
default : Elm.Expression
default =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "default"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| pointer: Css.Cursor {} -}
pointer : Elm.Expression
pointer =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "pointer"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| crosshair: Css.Cursor {} -}
crosshair : Elm.Expression
crosshair =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "crosshair"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| contextMenu: Css.Cursor {} -}
contextMenu : Elm.Expression
contextMenu =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "contextMenu"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| help: Css.Cursor {} -}
help : Elm.Expression
help =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "help"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| progress: Css.Cursor {} -}
progress : Elm.Expression
progress =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "progress"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| wait: Css.Cursor {} -}
wait : Elm.Expression
wait =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "wait"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| cell: Css.Cursor {} -}
cell : Elm.Expression
cell =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cell"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| text_: Css.Cursor {} -}
text_ : Elm.Expression
text_ =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "text_"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| verticalText: Css.Cursor {} -}
verticalText : Elm.Expression
verticalText =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "verticalText"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| cursorAlias: Css.Cursor {} -}
cursorAlias : Elm.Expression
cursorAlias =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cursorAlias"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| copy: Css.Cursor {} -}
copy : Elm.Expression
copy =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "copy"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| move: Css.Cursor {} -}
move : Elm.Expression
move =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "move"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| noDrop: Css.Cursor {} -}
noDrop : Elm.Expression
noDrop =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noDrop"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| notAllowed: Css.Cursor {} -}
notAllowed : Elm.Expression
notAllowed =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "notAllowed"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| eResize: Css.Cursor {} -}
eResize : Elm.Expression
eResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "eResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| nResize: Css.Cursor {} -}
nResize : Elm.Expression
nResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "nResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| neResize: Css.Cursor {} -}
neResize : Elm.Expression
neResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "neResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| nwResize: Css.Cursor {} -}
nwResize : Elm.Expression
nwResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "nwResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| sResize: Css.Cursor {} -}
sResize : Elm.Expression
sResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "sResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| seResize: Css.Cursor {} -}
seResize : Elm.Expression
seResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "seResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| swResize: Css.Cursor {} -}
swResize : Elm.Expression
swResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "swResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| wResize: Css.Cursor {} -}
wResize : Elm.Expression
wResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "wResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| ewResize: Css.Cursor {} -}
ewResize : Elm.Expression
ewResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "ewResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| nsResize: Css.Cursor {} -}
nsResize : Elm.Expression
nsResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "nsResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| neswResize: Css.Cursor {} -}
neswResize : Elm.Expression
neswResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "neswResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| nwseResize: Css.Cursor {} -}
nwseResize : Elm.Expression
nwseResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "nwseResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| colResize: Css.Cursor {} -}
colResize : Elm.Expression
colResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "colResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| rowResize: Css.Cursor {} -}
rowResize : Elm.Expression
rowResize =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "rowResize"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| allScroll: Css.Cursor {} -}
allScroll : Elm.Expression
allScroll =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "allScroll"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| zoomIn: Css.Cursor {} -}
zoomIn : Elm.Expression
zoomIn =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "zoomIn"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| zoomOut: Css.Cursor {} -}
zoomOut : Elm.Expression
zoomOut =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "zoomOut"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| grab: Css.Cursor {} -}
grab : Elm.Expression
grab =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "grab"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| grabbing: Css.Cursor {} -}
grabbing : Elm.Expression
grabbing =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "grabbing"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
        }


{-| A `visiblePainted` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

    pointer-events: visiblePainted

visiblePainted: Css.PointerEvents {}
-}
visiblePainted : Elm.Expression
visiblePainted =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "visiblePainted"
        , annotation =
            Just (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ])
        }


{-| A `visibleFill` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

    pointer-events: visibleFill

visibleFill: Css.PointerEvents {}
-}
visibleFill : Elm.Expression
visibleFill =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "visibleFill"
        , annotation =
            Just (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ])
        }


{-| A `visibleStroke` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

    pointer-events: visibleStroke

visibleStroke: Css.PointerEvents {}
-}
visibleStroke : Elm.Expression
visibleStroke =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "visibleStroke"
        , annotation =
            Just (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ])
        }


{-| A `painted` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

    pointer-events: painted

painted: Css.PointerEvents {}
-}
painted : Elm.Expression
painted =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "painted"
        , annotation =
            Just (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ])
        }


{-| A `stroke` [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) value.

    pointer-events: stroke

stroke: Css.PointerEvents {}
-}
stroke : Elm.Expression
stroke =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "stroke"
        , annotation =
            Just (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ])
        }


{-| [`pct`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pct) units.

pct: Float -> Css.Pct
-}
pct : Float -> Elm.Expression
pct pctArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pct"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pct" [])
                    )
            }
        )
        [ Elm.float pctArg ]


{-| [`px`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) units.

px: Float -> Css.Px
-}
px : Float -> Elm.Expression
px pxArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "px"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Px" [])
                    )
            }
        )
        [ Elm.float pxArg ]


{-| [`em`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#em) units.

em: Float -> Css.Em
-}
em : Float -> Elm.Expression
em emArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "em"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Em" [])
                    )
            }
        )
        [ Elm.float emArg ]


{-| [`pt`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pt) units.

pt: Float -> Css.Pt
-}
pt : Float -> Elm.Expression
pt ptArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pt"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pt" [])
                    )
            }
        )
        [ Elm.float ptArg ]


{-| [`ex`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ex) units.

ex: Float -> Css.Ex
-}
ex : Float -> Elm.Expression
ex exArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "ex"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Ex" [])
                    )
            }
        )
        [ Elm.float exArg ]


{-| [`ch`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch) units.

ch: Float -> Css.Ch
-}
ch : Float -> Elm.Expression
ch chArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "ch"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Ch" [])
                    )
            }
        )
        [ Elm.float chArg ]


{-| [`rem`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#rem) units.

rem: Float -> Css.Rem
-}
rem : Float -> Elm.Expression
rem remArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rem"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Rem" [])
                    )
            }
        )
        [ Elm.float remArg ]


{-| [`vh`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) units.

vh: Float -> Css.Vh
-}
vh : Float -> Elm.Expression
vh vhArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "vh"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vh" [])
                    )
            }
        )
        [ Elm.float vhArg ]


{-| [`vw`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) units.

vw: Float -> Css.Vw
-}
vw : Float -> Elm.Expression
vw vwArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "vw"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vw" [])
                    )
            }
        )
        [ Elm.float vwArg ]


{-| [`vmin`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmin) units.

vmin: Float -> Css.Vmin
-}
vmin : Float -> Elm.Expression
vmin vminArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "vmin"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vmin" [])
                    )
            }
        )
        [ Elm.float vminArg ]


{-| [`vmax`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) units.

vmax: Float -> Css.Vmax
-}
vmax : Float -> Elm.Expression
vmax vmaxArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "vmax"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vmax" [])
                    )
            }
        )
        [ Elm.float vmaxArg ]


{-| [`mm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#mm) units.

mm: Float -> Css.Mm
-}
mm : Float -> Elm.Expression
mm mmArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "mm"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Mm" [])
                    )
            }
        )
        [ Elm.float mmArg ]


{-| [`cm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#cm) units.

cm: Float -> Css.Cm
-}
cm : Float -> Elm.Expression
cm cmArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "cm"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Cm" [])
                    )
            }
        )
        [ Elm.float cmArg ]


{-| [`in`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#in) units.

(This is `inches` instead of `in` because `in` is a reserved keyword in Elm.)

inches: Float -> Css.In
-}
inches : Float -> Elm.Expression
inches inchesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "inches"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "In" [])
                    )
            }
        )
        [ Elm.float inchesArg ]


{-| [`pc`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pc) units.

pc: Float -> Css.Pc
-}
pc : Float -> Elm.Expression
pc pcArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pc"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pc" [])
                    )
            }
        )
        [ Elm.float pcArg ]


{-| A unitless integer. Useful with properties like [`borderImageOutset`](#borderImageOutset)
which accept either length units or unitless numbers for some properties.

int: 
    Int
    -> Css.IntOrAuto (Css.Number (Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.FontWeight (Css.NumberOrInfinite { numericValue :
        Float
    , unitLabel : String
    , units : Css.UnitlessInteger
    })))))
-}
int : Int -> Elm.Expression
int intArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "int"
            , annotation =
                Just
                    (Type.function
                        [ Type.int ]
                        (Type.namedWith
                            [ "Css" ]
                            "IntOrAuto"
                            [ Type.namedWith
                                [ "Css" ]
                                "Number"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumberOrAutoOrNoneOrContent"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "LengthOrNumber"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "FontWeight"
                                            [ Type.namedWith
                                                [ "Css" ]
                                                "NumberOrInfinite"
                                                [ Type.record
                                                    [ ( "numericValue"
                                                      , Type.float
                                                      )
                                                    , ( "unitLabel"
                                                      , Type.string
                                                      )
                                                    , ( "units"
                                                      , Type.namedWith
                                                            [ "Css" ]
                                                            "UnitlessInteger"
                                                            []
                                                      )
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        )
                    )
            }
        )
        [ Elm.int intArg ]


{-| A unitless number. Useful with properties like [`flexGrow`](#flexGrow)
which accept unitless numbers.

num: 
    Float
    -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.Number (Css.LengthOrNumber (Css.NumberOrInfinite { numericValue :
        Float
    , unitLabel : String
    , units : Css.UnitlessFloat
    })))
-}
num : Float -> Elm.Expression
num numArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "num"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "LengthOrNumberOrAutoOrNoneOrContent"
                            [ Type.namedWith
                                [ "Css" ]
                                "Number"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "NumberOrInfinite"
                                        [ Type.record
                                            [ ( "numericValue", Type.float )
                                            , ( "unitLabel", Type.string )
                                            , ( "units"
                                              , Type.namedWith
                                                    [ "Css" ]
                                                    "UnitlessFloat"
                                                    []
                                              )
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        )
                    )
            }
        )
        [ Elm.float numArg ]


{-| Convenience length value that compiles to 0 with no units.

    css [ padding zero ]

...compiles to:

    padding: 0;

zero: 
    { value : String
    , length : Css.Compatible
    , lengthOrNumber : Css.Compatible
    , lengthOrNone : Css.Compatible
    , lengthOrAuto : Css.Compatible
    , lengthOrMinMaxDimension : Css.Compatible
    , lengthOrNoneOrMinMaxDimension : Css.Compatible
    , number : Css.Compatible
    , outline : Css.Compatible
    , units : Css.UnitlessInteger
    , unitLabel : String
    , numericValue : Float
    , lengthOrAutoOrCoverOrContain : Css.Compatible
    }
-}
zero : Elm.Expression
zero =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "zero"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "lengthOrNumber"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrNone"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrAuto"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrNoneOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "number", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "outline", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "units", Type.namedWith [ "Css" ] "UnitlessInteger" [] )
                    , ( "unitLabel", Type.string )
                    , ( "numericValue", Type.float )
                    , ( "lengthOrAutoOrCoverOrContain"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| The css [calc](https://developer.mozilla.org/en/docs/Web/CSS/calc) function.

    almostPct100 =
        calc (pct 100) minus (px 2)

    -- calc(100vh - (2px + 2rem))
    screenMinusBorderAndFooter =
        calc (vh 100) minus (calc (px 2) plus (rem 2))

    myWidth =
        width almostPct100

    myHeight =
        height screenMinusBorderAndFooter

Using \* and / with calc isn't supported. Use arithmetics from elm instead.

calc: 
    Css.Calc compatibleA
    -> Css.CalcExpression
    -> Css.Calc compatibleB
    -> Css.CalculatedLength
-}
calc : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
calc calcArg calcArg0 calcArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "calc"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Calc"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith [ "Css" ] "CalcExpression" []
                        , Type.namedWith
                            [ "Css" ]
                            "Calc"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "CalculatedLength" [])
                    )
            }
        )
        [ calcArg, calcArg0, calcArg1 ]


{-| Use with calc to add lengths together

    >>> calc (pct 100) plus (px 2)
    calc (100% + 2px)

plus: Css.CalcExpression
-}
plus : Elm.Expression
plus =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "plus"
        , annotation = Just (Type.namedWith [ "Css" ] "CalcExpression" [])
        }


{-| Use with calc to subtract lengths from eachother

    >>> calc (pct 100) minus (px 2)
    calc (100% - 2px)

minus: Css.CalcExpression
-}
minus : Elm.Expression
minus =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "minus"
        , annotation = Just (Type.namedWith [ "Css" ] "CalcExpression" [])
        }


{-| [`deg`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#deg) units.

deg: Float -> Css.AngleOrDirection (Css.Angle {})
-}
deg : Float -> Elm.Expression
deg degArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "deg"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ Elm.float degArg ]


{-| [`rad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#rad) units.

rad: Float -> Css.AngleOrDirection (Css.Angle {})
-}
rad : Float -> Elm.Expression
rad radArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "rad"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ Elm.float radArg ]


{-| [`grad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#grad) units.

grad: Float -> Css.AngleOrDirection (Css.Angle {})
-}
grad : Float -> Elm.Expression
grad gradArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "grad"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ Elm.float gradArg ]


{-| [`turn`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#tr) units.

turn: Float -> Css.AngleOrDirection (Css.Angle {})
-}
turn : Float -> Elm.Expression
turn turnArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "turn"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ Elm.float turnArg ]


{-| A [duration](#Duration) in seconds.

sec: Float -> Css.Duration {}
-}
sec : Float -> Elm.Expression
sec secArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "sec"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Duration" [ Type.record [] ])
                    )
            }
        )
        [ Elm.float secArg ]


{-| A [duration](#Duration) in milliseconds.

ms: Float -> Css.Duration {}
-}
ms : Float -> Elm.Expression
ms msArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "ms"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Duration" [ Type.record [] ])
                    )
            }
        )
        [ Elm.float msArg ]


{-| Define a custom pseudo-class.

This can be useful for deprecated pseudo-classes such as `-moz-any-link`, which
[has been deprecated and removed](https://www.fxsitecompat.com/en-CA/docs/2016/any-link-css-pseudo-class-has-been-unprefixed/)
in modern browsers.

    button
        [ css [ pseudoClass "-moz-any-link" [ color (hex "f00") ] ] ]
        [ text "Whee!" ]

...outputs

    <button class="f9fcb2">Whee!</button>

    <style>
        .f9fcb2:-moz-any-link {
            color: #f00;
        }
    </style>

pseudoClass: String -> List Css.Style -> Css.Style
-}
pseudoClass : String -> List Elm.Expression -> Elm.Expression
pseudoClass pseudoClassArg pseudoClassArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pseudoClass"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string pseudoClassArg, Elm.list pseudoClassArg0 ]


{-| An [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aactive)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

active: List Css.Style -> Css.Style
-}
active : List Elm.Expression -> Elm.Expression
active activeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "active"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list activeArg ]


{-| An [`:any`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aany)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

any: String -> List Css.Style -> Css.Style
-}
any : String -> List Elm.Expression -> Elm.Expression
any anyArg anyArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "any"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string anyArg, Elm.list anyArg0 ]


{-| A [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Achecked)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

checked: List Css.Style -> Css.Style
-}
checked : List Elm.Expression -> Elm.Expression
checked checkedArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "checked"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list checkedArg ]


{-| A [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adisabled)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

disabled: List Css.Style -> Css.Style
-}
disabled : List Elm.Expression -> Elm.Expression
disabled disabledArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "disabled"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list disabledArg ]


{-| An [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aempty)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

empty: List Css.Style -> Css.Style
-}
empty : List Elm.Expression -> Elm.Expression
empty emptyArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "empty"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list emptyArg ]


{-| An [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aenabled)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

enabled: List Css.Style -> Css.Style
-}
enabled : List Elm.Expression -> Elm.Expression
enabled enabledArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "enabled"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list enabledArg ]


{-| A [`:first`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

first: List Css.Style -> Css.Style
-}
first : List Elm.Expression -> Elm.Expression
first firstArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "first"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list firstArg ]


{-| A [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-child)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

firstChild: List Css.Style -> Css.Style
-}
firstChild : List Elm.Expression -> Elm.Expression
firstChild firstChildArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "firstChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list firstChildArg ]


{-| A [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-of-type)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

firstOfType: List Css.Style -> Css.Style
-}
firstOfType : List Elm.Expression -> Elm.Expression
firstOfType firstOfTypeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "firstOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list firstOfTypeArg ]


{-| A [`:fullscreen`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afullscreen)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

fullscreen: List Css.Style -> Css.Style
-}
fullscreen : List Elm.Expression -> Elm.Expression
fullscreen fullscreenArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "fullscreen"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list fullscreenArg ]


{-| A [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afocus)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

focus: List Css.Style -> Css.Style
-}
focus : List Elm.Expression -> Elm.Expression
focus focusArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "focus"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list focusArg ]


{-| An [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ahover)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

hover: List Css.Style -> Css.Style
-}
hover : List Elm.Expression -> Elm.Expression
hover hoverArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "hover"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list hoverArg ]


{-| An [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avisited)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

visited: List Css.Style -> Css.Style
-}
visited : List Elm.Expression -> Elm.Expression
visited visitedArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "visited"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list visitedArg ]


{-| An [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aindeterminate)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

indeterminate: List Css.Style -> Css.Style
-}
indeterminate : List Elm.Expression -> Elm.Expression
indeterminate indeterminateArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "indeterminate"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list indeterminateArg ]


{-| An [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ainvalid)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

invalid: List Css.Style -> Css.Style
-}
invalid : List Elm.Expression -> Elm.Expression
invalid invalidArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "invalid"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list invalidArg ]


{-| A [`:lang`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alang)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

lang: String -> List Css.Style -> Css.Style
-}
lang : String -> List Elm.Expression -> Elm.Expression
lang langArg langArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "lang"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string langArg, Elm.list langArg0 ]


{-| A [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-child)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

lastChild: List Css.Style -> Css.Style
-}
lastChild : List Elm.Expression -> Elm.Expression
lastChild lastChildArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "lastChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list lastChildArg ]


{-| A [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-of-type)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

lastOfType: List Css.Style -> Css.Style
-}
lastOfType : List Elm.Expression -> Elm.Expression
lastOfType lastOfTypeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "lastOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list lastOfTypeArg ]


{-| A [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alink)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

link: List Css.Style -> Css.Style
-}
link : List Elm.Expression -> Elm.Expression
link linkArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "link"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list linkArg ]


{-| An [`:nth-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-child)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

nthChild: String -> List Css.Style -> Css.Style
-}
nthChild : String -> List Elm.Expression -> Elm.Expression
nthChild nthChildArg nthChildArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "nthChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string nthChildArg, Elm.list nthChildArg0 ]


{-| An [`:nth-last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-child)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

nthLastChild: String -> List Css.Style -> Css.Style
-}
nthLastChild : String -> List Elm.Expression -> Elm.Expression
nthLastChild nthLastChildArg nthLastChildArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "nthLastChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string nthLastChildArg, Elm.list nthLastChildArg0 ]


{-| An [`:nth-last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-of-type)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

nthLastOfType: String -> List Css.Style -> Css.Style
-}
nthLastOfType : String -> List Elm.Expression -> Elm.Expression
nthLastOfType nthLastOfTypeArg nthLastOfTypeArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "nthLastOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string nthLastOfTypeArg, Elm.list nthLastOfTypeArg0 ]


{-| An [`:nth`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-of-type)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

nthOfType: String -> List Css.Style -> Css.Style
-}
nthOfType : String -> List Elm.Expression -> Elm.Expression
nthOfType nthOfTypeArg nthOfTypeArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "nthOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string nthOfTypeArg, Elm.list nthOfTypeArg0 ]


{-| An [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-child)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

onlyChild: List Css.Style -> Css.Style
-}
onlyChild : List Elm.Expression -> Elm.Expression
onlyChild onlyChildArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "onlyChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list onlyChildArg ]


{-| An [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-of-type)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

onlyOfType: List Css.Style -> Css.Style
-}
onlyOfType : List Elm.Expression -> Elm.Expression
onlyOfType onlyOfTypeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "onlyOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list onlyOfTypeArg ]


{-| An [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aoptional)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

optional: List Css.Style -> Css.Style
-}
optional : List Elm.Expression -> Elm.Expression
optional optionalArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "optional"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list optionalArg ]


{-| An [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aout-of-range)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

outOfRange: List Css.Style -> Css.Style
-}
outOfRange : List Elm.Expression -> Elm.Expression
outOfRange outOfRangeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "outOfRange"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list outOfRangeArg ]


{-| A [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aread-write)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

readWrite: List Css.Style -> Css.Style
-}
readWrite : List Elm.Expression -> Elm.Expression
readWrite readWriteArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "readWrite"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list readWriteArg ]


{-| A [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Arequired)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

required: List Css.Style -> Css.Style
-}
required : List Elm.Expression -> Elm.Expression
required requiredArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "required"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list requiredArg ]


{-| A [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aroot)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

root: List Css.Style -> Css.Style
-}
root : List Elm.Expression -> Elm.Expression
root rootArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "root"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list rootArg ]


{-| A [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ascope)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

scope: List Css.Style -> Css.Style
-}
scope : List Elm.Expression -> Elm.Expression
scope scopeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "scope"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list scopeArg ]


{-| A [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

target: List Css.Style -> Css.Style
-}
target : List Elm.Expression -> Elm.Expression
target targetArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "target"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list targetArg ]


{-| A [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avalid)
[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).

valid: List Css.Style -> Css.Style
-}
valid : List Elm.Expression -> Elm.Expression
valid validArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "valid"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list validArg ]


{-| Define a custom pseudo-element.

    textarea
        [ css [ pseudoElement "-webkit-scrollbar" [ display none ] ] ]
        []

...outputs

    <textarea class="d84ff7"></textarea>

    <style>
        .d84ff7::-webkit-scrollbar {
            display: none;
        }
    </style>

pseudoElement: String -> List Css.Style -> Css.Style
-}
pseudoElement : String -> List Elm.Expression -> Elm.Expression
pseudoElement pseudoElementArg pseudoElementArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "pseudoElement"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.string pseudoElementArg, Elm.list pseudoElementArg0 ]


{-| An [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter)
[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).

after: List Css.Style -> Css.Style
-}
after : List Elm.Expression -> Elm.Expression
after afterArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "after"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list afterArg ]


{-| A [`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Abefore)
[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).

before: List Css.Style -> Css.Style
-}
before : List Elm.Expression -> Elm.Expression
before beforeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "before"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list beforeArg ]


{-| A [`::first-letter`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-letter)
[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).

firstLetter: List Css.Style -> Css.Style
-}
firstLetter : List Elm.Expression -> Elm.Expression
firstLetter firstLetterArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "firstLetter"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list firstLetterArg ]


{-| A [`::first-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-line)
[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).

firstLine: List Css.Style -> Css.Style
-}
firstLine : List Elm.Expression -> Elm.Expression
firstLine firstLineArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "firstLine"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list firstLineArg ]


{-| A [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aselection)
[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).

selection: List Css.Style -> Css.Style
-}
selection : List Elm.Expression -> Elm.Expression
selection selectionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "selection"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.list selectionArg ]


{-| src_: Css.ImportType compatible -> String -}
src_ : Elm.Expression -> Elm.Expression
src_ src_Arg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "src_"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ImportType"
                            [ Type.var "compatible" ]
                        ]
                        Type.string
                    )
            }
        )
        [ src_Arg ]


{-| For use with [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)

    fontFamily serif

    fontFamilies [ qt "Gill Sans Extrabold", "Helvetica", .value sansSerif ]

qt: String -> String
-}
qt : String -> Elm.Expression
qt qtArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "qt"
            , annotation = Just (Type.function [ Type.string ] Type.string)
            }
        )
        [ Elm.string qtArg ]


{-| The [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type) property.

listStyleType: Css.ListStyleType compatible -> Css.Style
-}
listStyleType : Elm.Expression -> Elm.Expression
listStyleType listStyleTypeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyleType"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ listStyleTypeArg ]


{-| disc: Css.ListStyle (Css.ListStyleType {}) -}
disc : Elm.Expression
disc =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "disc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| circle: Css.ListStyle (Css.ListStyleType {}) -}
circle : Elm.Expression
circle =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| square: Css.ListStyle (Css.ListStyleType {}) -}
square : Elm.Expression
square =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "square"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| decimal: Css.ListStyle (Css.ListStyleType {}) -}
decimal : Elm.Expression
decimal =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "decimal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| decimalLeadingZero: Css.ListStyle (Css.ListStyleType {}) -}
decimalLeadingZero : Elm.Expression
decimalLeadingZero =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "decimalLeadingZero"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| lowerRoman: Css.ListStyle (Css.ListStyleType {}) -}
lowerRoman : Elm.Expression
lowerRoman =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lowerRoman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| upperRoman: Css.ListStyle (Css.ListStyleType {}) -}
upperRoman : Elm.Expression
upperRoman =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "upperRoman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| lowerGreek: Css.ListStyle (Css.ListStyleType {}) -}
lowerGreek : Elm.Expression
lowerGreek =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lowerGreek"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| lowerAlpha: Css.ListStyle (Css.ListStyleType {}) -}
lowerAlpha : Elm.Expression
lowerAlpha =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lowerAlpha"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| lowerLatin: Css.ListStyle (Css.ListStyleType {}) -}
lowerLatin : Elm.Expression
lowerLatin =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lowerLatin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| upperAlpha: Css.ListStyle (Css.ListStyleType {}) -}
upperAlpha : Elm.Expression
upperAlpha =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "upperAlpha"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| upperLatin: Css.ListStyle (Css.ListStyleType {}) -}
upperLatin : Elm.Expression
upperLatin =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "upperLatin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| arabicIndic: Css.ListStyle (Css.ListStyleType {}) -}
arabicIndic : Elm.Expression
arabicIndic =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "arabicIndic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| armenian: Css.ListStyle (Css.ListStyleType {}) -}
armenian : Elm.Expression
armenian =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "armenian"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| bengali: Css.ListStyle (Css.ListStyleType {}) -}
bengali : Elm.Expression
bengali =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "bengali"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| cjkEarthlyBranch: Css.ListStyle (Css.ListStyleType {}) -}
cjkEarthlyBranch : Elm.Expression
cjkEarthlyBranch =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cjkEarthlyBranch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| cjkHeavenlyStem: Css.ListStyle (Css.ListStyleType {}) -}
cjkHeavenlyStem : Elm.Expression
cjkHeavenlyStem =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cjkHeavenlyStem"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| devanagari: Css.ListStyle (Css.ListStyleType {}) -}
devanagari : Elm.Expression
devanagari =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "devanagari"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| georgian: Css.ListStyle (Css.ListStyleType {}) -}
georgian : Elm.Expression
georgian =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "georgian"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| gujarati: Css.ListStyle (Css.ListStyleType {}) -}
gujarati : Elm.Expression
gujarati =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "gujarati"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| gurmukhi: Css.ListStyle (Css.ListStyleType {}) -}
gurmukhi : Elm.Expression
gurmukhi =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "gurmukhi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| kannada: Css.ListStyle (Css.ListStyleType {}) -}
kannada : Elm.Expression
kannada =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "kannada"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| khmer: Css.ListStyle (Css.ListStyleType {}) -}
khmer : Elm.Expression
khmer =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "khmer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| lao: Css.ListStyle (Css.ListStyleType {}) -}
lao : Elm.Expression
lao =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lao"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| malayalam: Css.ListStyle (Css.ListStyleType {}) -}
malayalam : Elm.Expression
malayalam =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "malayalam"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| myanmar: Css.ListStyle (Css.ListStyleType {}) -}
myanmar : Elm.Expression
myanmar =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "myanmar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| oriya: Css.ListStyle (Css.ListStyleType {}) -}
oriya : Elm.Expression
oriya =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "oriya"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| telugu: Css.ListStyle (Css.ListStyleType {}) -}
telugu : Elm.Expression
telugu =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "telugu"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| thai: Css.ListStyle (Css.ListStyleType {}) -}
thai : Elm.Expression
thai =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "thai"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStyleType"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The [`list-style-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position) property.

listStylePosition: Css.ListStylePosition compatible -> Css.Style
-}
listStylePosition : Elm.Expression -> Elm.Expression
listStylePosition listStylePositionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "listStylePosition"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStylePosition"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ listStylePositionArg ]


{-| inside: Css.ListStyle (Css.ListStylePosition {}) -}
inside : Elm.Expression
inside =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inside"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStylePosition"
                        [ Type.record [] ]
                    ]
                )
        }


{-| outside: Css.ListStyle (Css.ListStylePosition {}) -}
outside : Elm.Expression
outside =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "outside"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "ListStyle"
                    [ Type.namedWith
                        [ "Css" ]
                        "ListStylePosition"
                        [ Type.record [] ]
                    ]
                )
        }


{-| The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.

listStyle: Css.ListStyle compatible -> Css.Style
-}
listStyle : Elm.Expression -> Elm.Expression
listStyle listStyleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ listStyleArg ]


{-| The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.

listStyle2: Css.ListStyle compatible1 -> Css.ListStyle compatible2 -> Css.Style
-}
listStyle2 : Elm.Expression -> Elm.Expression -> Elm.Expression
listStyle2 listStyle2Arg listStyle2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible1" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible2" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ listStyle2Arg, listStyle2Arg0 ]


{-| The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.

listStyle3: 
    Css.ListStyle compatible1
    -> Css.ListStyle compatible2
    -> Css.ListStyle compatible3
    -> Css.Style
-}
listStyle3 :
    Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
listStyle3 listStyle3Arg listStyle3Arg0 listStyle3Arg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible1" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible2" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible3" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ listStyle3Arg, listStyle3Arg0, listStyle3Arg1 ]


{-| Sets [`linear-gradient`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient)

    linearGradient (stop2 red <| pct 75) (stop <| hex "222") []

    linearGradient (stop red) (stop <| hex "222") [ stop green, stop blue ]

linearGradient: 
    Css.ColorStop compatibleA compatibleB unit
    -> Css.ColorStop compatibleA compatibleB unit
    -> List (Css.ColorStop compatibleA compatibleB unit)
    -> Css.BackgroundImage (Css.ListStyle {})
-}
linearGradient :
    Elm.Expression -> Elm.Expression -> List Elm.Expression -> Elm.Expression
linearGradient linearGradientArg linearGradientArg0 linearGradientArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "linearGradient"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "ColorStop"
                                [ Type.var "compatibleA"
                                , Type.var "compatibleB"
                                , Type.var "unit"
                                ]
                            )
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.namedWith
                                [ "Css" ]
                                "ListStyle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ linearGradientArg, linearGradientArg0, Elm.list linearGradientArg1 ]


{-| Sets [`linear-gradient`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient)

    linearGradient2 toBottomLeft (stop2 red <| pct 75) (stop <| hex "222") []

    linearGradient2 toTop (stop red) (stop <| hex "222") [ stop green, stop blue ]

linearGradient2: 
    Css.AngleOrDirection compatible
    -> Css.ColorStop compatibleA compatibleB unit
    -> Css.ColorStop compatibleA compatibleB unit
    -> List (Css.ColorStop compatibleA compatibleB unit)
    -> Css.BackgroundImage (Css.ListStyle {})
-}
linearGradient2 :
    Elm.Expression
    -> Elm.Expression
    -> Elm.Expression
    -> List Elm.Expression
    -> Elm.Expression
linearGradient2 linearGradient2Arg linearGradient2Arg0 linearGradient2Arg1 linearGradient2Arg2 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "linearGradient2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.var "compatible" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "ColorStop"
                                [ Type.var "compatibleA"
                                , Type.var "compatibleB"
                                , Type.var "unit"
                                ]
                            )
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.namedWith
                                [ "Css" ]
                                "ListStyle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
        )
        [ linearGradient2Arg
        , linearGradient2Arg0
        , linearGradient2Arg1
        , Elm.list linearGradient2Arg2
        ]


{-| [`ColorStop`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

stop: Css.ColorValue compatibleA -> Css.ColorStop compatibleA compatibleB unit
-}
stop : Elm.Expression -> Elm.Expression
stop stopArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "stop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        )
                    )
            }
        )
        [ stopArg ]


{-| [`ColorStop`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

stop2: 
    Css.ColorValue compatibleA
    -> Css.Length compatibleB unit
    -> Css.ColorStop compatibleA compatibleB unit
-}
stop2 : Elm.Expression -> Elm.Expression -> Elm.Expression
stop2 stop2Arg stop2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "stop2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unit" ]
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        )
                    )
            }
        )
        [ stop2Arg, stop2Arg0 ]


{-| Sets the direction to [`bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toBottom: Css.AngleOrDirection {}
-}
toBottom : Elm.Expression
toBottom =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toBottom"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`bottom left`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toBottomLeft: Css.AngleOrDirection {}
-}
toBottomLeft : Elm.Expression
toBottomLeft =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toBottomLeft"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`bottom right`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toBottomRight: Css.AngleOrDirection {}
-}
toBottomRight : Elm.Expression
toBottomRight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toBottomRight"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`left`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toLeft: Css.AngleOrDirection {}
-}
toLeft : Elm.Expression
toLeft =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toLeft"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`right`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toRight: Css.AngleOrDirection {}
-}
toRight : Elm.Expression
toRight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toRight"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`top`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toTop: Css.AngleOrDirection {}
-}
toTop : Elm.Expression
toTop =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toTop"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`top left`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toTopLeft: Css.AngleOrDirection {}
-}
toTopLeft : Elm.Expression
toTopLeft =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toTopLeft"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| Sets the direction to [`top right`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Values)

toTopRight: Css.AngleOrDirection {}
-}
toTopRight : Elm.Expression
toTopRight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "toTopRight"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "AngleOrDirection" [ Type.record [] ])
        }


{-| The `pre` [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space) value.

    whiteSpace pre

pre: Css.WhiteSpace {}
-}
pre : Elm.Expression
pre =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "pre"
        , annotation =
            Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
        }


{-| The `pre-line` [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space) value.

    whiteSpace preLine

preLine: Css.WhiteSpace {}
-}
preLine : Elm.Expression
preLine =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "preLine"
        , annotation =
            Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
        }


{-| The `pre-wrap` [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space) value.

    whiteSpace preWrap

preWrap: Css.WhiteSpace {}
-}
preWrap : Elm.Expression
preWrap =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "preWrap"
        , annotation =
            Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
        }


{-| The [`infinite`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count#Values) value.

infinite: Css.Infinite
-}
infinite : Elm.Expression
infinite =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "infinite"
        , annotation = Just (Type.namedWith [ "Css" ] "Infinite" [])
        }


{-| The `url` [`background-image`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) value.

url: String -> Css.BackgroundImage {}
-}
url : String -> Elm.Expression
url urlArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "url"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.record [] ]
                        )
                    )
            }
        )
        [ Elm.string urlArg ]


{-| The `vertical` value for the [`resize`](https://developer.mozilla.org/en/docs/Web/CSS/resize#Values) property.

vertical: Css.Resize {}
-}
vertical : Elm.Expression
vertical =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "vertical"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
        }


{-| Sets the display style to [`table-row-group`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableRowGroup: Css.Display {}
-}
tableRowGroup : Elm.Expression
tableRowGroup =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableRowGroup"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-row`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableRow: Css.Display {}
-}
tableRow : Elm.Expression
tableRow =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableRow"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets [`table-layout`](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) property.

tableLayout (auto | fixed | inherit | initial | unset)

tableLayout: Css.TableLayout compatible -> Css.Style
-}
tableLayout : Elm.Expression -> Elm.Expression
tableLayout tableLayoutArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "tableLayout"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TableLayout"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ tableLayoutArg ]


{-| Sets the display style to [`table-header-group`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableHeaderGroup: Css.Display {}
-}
tableHeaderGroup : Elm.Expression
tableHeaderGroup =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableHeaderGroup"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-footer-group`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableFooterGroup: Css.Display {}
-}
tableFooterGroup : Elm.Expression
tableFooterGroup =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableFooterGroup"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-column-group`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableColumnGroup: Css.Display {}
-}
tableColumnGroup : Elm.Expression
tableColumnGroup =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableColumnGroup"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-cell`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableCell: Css.Display {}
-}
tableCell : Elm.Expression
tableCell =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableCell"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-column`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableColumn: Css.Display {}
-}
tableColumn : Elm.Expression
tableColumn =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableColumn"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table-caption`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

tableCaption: Css.Display {}
-}
tableCaption : Elm.Expression
tableCaption =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "tableCaption"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`table`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

table: Css.Display {}
-}
table : Elm.Expression
table =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "table"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| The `space` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

space: Css.BackgroundRepeat {}
-}
space : Elm.Expression
space =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "space"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "BackgroundRepeat" [ Type.record [] ])
        }


{-| The `soft-light` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#soft-light).

softLight: Css.BackgroundBlendMode compatible
-}
softLight : Elm.Expression
softLight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "softLight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| A `separate` [border-collapse](https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse#Values).

separate: Css.BorderCollapse {}
-}
separate : Elm.Expression
separate =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "separate"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BorderCollapse" [ Type.record [] ])
        }


{-| The `screen` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#screen).

screenBlendMode: Css.BackgroundBlendMode compatible
-}
screenBlendMode : Elm.Expression
screenBlendMode =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "screenBlendMode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `saturation` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#saturation).

saturation: Css.BackgroundBlendMode compatible
-}
saturation : Elm.Expression
saturation =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "saturation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `round` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

round: Css.BackgroundRepeat {}
-}
round : Elm.Expression
round =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "round"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "BackgroundRepeat" [ Type.record [] ])
        }


{-| The `repeat-y` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

repeatY: Css.BackgroundRepeatShorthand {}
-}
repeatY : Elm.Expression
repeatY =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "repeatY"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundRepeatShorthand"
                    [ Type.record [] ]
                )
        }


{-| The `repeat-x` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

repeatX: Css.BackgroundRepeatShorthand {}
-}
repeatX : Elm.Expression
repeatX =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "repeatX"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundRepeatShorthand"
                    [ Type.record [] ]
                )
        }


{-| The `repeat` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

repeat: Css.BackgroundRepeat {}
-}
repeat : Elm.Expression
repeat =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "repeat"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "BackgroundRepeat" [ Type.record [] ])
        }


{-| `property-events: fill`. This works around the fact that
[`fill` is already taken](#fill).

pointerEventsFill: Css.Style
-}
pointerEventsFill : Elm.Expression
pointerEventsFill =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "pointerEventsFill"
        , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
        }


{-| `property-events: all`. This works around the fact that
[`all` is already taken](#all).

pointerEventsAll: Css.Style
-}
pointerEventsAll : Elm.Expression
pointerEventsAll =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "pointerEventsAll"
        , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
        }


{-| Sets ['background-attachment'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment)

    backgroundAttachment fixed

backgroundAttachment: Css.BackgroundAttachment compatible -> Css.Style
-}
backgroundAttachment : Elm.Expression -> Elm.Expression
backgroundAttachment backgroundAttachmentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundAttachment"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundAttachment"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundAttachmentArg ]


{-| Sets ['background-blend-mode'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode)

    backgroundBlendMode darken

backgroundBlendMode: (Css.ColorValue Css.NonMixable -> Css.Style) -> Css.Style
-}
backgroundBlendMode : (Elm.Expression -> Elm.Expression) -> Elm.Expression
backgroundBlendMode backgroundBlendModeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundBlendMode"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ColorValue"
                                [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "backgroundBlendModeUnpack" backgroundBlendModeArg
        ]


{-| Sets ['background-clip'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip)

    backgroundClip borderBox

backgroundClip: Css.BackgroundClip compatible -> Css.Style
-}
backgroundClip : Elm.Expression -> Elm.Expression
backgroundClip backgroundClipArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundClip"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundClip"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundClipArg ]


{-| Sets ['background-image'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)

    backgroundImage (url "http://www.example.com/chicken.jpg")

backgroundImage: Css.BackgroundImage compatible -> Css.Style
-}
backgroundImage : Elm.Expression -> Elm.Expression
backgroundImage backgroundImageArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundImage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundImageArg ]


{-| Sets ['background-origin'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin)

    backgroundOrigin borderBox

backgroundOrigin: Css.BackgroundOrigin compatible -> Css.Style
-}
backgroundOrigin : Elm.Expression -> Elm.Expression
backgroundOrigin backgroundOriginArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundOrigin"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundOrigin"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundOriginArg ]


{-| Sets ['background-position'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)

    backgroundPosition top

Only supports keywords values like "top" or "center". If you want to pass a single length, use `backgroundPosition2`:

    backgroundPosition2 (px 10) zero

backgroundPosition: (Css.ExplicitLength Css.IncompatibleUnits -> Css.Style) -> Css.Style
-}
backgroundPosition : (Elm.Expression -> Elm.Expression) -> Elm.Expression
backgroundPosition backgroundPositionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundPosition"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ Elm.functionReduced "backgroundPositionUnpack" backgroundPositionArg ]


{-| Sets ['background-position'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)

    backgroundPosition2 (px 10) zero

backgroundPosition2: Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Style
-}
backgroundPosition2 : Elm.Expression -> Elm.Expression -> Elm.Expression
backgroundPosition2 backgroundPosition2Arg backgroundPosition2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundPosition2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundPosition2Arg, backgroundPosition2Arg0 ]


{-| Sets ['background-repeat'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)

    backgroundRepeat repeatX

backgroundRepeat: Css.BackgroundRepeatShorthand compatible -> Css.Style
-}
backgroundRepeat : Elm.Expression -> Elm.Expression
backgroundRepeat backgroundRepeatArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundRepeat"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeatShorthand"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundRepeatArg ]


{-| Sets ['background-repeat'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)

    backgroundRepeat2 repeat noRepeat

backgroundRepeat2: 
    Css.BackgroundRepeat compatibleA
    -> Css.BackgroundRepeat compatibleB
    -> Css.Style
-}
backgroundRepeat2 : Elm.Expression -> Elm.Expression -> Elm.Expression
backgroundRepeat2 backgroundRepeat2Arg backgroundRepeat2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundRepeat2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeat"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeat"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundRepeat2Arg, backgroundRepeat2Arg0 ]


{-| Sets ['background-size'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)

    backgroundSize cover

backgroundSize: Css.LengthOrAutoOrCoverOrContain compatible -> Css.Style
-}
backgroundSize : Elm.Expression -> Elm.Expression
backgroundSize backgroundSizeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundSize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAutoOrCoverOrContain"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundSizeArg ]


{-| Sets ['background-size'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)

    backgroundSize2 50 % auto

backgroundSize2: Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Style
-}
backgroundSize2 : Elm.Expression -> Elm.Expression -> Elm.Expression
backgroundSize2 backgroundSize2Arg backgroundSize2Arg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundSize2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ backgroundSize2Arg, backgroundSize2Arg0 ]


{-| The `both` value for the [`resize`](https://developer.mozilla.org/en/docs/Web/CSS/resize#Values) property.

both: Css.Resize {}
-}
both : Elm.Expression
both =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "both"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
        }


{-| The `break-word` value for the [`overflow-wrap`](https://developer.mozilla.org/en/docs/Web/CSS/overflow-wrap#Values) property.

breakWord: Css.Wrap {}
-}
breakWord : Elm.Expression
breakWord =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "breakWord"
        , annotation = Just (Type.namedWith [ "Css" ] "Wrap" [ Type.record [] ])
        }


{-| A `collapse` [border-collapse](https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse#Values).
This can also represent a `collapse` [`visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility#Values).

collapse: Css.BorderCollapse (Css.Visibility {})
-}
collapse : Elm.Expression
collapse =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "collapse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BorderCollapse"
                    [ Type.namedWith [ "Css" ] "Visibility" [ Type.record [] ] ]
                )
        }


{-| The `color-burn` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#color-burn).

colorBurn: Css.BackgroundBlendMode compatible
-}
colorBurn : Elm.Expression
colorBurn =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "colorBurn"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `color-dodge` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#color-dodge).

colorDodge: Css.BackgroundBlendMode compatible
-}
colorDodge : Elm.Expression
colorDodge =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "colorDodge"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `contain` [`background-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) value.

contain: { value : String, lengthOrAutoOrCoverOrContain : Css.Compatible }
-}
contain : Elm.Expression
contain =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "contain"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "lengthOrAutoOrCoverOrContain"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| The `cover` [`background-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) value.

cover: { value : String, lengthOrAutoOrCoverOrContain : Css.Compatible }
-}
cover : Elm.Expression
cover =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "cover"
        , annotation =
            Just
                (Type.record
                    [ ( "value", Type.string )
                    , ( "lengthOrAutoOrCoverOrContain"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
        }


{-| The `darken` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#darken).

darken: Css.BackgroundBlendMode compatible
-}
darken : Elm.Expression
darken =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "darken"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `difference` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#difference).

difference: Css.BackgroundBlendMode compatible
-}
difference : Elm.Expression
difference =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "difference"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| `display: flex`. This works around the fact that
[`flex` is already taken](#flex).

displayFlex: Css.Style
-}
displayFlex : Elm.Expression
displayFlex =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "displayFlex"
        , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
        }


{-| The `exclusion` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#exclusion).

exclusion: Css.BackgroundBlendMode compatible
-}
exclusion : Elm.Expression
exclusion =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "exclusion"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `hard-light` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#hard-light).

hardLight: Css.BackgroundBlendMode compatible
-}
hardLight : Elm.Expression
hardLight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "hardLight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `horizontal` value for the [`resize`](https://developer.mozilla.org/en/docs/Web/CSS/resize#Values) property.

horizontal: Css.Resize {}
-}
horizontal : Elm.Expression
horizontal =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "horizontal"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
        }


{-| The `hue` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#hue).

hue: Css.BackgroundBlendMode compatible
-}
hue : Elm.Expression
hue =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "hue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| inlineListItem: Css.Display {} -}
inlineListItem : Elm.Expression
inlineListItem =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inlineListItem"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| Sets the display style to [`inline-table`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values)

inlineTable: Css.Display {}
-}
inlineTable : Elm.Expression
inlineTable =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "inlineTable"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| The `lighten` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#lighten).

lighten: Css.BackgroundBlendMode compatible
-}
lighten : Elm.Expression
lighten =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "lighten"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| listItem: Css.Display {} -}
listItem : Elm.Expression
listItem =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "listItem"
        , annotation =
            Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
        }


{-| The `local` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.

local: Css.BackgroundAttachment {}
-}
local : Elm.Expression
local =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "local"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundAttachment"
                    [ Type.record [] ]
                )
        }


{-| The `luminosity` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#luminosity).

luminosity: Css.BackgroundBlendMode compatible
-}
luminosity : Elm.Expression
luminosity =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "luminosity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `manipulation` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

manipulation: Css.TouchAction {}
-}
manipulation : Elm.Expression
manipulation =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "manipulation"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `multiply` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#multiply).

multiply: Css.BackgroundBlendMode compatible
-}
multiply : Elm.Expression
multiply =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "multiply"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `no-repeat` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.

noRepeat: Css.BackgroundRepeat {}
-}
noRepeat : Elm.Expression
noRepeat =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "noRepeat"
        , annotation =
            Just
                (Type.namedWith [ "Css" ] "BackgroundRepeat" [ Type.record [] ])
        }


{-| The `overlay` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#overlay).

overlay: Css.BackgroundBlendMode compatible
-}
overlay : Elm.Expression
overlay =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "overlay"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundBlendMode"
                    [ Type.var "compatible" ]
                )
        }


{-| The `padding-box` [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) value.

paddingBox: Css.BackgroundClip {}
-}
paddingBox : Elm.Expression
paddingBox =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "paddingBox"
        , annotation =
            Just (Type.namedWith [ "Css" ] "BackgroundClip" [ Type.record [] ])
        }


{-| The `pan-down` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panDown: Css.TouchAction {}
-}
panDown : Elm.Expression
panDown =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panDown"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pan-left` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panLeft: Css.TouchAction {}
-}
panLeft : Elm.Expression
panLeft =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panLeft"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pan-right` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panRight: Css.TouchAction {}
-}
panRight : Elm.Expression
panRight =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panRight"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pan-up` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panUp: Css.TouchAction {}
-}
panUp : Elm.Expression
panUp =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panUp"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pan-x` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panX: Css.TouchAction {}
-}
panX : Elm.Expression
panX =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panX"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pan-y` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

panY: Css.TouchAction {}
-}
panY : Elm.Expression
panY =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "panY"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| The `pinch-zoom` value for the [`touch-action`](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) property.

pinchZoom: Css.TouchAction {}
-}
pinchZoom : Elm.Expression
pinchZoom =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "pinchZoom"
        , annotation =
            Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
        }


{-| See [`keyframes`](Css-Animations#keyframes) in the [`Css.Animations`](Css-Animations) module.

animationName: Css.Animations.Keyframes compatible -> Css.Style
-}
animationName : Elm.Expression -> Elm.Expression
animationName animationNameArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "animationName"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css", "Animations" ]
                            "Keyframes"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ animationNameArg ]


{-| An [`animation-delay`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay) property.

animationDelay: Css.Duration compatible -> Css.Style
-}
animationDelay : Elm.Expression -> Elm.Expression
animationDelay animationDelayArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "animationDelay"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Duration"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ animationDelayArg ]


{-| An [`animation-duration`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration)
) property.

animationDuration: Css.Duration compatible -> Css.Style
-}
animationDuration : Elm.Expression -> Elm.Expression
animationDuration animationDurationArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "animationDuration"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Duration"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ animationDurationArg ]


{-| An [`animation-iteration-count`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count)
) property.

animationIterationCount: Css.NumberOrInfinite compatible -> Css.Style
-}
animationIterationCount : Elm.Expression -> Elm.Expression
animationIterationCount animationIterationCountArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "Css" ]
            , name = "animationIterationCount"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "NumberOrInfinite"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
        )
        [ animationIterationCountArg ]


{-| The
[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)
of `thin`, `medium`, and `thick` have unspecified behavior according to the
CSS specification, and as such are intentionally unsupported.

Using them is a bad idea, but if the fate of the world depends on it, you can
fall back on something like this:

    css [ property "border-left" "thin" ]

thin: Css.IntentionallyUnsupportedPleaseSeeDocs
-}
thin : Elm.Expression
thin =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "thin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "IntentionallyUnsupportedPleaseSeeDocs"
                    []
                )
        }


{-| The
[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)
of `thin`, `medium`, and `thick` have unspecified behavior according to the
CSS specification, and as such are intentionally unsupported.

Using them is a bad idea, but if the fate of the world depends on it, you can
fall back on something like this:

    css [ property "border-left" "thick" ]

thick: Css.IntentionallyUnsupportedPleaseSeeDocs
-}
thick : Elm.Expression
thick =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "thick"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "IntentionallyUnsupportedPleaseSeeDocs"
                    []
                )
        }


{-| [`blink`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)
is ~~totally rad~~ deprecated, and as such has been ~~reluctantly~~ omitted
from elm-css.

blink: Css.IntentionallyUnsupportedPleaseSeeDocs
-}
blink : Elm.Expression
blink =
    Elm.value
        { importFrom = [ "Css" ]
        , name = "blink"
        , annotation =
            Just
                (Type.namedWith
                    [ "Css" ]
                    "IntentionallyUnsupportedPleaseSeeDocs"
                    []
                )
        }


annotation_ :
    { style : Type.Annotation
    , color : Type.Annotation
    , length : Type.Annotation -> Type.Annotation -> Type.Annotation
    , px : Type.Annotation
    , em : Type.Annotation
    , rem : Type.Annotation
    , pct : Type.Annotation
    , ex : Type.Annotation
    , ch : Type.Annotation
    , vh : Type.Annotation
    , vw : Type.Annotation
    , vmin : Type.Annotation
    , vmax : Type.Annotation
    , mm : Type.Annotation
    , cm : Type.Annotation
    , in_ : Type.Annotation
    , pt : Type.Annotation
    , pc : Type.Annotation
    , duration : Type.Annotation -> Type.Annotation
    , alignItems : Type.Annotation -> Type.Annotation -> Type.Annotation
    , all : Type.Annotation -> Type.Annotation
    , angle : Type.Annotation -> Type.Annotation
    , angleOrDirection : Type.Annotation -> Type.Annotation
    , backgroundAttachment : Type.Annotation -> Type.Annotation
    , backgroundBlendMode : Type.Annotation -> Type.Annotation
    , backgroundClip : Type.Annotation -> Type.Annotation
    , backgroundImage : Type.Annotation -> Type.Annotation
    , backgroundOrigin : Type.Annotation -> Type.Annotation
    , backgroundRepeat : Type.Annotation -> Type.Annotation
    , backgroundRepeatShorthand : Type.Annotation -> Type.Annotation
    , basicProperty : Type.Annotation
    , borderCollapse : Type.Annotation -> Type.Annotation
    , borderStyle : Type.Annotation -> Type.Annotation
    , boxSizing : Type.Annotation -> Type.Annotation
    , calc : Type.Annotation -> Type.Annotation
    , calculatedLength : Type.Annotation
    , calcExpression : Type.Annotation
    , cursor : Type.Annotation -> Type.Annotation
    , display : Type.Annotation -> Type.Annotation
    , explicitLength : Type.Annotation -> Type.Annotation
    , featureTagValue : Type.Annotation -> Type.Annotation
    , flexBasis : Type.Annotation -> Type.Annotation
    , flexDirection : Type.Annotation -> Type.Annotation
    , flexDirectionOrWrap : Type.Annotation -> Type.Annotation
    , flexWrap : Type.Annotation -> Type.Annotation
    , fontFamily : Type.Annotation -> Type.Annotation
    , fontStyle : Type.Annotation -> Type.Annotation
    , fontStyleOrFeatureTagValue : Type.Annotation -> Type.Annotation
    , fontVariant : Type.Annotation -> Type.Annotation
    , fontVariantCaps : Type.Annotation -> Type.Annotation
    , fontVariantLigatures : Type.Annotation -> Type.Annotation
    , fontVariantNumeric : Type.Annotation -> Type.Annotation
    , fontWeight : Type.Annotation -> Type.Annotation
    , importType : Type.Annotation -> Type.Annotation
    , incompatibleUnits : Type.Annotation
    , justifyContent : Type.Annotation -> Type.Annotation -> Type.Annotation
    , lengthOrAuto : Type.Annotation -> Type.Annotation
    , lengthOrAutoOrCoverOrContain : Type.Annotation -> Type.Annotation
    , lengthOrMinMaxDimension : Type.Annotation -> Type.Annotation
    , lengthOrNone : Type.Annotation -> Type.Annotation
    , lengthOrNoneOrMinMaxDimension : Type.Annotation -> Type.Annotation
    , lengthOrNumber : Type.Annotation -> Type.Annotation
    , lengthOrNumberOrAutoOrNoneOrContent : Type.Annotation -> Type.Annotation
    , listStyle : Type.Annotation -> Type.Annotation
    , listStylePosition : Type.Annotation -> Type.Annotation
    , listStyleType : Type.Annotation -> Type.Annotation
    , minMaxDimension : Type.Annotation -> Type.Annotation
    , nonMixable : Type.Annotation
    , none : Type.Annotation -> Type.Annotation
    , number : Type.Annotation -> Type.Annotation
    , infinite : Type.Annotation
    , numberOrInfinite : Type.Annotation -> Type.Annotation
    , outline : Type.Annotation -> Type.Annotation
    , overflow : Type.Annotation -> Type.Annotation
    , visibility : Type.Annotation -> Type.Annotation
    , position : Type.Annotation -> Type.Annotation
    , resize : Type.Annotation -> Type.Annotation
    , tableLayout : Type.Annotation -> Type.Annotation
    , textDecorationLine : Type.Annotation -> Type.Annotation
    , textDecorationStyle : Type.Annotation -> Type.Annotation
    , textIndent : Type.Annotation -> Type.Annotation
    , textOrientation : Type.Annotation -> Type.Annotation
    , textOverflow : Type.Annotation -> Type.Annotation
    , textRendering : Type.Annotation -> Type.Annotation
    , textTransform : Type.Annotation -> Type.Annotation
    , touchAction : Type.Annotation -> Type.Annotation
    , transform : Type.Annotation -> Type.Annotation
    , transformBox : Type.Annotation -> Type.Annotation
    , transformStyle : Type.Annotation -> Type.Annotation
    , value : Type.Annotation -> Type.Annotation
    , verticalAlign : Type.Annotation -> Type.Annotation -> Type.Annotation
    , whiteSpace : Type.Annotation -> Type.Annotation
    , wrap : Type.Annotation -> Type.Annotation
    , compatible : Type.Annotation
    , fontSize : Type.Annotation -> Type.Annotation
    , colorValue : Type.Annotation -> Type.Annotation
    , colorStop :
        Type.Annotation -> Type.Annotation -> Type.Annotation -> Type.Annotation
    , intOrAuto : Type.Annotation -> Type.Annotation
    }
annotation_ =
    { style =
        Type.alias
            moduleName_
            "Style"
            []
            (Type.namedWith [ "Css", "Preprocess" ] "Style" [])
    , color =
        Type.alias
            moduleName_
            "Color"
            []
            (Type.namedWith
                [ "Css" ]
                "ColorValue"
                [ Type.record
                    [ ( "red", Type.int )
                    , ( "green", Type.int )
                    , ( "blue", Type.int )
                    , ( "alpha", Type.float )
                    ]
                ]
            )
    , length =
        \lengthArg0 lengthArg1 ->
            Type.alias
                moduleName_
                "Length"
                [ lengthArg0, lengthArg1 ]
                (Type.namedWith
                    [ "Css", "Internal" ]
                    "Length"
                    [ Type.var "compatible", Type.var "units" ]
                )
    , px =
        Type.alias
            moduleName_
            "Px"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "PxUnits" [] ]
            )
    , em =
        Type.alias
            moduleName_
            "Em"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "EmUnits" [] ]
            )
    , rem =
        Type.alias
            moduleName_
            "Rem"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "RemUnits" [] ]
            )
    , pct =
        Type.alias
            moduleName_
            "Pct"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "PercentageUnits" [] ]
            )
    , ex =
        Type.alias
            moduleName_
            "Ex"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "ExUnits" [] ]
            )
    , ch =
        Type.alias
            moduleName_
            "Ch"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "ChUnits" [] ]
            )
    , vh =
        Type.alias
            moduleName_
            "Vh"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "VhUnits" [] ]
            )
    , vw =
        Type.alias
            moduleName_
            "Vw"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "VwUnits" [] ]
            )
    , vmin =
        Type.alias
            moduleName_
            "Vmin"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "VMinUnits" [] ]
            )
    , vmax =
        Type.alias
            moduleName_
            "Vmax"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "VMaxUnits" [] ]
            )
    , mm =
        Type.alias
            moduleName_
            "Mm"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "MMUnits" [] ]
            )
    , cm =
        Type.alias
            moduleName_
            "Cm"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "CMUnits" [] ]
            )
    , in_ =
        Type.alias
            moduleName_
            "In"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "InchUnits" [] ]
            )
    , pt =
        Type.alias
            moduleName_
            "Pt"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "PtUnits" [] ]
            )
    , pc =
        Type.alias
            moduleName_
            "Pc"
            []
            (Type.namedWith
                [ "Css" ]
                "ExplicitLength"
                [ Type.namedWith [ "Css" ] "PcUnits" [] ]
            )
    , duration =
        \durationArg0 ->
            Type.alias
                moduleName_
                "Duration"
                [ durationArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "duration", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , alignItems =
        \alignItemsArg0 alignItemsArg1 ->
            Type.alias
                moduleName_
                "AlignItems"
                [ alignItemsArg0, alignItemsArg1 ]
                (Type.function
                    [ Type.namedWith
                        [ "Css" ]
                        "Length"
                        [ Type.var "a", Type.var "b" ]
                    ]
                    (Type.namedWith [ "Css" ] "Style" [])
                )
    , all =
        \allArg0 ->
            Type.alias
                moduleName_
                "All"
                [ allArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "all", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , angle =
        \angleArg0 ->
            Type.alias
                moduleName_
                "Angle"
                [ angleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "angle", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , angleOrDirection =
        \angleOrDirectionArg0 ->
            Type.alias
                moduleName_
                "AngleOrDirection"
                [ angleOrDirectionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "angleOrDirection"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , backgroundAttachment =
        \backgroundAttachmentArg0 ->
            Type.alias
                moduleName_
                "BackgroundAttachment"
                [ backgroundAttachmentArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "backgroundAttachment"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , backgroundBlendMode =
        \backgroundBlendModeArg0 ->
            Type.alias
                moduleName_
                "BackgroundBlendMode"
                [ backgroundBlendModeArg0 ]
                (Type.function
                    [ Type.namedWith [ "Css" ] "ColorValue" [ Type.var "a" ] ]
                    (Type.namedWith [ "Css" ] "Style" [])
                )
    , backgroundClip =
        \backgroundClipArg0 ->
            Type.alias
                moduleName_
                "BackgroundClip"
                [ backgroundClipArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "backgroundClip"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , backgroundImage =
        \backgroundImageArg0 ->
            Type.alias
                moduleName_
                "BackgroundImage"
                [ backgroundImageArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "backgroundImage"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , backgroundOrigin =
        \backgroundOriginArg0 ->
            Type.alias
                moduleName_
                "BackgroundOrigin"
                [ backgroundOriginArg0 ]
                (Type.namedWith
                    [ "Css" ]
                    "BackgroundClip"
                    [ Type.var "compatible" ]
                )
    , backgroundRepeat =
        \backgroundRepeatArg0 ->
            Type.alias
                moduleName_
                "BackgroundRepeat"
                [ backgroundRepeatArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "backgroundRepeat"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "backgroundRepeatShorthand"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , backgroundRepeatShorthand =
        \backgroundRepeatShorthandArg0 ->
            Type.alias
                moduleName_
                "BackgroundRepeatShorthand"
                [ backgroundRepeatShorthandArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "backgroundRepeatShorthand"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , basicProperty =
        Type.alias
            moduleName_
            "BasicProperty"
            []
            (Type.record
                [ ( "value", Type.string )
                , ( "all", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "alignItems", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "borderStyle", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "boxSizing", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "color", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "display", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "flexBasis", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "flexWrap", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "flexDirection", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "flexDirectionOrWrap"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "justifyContent", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "none", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "number", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "keyframes", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "outline", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "overflow", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "pointerEvents", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "visibility", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "textDecorationLine"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "textRendering", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "textIndent", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "textDecorationStyle"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "textTransform", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrAuto", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrNone", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrNumber", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrMinMaxDimension"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "lengthOrNoneOrMinMaxDimension"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "lengthOrNumberOrAutoOrNoneOrContent"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "listStyleType", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "listStylePosition"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "listStyleTypeOrPositionOrImage"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "fontFamily", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "fontSize", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "fontStyle", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "fontWeight", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "fontVariant", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "units", Type.namedWith [ "Css" ] "IncompatibleUnits" [] )
                , ( "numericValue", Type.float )
                , ( "unitLabel", Type.string )
                , ( "backgroundRepeat"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "backgroundRepeatShorthand"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "backgroundAttachment"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "backgroundBlendMode"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "backgroundOrigin"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "backgroundImage"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "lengthOrAutoOrCoverOrContain"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "intOrAuto", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "touchAction", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "whiteSpace", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "tableLayout", Type.namedWith [ "Css" ] "Compatible" [] )
                ]
            )
    , borderCollapse =
        \borderCollapseArg0 ->
            Type.alias
                moduleName_
                "BorderCollapse"
                [ borderCollapseArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "borderCollapse"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , borderStyle =
        \borderStyleArg0 ->
            Type.alias
                moduleName_
                "BorderStyle"
                [ borderStyleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "borderStyle"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , boxSizing =
        \boxSizingArg0 ->
            Type.alias
                moduleName_
                "BoxSizing"
                [ boxSizingArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "boxSizing", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , calc =
        \calcArg0 ->
            Type.alias
                moduleName_
                "Calc"
                [ calcArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "calc", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , calculatedLength =
        Type.alias
            moduleName_
            "CalculatedLength"
            []
            (Type.record
                [ ( "value", Type.string )
                , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrAuto", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrNumber", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrNone", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrMinMaxDimension"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "lengthOrNoneOrMinMaxDimension"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "textIndent", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "flexBasis", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrNumberOrAutoOrNoneOrContent"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "fontSize", Type.namedWith [ "Css" ] "Compatible" [] )
                , ( "lengthOrAutoOrCoverOrContain"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                , ( "calc", Type.namedWith [ "Css" ] "Compatible" [] )
                ]
            )
    , calcExpression = Type.namedWith [ "Css" ] "CalcExpression" []
    , cursor =
        \cursorArg0 ->
            Type.alias
                moduleName_
                "Cursor"
                [ cursorArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , display =
        \displayArg0 ->
            Type.alias
                moduleName_
                "Display"
                [ displayArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "display", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , explicitLength =
        \explicitLengthArg0 ->
            Type.alias
                moduleName_
                "ExplicitLength"
                [ explicitLengthArg0 ]
                (Type.namedWith
                    [ "Css", "Internal" ]
                    "ExplicitLength"
                    [ Type.var "units" ]
                )
    , featureTagValue =
        \featureTagValueArg0 ->
            Type.alias
                moduleName_
                "FeatureTagValue"
                [ featureTagValueArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "featureTagValue"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , flexBasis =
        \flexBasisArg0 ->
            Type.alias
                moduleName_
                "FlexBasis"
                [ flexBasisArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "flexBasis", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , flexDirection =
        \flexDirectionArg0 ->
            Type.alias
                moduleName_
                "FlexDirection"
                [ flexDirectionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "flexDirection"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , flexDirectionOrWrap =
        \flexDirectionOrWrapArg0 ->
            Type.alias
                moduleName_
                "FlexDirectionOrWrap"
                [ flexDirectionOrWrapArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "flexDirectionOrWrap"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , flexWrap =
        \flexWrapArg0 ->
            Type.alias
                moduleName_
                "FlexWrap"
                [ flexWrapArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "flexWrap", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , fontFamily =
        \fontFamilyArg0 ->
            Type.alias
                moduleName_
                "FontFamily"
                [ fontFamilyArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontFamily", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , fontStyle =
        \fontStyleArg0 ->
            Type.alias
                moduleName_
                "FontStyle"
                [ fontStyleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontStyle", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , fontStyleOrFeatureTagValue =
        \fontStyleOrFeatureTagValueArg0 ->
            Type.alias
                moduleName_
                "FontStyleOrFeatureTagValue"
                [ fontStyleOrFeatureTagValueArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontStyle", Type.namedWith [ "Css" ] "Compatible" [] )
                    , ( "featureTagValue"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , fontVariant =
        \fontVariantArg0 ->
            Type.alias
                moduleName_
                "FontVariant"
                [ fontVariantArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontVariant"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , fontVariantCaps =
        \fontVariantCapsArg0 ->
            Type.alias
                moduleName_
                "FontVariantCaps"
                [ fontVariantCapsArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontVariant"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "fontVariantCaps"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , fontVariantLigatures =
        \fontVariantLigaturesArg0 ->
            Type.alias
                moduleName_
                "FontVariantLigatures"
                [ fontVariantLigaturesArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontVariant"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "fontVariantLigatures"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , fontVariantNumeric =
        \fontVariantNumericArg0 ->
            Type.alias
                moduleName_
                "FontVariantNumeric"
                [ fontVariantNumericArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontVariant"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "fontVariantNumeric"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , fontWeight =
        \fontWeightArg0 ->
            Type.alias
                moduleName_
                "FontWeight"
                [ fontWeightArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontWeight", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , importType =
        \importTypeArg0 ->
            Type.alias
                moduleName_
                "ImportType"
                [ importTypeArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "import_", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , incompatibleUnits =
        Type.alias
            moduleName_
            "IncompatibleUnits"
            []
            (Type.namedWith [ "Css", "Internal" ] "IncompatibleUnits" [])
    , justifyContent =
        \justifyContentArg0 justifyContentArg1 ->
            Type.alias
                moduleName_
                "JustifyContent"
                [ justifyContentArg0, justifyContentArg1 ]
                (Type.function
                    [ Type.namedWith
                        [ "Css" ]
                        "Length"
                        [ Type.var "a", Type.var "b" ]
                    ]
                    (Type.namedWith [ "Css" ] "Style" [])
                )
    , lengthOrAuto =
        \lengthOrAutoArg0 ->
            Type.alias
                moduleName_
                "LengthOrAuto"
                [ lengthOrAutoArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrAuto"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , lengthOrAutoOrCoverOrContain =
        \lengthOrAutoOrCoverOrContainArg0 ->
            Type.alias
                moduleName_
                "LengthOrAutoOrCoverOrContain"
                [ lengthOrAutoOrCoverOrContainArg0 ]
                (Type.namedWith
                    [ "Css", "Internal" ]
                    "LengthOrAutoOrCoverOrContain"
                    [ Type.var "compatible" ]
                )
    , lengthOrMinMaxDimension =
        \lengthOrMinMaxDimensionArg0 ->
            Type.alias
                moduleName_
                "LengthOrMinMaxDimension"
                [ lengthOrMinMaxDimensionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , lengthOrNone =
        \lengthOrNoneArg0 ->
            Type.alias
                moduleName_
                "LengthOrNone"
                [ lengthOrNoneArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrNone"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , lengthOrNoneOrMinMaxDimension =
        \lengthOrNoneOrMinMaxDimensionArg0 ->
            Type.alias
                moduleName_
                "LengthOrNoneOrMinMaxDimension"
                [ lengthOrNoneOrMinMaxDimensionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrNoneOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , lengthOrNumber =
        \lengthOrNumberArg0 ->
            Type.alias
                moduleName_
                "LengthOrNumber"
                [ lengthOrNumberArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrNumber"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , lengthOrNumberOrAutoOrNoneOrContent =
        \lengthOrNumberOrAutoOrNoneOrContentArg0 ->
            Type.alias
                moduleName_
                "LengthOrNumberOrAutoOrNoneOrContent"
                [ lengthOrNumberOrAutoOrNoneOrContentArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "lengthOrNumberOrAutoOrNoneOrContent"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , listStyle =
        \listStyleArg0 ->
            Type.alias
                moduleName_
                "ListStyle"
                [ listStyleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "listStyleTypeOrPositionOrImage"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , listStylePosition =
        \listStylePositionArg0 ->
            Type.alias
                moduleName_
                "ListStylePosition"
                [ listStylePositionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "listStylePosition"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , listStyleType =
        \listStyleTypeArg0 ->
            Type.alias
                moduleName_
                "ListStyleType"
                [ listStyleTypeArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "listStyleType"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , minMaxDimension =
        \minMaxDimensionArg0 ->
            Type.alias
                moduleName_
                "MinMaxDimension"
                [ minMaxDimensionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "minMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    , ( "lengthOrNoneOrMinMaxDimension"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , nonMixable = Type.alias moduleName_ "NonMixable" [] (Type.record [])
    , none =
        \noneArg0 ->
            Type.alias
                moduleName_
                "None"
                [ noneArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "none", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , number =
        \numberArg0 ->
            Type.alias
                moduleName_
                "Number"
                [ numberArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "number", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , infinite =
        Type.alias
            moduleName_
            "Infinite"
            []
            (Type.record
                [ ( "value", Type.string )
                , ( "numberOrInfinite"
                  , Type.namedWith [ "Css" ] "Compatible" []
                  )
                ]
            )
    , numberOrInfinite =
        \numberOrInfiniteArg0 ->
            Type.alias
                moduleName_
                "NumberOrInfinite"
                [ numberOrInfiniteArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "numberOrInfinite"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , outline =
        \outlineArg0 ->
            Type.alias
                moduleName_
                "Outline"
                [ outlineArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "outline", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , overflow =
        \overflowArg0 ->
            Type.alias
                moduleName_
                "Overflow"
                [ overflowArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "overflow", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , visibility =
        \visibilityArg0 ->
            Type.alias
                moduleName_
                "Visibility"
                [ visibilityArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "visibility", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , position =
        \positionArg0 ->
            Type.alias
                moduleName_
                "Position"
                [ positionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "position", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , resize =
        \resizeArg0 ->
            Type.alias
                moduleName_
                "Resize"
                [ resizeArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "resize", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , tableLayout =
        \tableLayoutArg0 ->
            Type.alias
                moduleName_
                "TableLayout"
                [ tableLayoutArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "tableLayout"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textDecorationLine =
        \textDecorationLineArg0 ->
            Type.alias
                moduleName_
                "TextDecorationLine"
                [ textDecorationLineArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textDecorationLine"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textDecorationStyle =
        \textDecorationStyleArg0 ->
            Type.alias
                moduleName_
                "TextDecorationStyle"
                [ textDecorationStyleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textDecorationStyle"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textIndent =
        \textIndentArg0 ->
            Type.alias
                moduleName_
                "TextIndent"
                [ textIndentArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textIndent", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , textOrientation =
        \textOrientationArg0 ->
            Type.alias
                moduleName_
                "TextOrientation"
                [ textOrientationArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textOrientation"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textOverflow =
        \textOverflowArg0 ->
            Type.alias
                moduleName_
                "TextOverflow"
                [ textOverflowArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textOverflow"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textRendering =
        \textRenderingArg0 ->
            Type.alias
                moduleName_
                "TextRendering"
                [ textRenderingArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textRendering"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , textTransform =
        \textTransformArg0 ->
            Type.alias
                moduleName_
                "TextTransform"
                [ textTransformArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "textTransform"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , touchAction =
        \touchActionArg0 ->
            Type.alias
                moduleName_
                "TouchAction"
                [ touchActionArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "touchAction"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , transform =
        \transformArg0 ->
            Type.alias
                moduleName_
                "Transform"
                [ transformArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "transform", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , transformBox =
        \transformBoxArg0 ->
            Type.alias
                moduleName_
                "TransformBox"
                [ transformBoxArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "transformBox"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , transformStyle =
        \transformStyleArg0 ->
            Type.alias
                moduleName_
                "TransformStyle"
                [ transformStyleArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "transformStyle"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , value =
        \valueArg0 ->
            Type.alias
                moduleName_
                "Value"
                [ valueArg0 ]
                (Type.extensible "compatible" [ ( "value", Type.string ) ])
    , verticalAlign =
        \verticalAlignArg0 verticalAlignArg1 ->
            Type.alias
                moduleName_
                "VerticalAlign"
                [ verticalAlignArg0, verticalAlignArg1 ]
                (Type.function
                    [ Type.namedWith
                        [ "Css" ]
                        "Length"
                        [ Type.var "a", Type.var "b" ]
                    ]
                    (Type.namedWith [ "Css" ] "Style" [])
                )
    , whiteSpace =
        \whiteSpaceArg0 ->
            Type.alias
                moduleName_
                "WhiteSpace"
                [ whiteSpaceArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "whiteSpace", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , wrap =
        \wrapArg0 ->
            Type.alias
                moduleName_
                "Wrap"
                [ wrapArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "overflowWrap"
                      , Type.namedWith [ "Css" ] "Compatible" []
                      )
                    ]
                )
    , compatible =
        Type.alias
            moduleName_
            "Compatible"
            []
            (Type.namedWith [ "Css", "Structure" ] "Compatible" [])
    , fontSize =
        \fontSizeArg0 ->
            Type.alias
                moduleName_
                "FontSize"
                [ fontSizeArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "fontSize", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    , colorValue =
        \colorValueArg0 ->
            Type.alias
                moduleName_
                "ColorValue"
                [ colorValueArg0 ]
                (Type.namedWith
                    [ "Css", "Internal" ]
                    "ColorValue"
                    [ Type.var "compatible" ]
                )
    , colorStop =
        \colorStopArg0 colorStopArg1 colorStopArg2 ->
            Type.alias
                moduleName_
                "ColorStop"
                [ colorStopArg0, colorStopArg1, colorStopArg2 ]
                (Type.tuple
                    (Type.namedWith
                        [ "Css" ]
                        "ColorValue"
                        [ Type.var "compatibleA" ]
                    )
                    (Type.maybe
                        (Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unit" ]
                        )
                    )
                )
    , intOrAuto =
        \intOrAutoArg0 ->
            Type.alias
                moduleName_
                "IntOrAuto"
                [ intOrAutoArg0 ]
                (Type.extensible
                    "compatible"
                    [ ( "value", Type.string )
                    , ( "intOrAuto", Type.namedWith [ "Css" ] "Compatible" [] )
                    ]
                )
    }


make_ :
    { basicProperty :
        { value : Elm.Expression
        , all : Elm.Expression
        , alignItems : Elm.Expression
        , borderStyle : Elm.Expression
        , boxSizing : Elm.Expression
        , color : Elm.Expression
        , cursor : Elm.Expression
        , display : Elm.Expression
        , flexBasis : Elm.Expression
        , flexWrap : Elm.Expression
        , flexDirection : Elm.Expression
        , flexDirectionOrWrap : Elm.Expression
        , justifyContent : Elm.Expression
        , none : Elm.Expression
        , number : Elm.Expression
        , keyframes : Elm.Expression
        , outline : Elm.Expression
        , overflow : Elm.Expression
        , pointerEvents : Elm.Expression
        , visibility : Elm.Expression
        , textDecorationLine : Elm.Expression
        , textRendering : Elm.Expression
        , textIndent : Elm.Expression
        , textDecorationStyle : Elm.Expression
        , textTransform : Elm.Expression
        , length : Elm.Expression
        , lengthOrAuto : Elm.Expression
        , lengthOrNone : Elm.Expression
        , lengthOrNumber : Elm.Expression
        , lengthOrMinMaxDimension : Elm.Expression
        , lengthOrNoneOrMinMaxDimension : Elm.Expression
        , lengthOrNumberOrAutoOrNoneOrContent : Elm.Expression
        , listStyleType : Elm.Expression
        , listStylePosition : Elm.Expression
        , listStyleTypeOrPositionOrImage : Elm.Expression
        , fontFamily : Elm.Expression
        , fontSize : Elm.Expression
        , fontStyle : Elm.Expression
        , fontWeight : Elm.Expression
        , fontVariant : Elm.Expression
        , units : Elm.Expression
        , numericValue : Elm.Expression
        , unitLabel : Elm.Expression
        , backgroundRepeat : Elm.Expression
        , backgroundRepeatShorthand : Elm.Expression
        , backgroundAttachment : Elm.Expression
        , backgroundBlendMode : Elm.Expression
        , backgroundOrigin : Elm.Expression
        , backgroundImage : Elm.Expression
        , lengthOrAutoOrCoverOrContain : Elm.Expression
        , intOrAuto : Elm.Expression
        , touchAction : Elm.Expression
        , whiteSpace : Elm.Expression
        , tableLayout : Elm.Expression
        }
        -> Elm.Expression
    , calculatedLength :
        { value : Elm.Expression
        , length : Elm.Expression
        , lengthOrAuto : Elm.Expression
        , lengthOrNumber : Elm.Expression
        , lengthOrNone : Elm.Expression
        , lengthOrMinMaxDimension : Elm.Expression
        , lengthOrNoneOrMinMaxDimension : Elm.Expression
        , textIndent : Elm.Expression
        , flexBasis : Elm.Expression
        , lengthOrNumberOrAutoOrNoneOrContent : Elm.Expression
        , fontSize : Elm.Expression
        , lengthOrAutoOrCoverOrContain : Elm.Expression
        , calc : Elm.Expression
        }
        -> Elm.Expression
    , nonMixable : nonMixable_args_2_0 -> Elm.Expression
    , infinite :
        { value : Elm.Expression, numberOrInfinite : Elm.Expression }
        -> Elm.Expression
    }
make_ =
    { basicProperty =
        \basicProperty_args ->
            Elm.withType
                (Type.alias
                    [ "Css" ]
                    "BasicProperty"
                    []
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "all", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "alignItems"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "borderStyle"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "boxSizing"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "color", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "display"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexBasis"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexWrap"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexDirection"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexDirectionOrWrap"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "justifyContent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "none", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "number", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "keyframes"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "outline"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "overflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "pointerEvents"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "visibility"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textDecorationLine"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textRendering"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textIndent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textDecorationStyle"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textTransform"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "lengthOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNone"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumber"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNoneOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumberOrAutoOrNoneOrContent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "listStyleType"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "listStylePosition"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "listStyleTypeOrPositionOrImage"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontFamily"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontSize"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontStyle"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontWeight"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontVariant"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "units"
                          , Type.namedWith [ "Css" ] "IncompatibleUnits" []
                          )
                        , ( "numericValue", Type.float )
                        , ( "unitLabel", Type.string )
                        , ( "backgroundRepeat"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundRepeatShorthand"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundAttachment"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundBlendMode"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundOrigin"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundImage"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "intOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "touchAction"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "whiteSpace"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "tableLayout"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
                )
                (Elm.record
                    [ Tuple.pair "value" basicProperty_args.value
                    , Tuple.pair "all" basicProperty_args.all
                    , Tuple.pair "alignItems" basicProperty_args.alignItems
                    , Tuple.pair "borderStyle" basicProperty_args.borderStyle
                    , Tuple.pair "boxSizing" basicProperty_args.boxSizing
                    , Tuple.pair "color" basicProperty_args.color
                    , Tuple.pair "cursor" basicProperty_args.cursor
                    , Tuple.pair "display" basicProperty_args.display
                    , Tuple.pair "flexBasis" basicProperty_args.flexBasis
                    , Tuple.pair "flexWrap" basicProperty_args.flexWrap
                    , Tuple.pair
                        "flexDirection"
                        basicProperty_args.flexDirection
                    , Tuple.pair
                        "flexDirectionOrWrap"
                        basicProperty_args.flexDirectionOrWrap
                    , Tuple.pair
                        "justifyContent"
                        basicProperty_args.justifyContent
                    , Tuple.pair "none" basicProperty_args.none
                    , Tuple.pair "number" basicProperty_args.number
                    , Tuple.pair "keyframes" basicProperty_args.keyframes
                    , Tuple.pair "outline" basicProperty_args.outline
                    , Tuple.pair "overflow" basicProperty_args.overflow
                    , Tuple.pair
                        "pointerEvents"
                        basicProperty_args.pointerEvents
                    , Tuple.pair "visibility" basicProperty_args.visibility
                    , Tuple.pair
                        "textDecorationLine"
                        basicProperty_args.textDecorationLine
                    , Tuple.pair
                        "textRendering"
                        basicProperty_args.textRendering
                    , Tuple.pair "textIndent" basicProperty_args.textIndent
                    , Tuple.pair
                        "textDecorationStyle"
                        basicProperty_args.textDecorationStyle
                    , Tuple.pair
                        "textTransform"
                        basicProperty_args.textTransform
                    , Tuple.pair "length" basicProperty_args.length
                    , Tuple.pair "lengthOrAuto" basicProperty_args.lengthOrAuto
                    , Tuple.pair "lengthOrNone" basicProperty_args.lengthOrNone
                    , Tuple.pair
                        "lengthOrNumber"
                        basicProperty_args.lengthOrNumber
                    , Tuple.pair
                        "lengthOrMinMaxDimension"
                        basicProperty_args.lengthOrMinMaxDimension
                    , Tuple.pair
                        "lengthOrNoneOrMinMaxDimension"
                        basicProperty_args.lengthOrNoneOrMinMaxDimension
                    , Tuple.pair
                        "lengthOrNumberOrAutoOrNoneOrContent"
                        basicProperty_args.lengthOrNumberOrAutoOrNoneOrContent
                    , Tuple.pair
                        "listStyleType"
                        basicProperty_args.listStyleType
                    , Tuple.pair
                        "listStylePosition"
                        basicProperty_args.listStylePosition
                    , Tuple.pair
                        "listStyleTypeOrPositionOrImage"
                        basicProperty_args.listStyleTypeOrPositionOrImage
                    , Tuple.pair "fontFamily" basicProperty_args.fontFamily
                    , Tuple.pair "fontSize" basicProperty_args.fontSize
                    , Tuple.pair "fontStyle" basicProperty_args.fontStyle
                    , Tuple.pair "fontWeight" basicProperty_args.fontWeight
                    , Tuple.pair "fontVariant" basicProperty_args.fontVariant
                    , Tuple.pair "units" basicProperty_args.units
                    , Tuple.pair "numericValue" basicProperty_args.numericValue
                    , Tuple.pair "unitLabel" basicProperty_args.unitLabel
                    , Tuple.pair
                        "backgroundRepeat"
                        basicProperty_args.backgroundRepeat
                    , Tuple.pair
                        "backgroundRepeatShorthand"
                        basicProperty_args.backgroundRepeatShorthand
                    , Tuple.pair
                        "backgroundAttachment"
                        basicProperty_args.backgroundAttachment
                    , Tuple.pair
                        "backgroundBlendMode"
                        basicProperty_args.backgroundBlendMode
                    , Tuple.pair
                        "backgroundOrigin"
                        basicProperty_args.backgroundOrigin
                    , Tuple.pair
                        "backgroundImage"
                        basicProperty_args.backgroundImage
                    , Tuple.pair
                        "lengthOrAutoOrCoverOrContain"
                        basicProperty_args.lengthOrAutoOrCoverOrContain
                    , Tuple.pair "intOrAuto" basicProperty_args.intOrAuto
                    , Tuple.pair "touchAction" basicProperty_args.touchAction
                    , Tuple.pair "whiteSpace" basicProperty_args.whiteSpace
                    , Tuple.pair "tableLayout" basicProperty_args.tableLayout
                    ]
                )
    , calculatedLength =
        \calculatedLength_args ->
            Elm.withType
                (Type.alias
                    [ "Css" ]
                    "CalculatedLength"
                    []
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "lengthOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumber"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNone"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNoneOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textIndent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexBasis"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumberOrAutoOrNoneOrContent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "fontSize"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "calc", Type.namedWith [ "Css" ] "Compatible" [] )
                        ]
                    )
                )
                (Elm.record
                    [ Tuple.pair "value" calculatedLength_args.value
                    , Tuple.pair "length" calculatedLength_args.length
                    , Tuple.pair
                        "lengthOrAuto"
                        calculatedLength_args.lengthOrAuto
                    , Tuple.pair
                        "lengthOrNumber"
                        calculatedLength_args.lengthOrNumber
                    , Tuple.pair
                        "lengthOrNone"
                        calculatedLength_args.lengthOrNone
                    , Tuple.pair
                        "lengthOrMinMaxDimension"
                        calculatedLength_args.lengthOrMinMaxDimension
                    , Tuple.pair
                        "lengthOrNoneOrMinMaxDimension"
                        calculatedLength_args.lengthOrNoneOrMinMaxDimension
                    , Tuple.pair "textIndent" calculatedLength_args.textIndent
                    , Tuple.pair "flexBasis" calculatedLength_args.flexBasis
                    , Tuple.pair
                        "lengthOrNumberOrAutoOrNoneOrContent"
                        calculatedLength_args.lengthOrNumberOrAutoOrNoneOrContent
                    , Tuple.pair "fontSize" calculatedLength_args.fontSize
                    , Tuple.pair
                        "lengthOrAutoOrCoverOrContain"
                        calculatedLength_args.lengthOrAutoOrCoverOrContain
                    , Tuple.pair "calc" calculatedLength_args.calc
                    ]
                )
    , nonMixable =
        \nonMixable_args ->
            Elm.withType
                (Type.alias [ "Css" ] "NonMixable" [] (Type.record []))
                (Elm.record [])
    , infinite =
        \infinite_args ->
            Elm.withType
                (Type.alias
                    [ "Css" ]
                    "Infinite"
                    []
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "numberOrInfinite"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
                )
                (Elm.record
                    [ Tuple.pair "value" infinite_args.value
                    , Tuple.pair
                        "numberOrInfinite"
                        infinite_args.numberOrInfinite
                    ]
                )
    }


call_ :
    { batch : Elm.Expression -> Elm.Expression
    , property : Elm.Expression -> Elm.Expression -> Elm.Expression
    , flex : Elm.Expression -> Elm.Expression
    , flex2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , flex3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , alignSelf : Elm.Expression -> Elm.Expression
    , alignItems : Elm.Expression -> Elm.Expression
    , justifyContent : Elm.Expression -> Elm.Expression
    , order : Elm.Expression -> Elm.Expression
    , flexDirection : Elm.Expression -> Elm.Expression
    , flexFlow1 : Elm.Expression -> Elm.Expression
    , flexFlow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , flexWrap : Elm.Expression -> Elm.Expression
    , flexBasis : Elm.Expression -> Elm.Expression
    , flexGrow : Elm.Expression -> Elm.Expression
    , flexShrink : Elm.Expression -> Elm.Expression
    , transformStyle : Elm.Expression -> Elm.Expression
    , transformBox : Elm.Expression -> Elm.Expression
    , transform : Elm.Expression -> Elm.Expression
    , transforms : Elm.Expression -> Elm.Expression
    , textOrientation : Elm.Expression -> Elm.Expression
    , textDecoration : Elm.Expression -> Elm.Expression
    , textDecoration2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , textDecoration3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , textDecorations : Elm.Expression -> Elm.Expression
    , textDecorations2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , textDecorations3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , textDecorationLine : Elm.Expression -> Elm.Expression
    , textDecorationLines : Elm.Expression -> Elm.Expression
    , textDecorationStyle : Elm.Expression -> Elm.Expression
    , textEmphasisColor : Elm.Expression -> Elm.Expression
    , textIndent : Elm.Expression -> Elm.Expression
    , textIndent2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , textIndent3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , textOverflow : Elm.Expression -> Elm.Expression
    , textRendering : Elm.Expression -> Elm.Expression
    , textTransform : Elm.Expression -> Elm.Expression
    , textAlign : Elm.Expression -> Elm.Expression
    , textAlignLast : Elm.Expression -> Elm.Expression
    , left : Elm.Expression -> Elm.Expression
    , right : Elm.Expression -> Elm.Expression
    , verticalAlign : Elm.Expression -> Elm.Expression
    , display : Elm.Expression -> Elm.Expression
    , opacity : Elm.Expression -> Elm.Expression
    , width : Elm.Expression -> Elm.Expression
    , minWidth : Elm.Expression -> Elm.Expression
    , maxWidth : Elm.Expression -> Elm.Expression
    , height : Elm.Expression -> Elm.Expression
    , minHeight : Elm.Expression -> Elm.Expression
    , maxHeight : Elm.Expression -> Elm.Expression
    , padding : Elm.Expression -> Elm.Expression
    , padding2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , padding3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , padding4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , paddingTop : Elm.Expression -> Elm.Expression
    , paddingBottom : Elm.Expression -> Elm.Expression
    , paddingRight : Elm.Expression -> Elm.Expression
    , paddingLeft : Elm.Expression -> Elm.Expression
    , pointerEvents : Elm.Expression -> Elm.Expression
    , margin : Elm.Expression -> Elm.Expression
    , margin2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , margin3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , margin4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , marginTop : Elm.Expression -> Elm.Expression
    , marginBottom : Elm.Expression -> Elm.Expression
    , marginRight : Elm.Expression -> Elm.Expression
    , marginLeft : Elm.Expression -> Elm.Expression
    , marginBlockStart : Elm.Expression -> Elm.Expression
    , marginBlockEnd : Elm.Expression -> Elm.Expression
    , marginInlineStart : Elm.Expression -> Elm.Expression
    , marginInlineEnd : Elm.Expression -> Elm.Expression
    , boxSizing : Elm.Expression -> Elm.Expression
    , overflow : Elm.Expression -> Elm.Expression
    , overflowX : Elm.Expression -> Elm.Expression
    , overflowY : Elm.Expression -> Elm.Expression
    , overflowWrap : Elm.Expression -> Elm.Expression
    , whiteSpace : Elm.Expression -> Elm.Expression
    , backgroundColor : Elm.Expression -> Elm.Expression
    , color : Elm.Expression -> Elm.Expression
    , textShadow : Elm.Expression -> Elm.Expression
    , textShadow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , textShadow3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , textShadow4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , boxShadow : Elm.Expression -> Elm.Expression
    , boxShadow2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , boxShadow3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , boxShadow4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , boxShadow5 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , boxShadow6 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , lineHeight : Elm.Expression -> Elm.Expression
    , letterSpacing : Elm.Expression -> Elm.Expression
    , fontFace : Elm.Expression -> Elm.Expression
    , fontFamily : Elm.Expression -> Elm.Expression
    , fontSize : Elm.Expression -> Elm.Expression
    , fontStyle : Elm.Expression -> Elm.Expression
    , fontWeight : Elm.Expression -> Elm.Expression
    , fontVariant : Elm.Expression -> Elm.Expression
    , fontVariant2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , fontVariant3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , fontVariantLigatures : Elm.Expression -> Elm.Expression
    , fontVariantCaps : Elm.Expression -> Elm.Expression
    , fontVariantNumeric : Elm.Expression -> Elm.Expression
    , fontVariantNumeric2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , fontVariantNumeric3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , fontFamilies : Elm.Expression -> Elm.Expression
    , fontVariantNumerics : Elm.Expression -> Elm.Expression
    , fontFeatureSettings : Elm.Expression -> Elm.Expression
    , fontFeatureSettingsList : Elm.Expression -> Elm.Expression
    , cursor : Elm.Expression -> Elm.Expression
    , outline : Elm.Expression -> Elm.Expression
    , outline3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , outlineColor : Elm.Expression -> Elm.Expression
    , outlineWidth : Elm.Expression -> Elm.Expression
    , outlineStyle : Elm.Expression -> Elm.Expression
    , outlineOffset : Elm.Expression -> Elm.Expression
    , zIndex : Elm.Expression -> Elm.Expression
    , resize : Elm.Expression -> Elm.Expression
    , fill : Elm.Expression -> Elm.Expression
    , touchAction : Elm.Expression -> Elm.Expression
    , borderSpacing : Elm.Expression -> Elm.Expression
    , borderSpacing2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , visibility : Elm.Expression -> Elm.Expression
    , all : Elm.Expression -> Elm.Expression
    , important : Elm.Expression -> Elm.Expression
    , rgb : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , rgba :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , hsl : Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , hsla :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , hex : Elm.Expression -> Elm.Expression
    , featureTag : Elm.Expression -> Elm.Expression
    , featureTag2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderCollapse : Elm.Expression -> Elm.Expression
    , borderColor : Elm.Expression -> Elm.Expression
    , borderColor2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderColor3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderColor4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , borderBottomLeftRadius : Elm.Expression -> Elm.Expression
    , borderBottomLeftRadius2 :
        Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderBottomRightRadius : Elm.Expression -> Elm.Expression
    , borderBottomRightRadius2 :
        Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderTopLeftRadius : Elm.Expression -> Elm.Expression
    , borderTopLeftRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderTopRightRadius : Elm.Expression -> Elm.Expression
    , borderTopRightRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderRadius : Elm.Expression -> Elm.Expression
    , borderRadius2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderRadius3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderRadius4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , borderWidth : Elm.Expression -> Elm.Expression
    , borderWidth2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderWidth3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderWidth4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , borderBottomWidth : Elm.Expression -> Elm.Expression
    , borderLeftWidth : Elm.Expression -> Elm.Expression
    , borderRightWidth : Elm.Expression -> Elm.Expression
    , borderTopWidth : Elm.Expression -> Elm.Expression
    , borderBottomStyle : Elm.Expression -> Elm.Expression
    , borderLeftStyle : Elm.Expression -> Elm.Expression
    , borderRightStyle : Elm.Expression -> Elm.Expression
    , borderTopStyle : Elm.Expression -> Elm.Expression
    , borderStyle : Elm.Expression -> Elm.Expression
    , borderBottomColor : Elm.Expression -> Elm.Expression
    , borderLeftColor : Elm.Expression -> Elm.Expression
    , borderRightColor : Elm.Expression -> Elm.Expression
    , borderTopColor : Elm.Expression -> Elm.Expression
    , border : Elm.Expression -> Elm.Expression
    , border2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , border3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderTop : Elm.Expression -> Elm.Expression
    , borderTop2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderTop3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderBottom : Elm.Expression -> Elm.Expression
    , borderBottom2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderBottom3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderLeft : Elm.Expression -> Elm.Expression
    , borderLeft2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderLeft3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderRight : Elm.Expression -> Elm.Expression
    , borderRight2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderRight3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderImageOutset : Elm.Expression -> Elm.Expression
    , borderImageOutset2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderImageOutset3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderImageOutset4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , borderImageWidth : Elm.Expression -> Elm.Expression
    , borderImageWidth2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderImageWidth3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , borderImageWidth4 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , top : Elm.Expression -> Elm.Expression
    , position : Elm.Expression -> Elm.Expression
    , float : Elm.Expression -> Elm.Expression
    , bottom : Elm.Expression -> Elm.Expression
    , matrix :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , matrix3d :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , perspective : Elm.Expression -> Elm.Expression
    , rotate3d :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , rotateX : Elm.Expression -> Elm.Expression
    , rotateY : Elm.Expression -> Elm.Expression
    , rotateZ : Elm.Expression -> Elm.Expression
    , scale : Elm.Expression -> Elm.Expression
    , scale2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , scale3d :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , scaleX : Elm.Expression -> Elm.Expression
    , scaleY : Elm.Expression -> Elm.Expression
    , skew : Elm.Expression -> Elm.Expression
    , skew2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , skewX : Elm.Expression -> Elm.Expression
    , skewY : Elm.Expression -> Elm.Expression
    , translate : Elm.Expression -> Elm.Expression
    , translate2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , translate3d :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , translateX : Elm.Expression -> Elm.Expression
    , translateY : Elm.Expression -> Elm.Expression
    , translateZ : Elm.Expression -> Elm.Expression
    , rotate : Elm.Expression -> Elm.Expression
    , pct : Elm.Expression -> Elm.Expression
    , px : Elm.Expression -> Elm.Expression
    , em : Elm.Expression -> Elm.Expression
    , pt : Elm.Expression -> Elm.Expression
    , ex : Elm.Expression -> Elm.Expression
    , ch : Elm.Expression -> Elm.Expression
    , rem : Elm.Expression -> Elm.Expression
    , vh : Elm.Expression -> Elm.Expression
    , vw : Elm.Expression -> Elm.Expression
    , vmin : Elm.Expression -> Elm.Expression
    , vmax : Elm.Expression -> Elm.Expression
    , mm : Elm.Expression -> Elm.Expression
    , cm : Elm.Expression -> Elm.Expression
    , inches : Elm.Expression -> Elm.Expression
    , pc : Elm.Expression -> Elm.Expression
    , int : Elm.Expression -> Elm.Expression
    , num : Elm.Expression -> Elm.Expression
    , calc :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , deg : Elm.Expression -> Elm.Expression
    , rad : Elm.Expression -> Elm.Expression
    , grad : Elm.Expression -> Elm.Expression
    , turn : Elm.Expression -> Elm.Expression
    , sec : Elm.Expression -> Elm.Expression
    , ms : Elm.Expression -> Elm.Expression
    , pseudoClass : Elm.Expression -> Elm.Expression -> Elm.Expression
    , active : Elm.Expression -> Elm.Expression
    , any : Elm.Expression -> Elm.Expression -> Elm.Expression
    , checked : Elm.Expression -> Elm.Expression
    , disabled : Elm.Expression -> Elm.Expression
    , empty : Elm.Expression -> Elm.Expression
    , enabled : Elm.Expression -> Elm.Expression
    , first : Elm.Expression -> Elm.Expression
    , firstChild : Elm.Expression -> Elm.Expression
    , firstOfType : Elm.Expression -> Elm.Expression
    , fullscreen : Elm.Expression -> Elm.Expression
    , focus : Elm.Expression -> Elm.Expression
    , hover : Elm.Expression -> Elm.Expression
    , visited : Elm.Expression -> Elm.Expression
    , indeterminate : Elm.Expression -> Elm.Expression
    , invalid : Elm.Expression -> Elm.Expression
    , lang : Elm.Expression -> Elm.Expression -> Elm.Expression
    , lastChild : Elm.Expression -> Elm.Expression
    , lastOfType : Elm.Expression -> Elm.Expression
    , link : Elm.Expression -> Elm.Expression
    , nthChild : Elm.Expression -> Elm.Expression -> Elm.Expression
    , nthLastChild : Elm.Expression -> Elm.Expression -> Elm.Expression
    , nthLastOfType : Elm.Expression -> Elm.Expression -> Elm.Expression
    , nthOfType : Elm.Expression -> Elm.Expression -> Elm.Expression
    , onlyChild : Elm.Expression -> Elm.Expression
    , onlyOfType : Elm.Expression -> Elm.Expression
    , optional : Elm.Expression -> Elm.Expression
    , outOfRange : Elm.Expression -> Elm.Expression
    , readWrite : Elm.Expression -> Elm.Expression
    , required : Elm.Expression -> Elm.Expression
    , root : Elm.Expression -> Elm.Expression
    , scope : Elm.Expression -> Elm.Expression
    , target : Elm.Expression -> Elm.Expression
    , valid : Elm.Expression -> Elm.Expression
    , pseudoElement : Elm.Expression -> Elm.Expression -> Elm.Expression
    , after : Elm.Expression -> Elm.Expression
    , before : Elm.Expression -> Elm.Expression
    , firstLetter : Elm.Expression -> Elm.Expression
    , firstLine : Elm.Expression -> Elm.Expression
    , selection : Elm.Expression -> Elm.Expression
    , src_ : Elm.Expression -> Elm.Expression
    , qt : Elm.Expression -> Elm.Expression
    , listStyleType : Elm.Expression -> Elm.Expression
    , listStylePosition : Elm.Expression -> Elm.Expression
    , listStyle : Elm.Expression -> Elm.Expression
    , listStyle2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , listStyle3 :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , linearGradient :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , linearGradient2 :
        Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
        -> Elm.Expression
    , stop : Elm.Expression -> Elm.Expression
    , stop2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , url : Elm.Expression -> Elm.Expression
    , tableLayout : Elm.Expression -> Elm.Expression
    , backgroundAttachment : Elm.Expression -> Elm.Expression
    , backgroundBlendMode : Elm.Expression -> Elm.Expression
    , backgroundClip : Elm.Expression -> Elm.Expression
    , backgroundImage : Elm.Expression -> Elm.Expression
    , backgroundOrigin : Elm.Expression -> Elm.Expression
    , backgroundPosition : Elm.Expression -> Elm.Expression
    , backgroundPosition2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , backgroundRepeat : Elm.Expression -> Elm.Expression
    , backgroundRepeat2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , backgroundSize : Elm.Expression -> Elm.Expression
    , backgroundSize2 : Elm.Expression -> Elm.Expression -> Elm.Expression
    , animationName : Elm.Expression -> Elm.Expression
    , animationDelay : Elm.Expression -> Elm.Expression
    , animationDuration : Elm.Expression -> Elm.Expression
    , animationIterationCount : Elm.Expression -> Elm.Expression
    }
call_ =
    { batch =
        \batchArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "batch"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ batchArg ]
    , property =
        \propertyArg propertyArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "property"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string, Type.string ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ propertyArg, propertyArg0 ]
    , flex =
        \flexArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flex"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumberOrAutoOrNoneOrContent"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexArg ]
    , flex2 =
        \flex2Arg flex2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flex2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flex2Arg, flex2Arg0 ]
    , flex3 =
        \flex3Arg flex3Arg0 flex3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flex3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flex3Arg, flex3Arg0, flex3Arg1 ]
    , alignSelf =
        \alignSelfArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "alignSelf"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ alignSelfArg ]
    , alignItems =
        \alignItemsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "alignItems"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ alignItemsArg ]
    , justifyContent =
        \justifyContentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "justifyContent"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ justifyContentArg ]
    , order =
        \orderArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "order"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ orderArg ]
    , flexDirection =
        \flexDirectionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexDirection"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FlexDirection"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexDirectionArg ]
    , flexFlow1 =
        \flexFlow1Arg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexFlow1"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FlexDirectionOrWrap"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexFlow1Arg ]
    , flexFlow2 =
        \flexFlow2Arg flexFlow2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexFlow2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FlexDirectionOrWrap"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FlexDirectionOrWrap"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexFlow2Arg, flexFlow2Arg0 ]
    , flexWrap =
        \flexWrapArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexWrap"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FlexWrap"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexWrapArg ]
    , flexBasis =
        \flexBasisArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexBasis"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FlexBasis"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexBasisArg ]
    , flexGrow =
        \flexGrowArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexGrow"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexGrowArg ]
    , flexShrink =
        \flexShrinkArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "flexShrink"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ flexShrinkArg ]
    , transformStyle =
        \transformStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "transformStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TransformStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ transformStyleArg ]
    , transformBox =
        \transformBoxArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "transformBox"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TransformBox"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ transformBoxArg ]
    , transform =
        \transformArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "transform"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ transformArg ]
    , transforms =
        \transformsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "transforms"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "Transform"
                                        [ Type.var "compatible" ]
                                    )
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ transformsArg ]
    , textOrientation =
        \textOrientationArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textOrientation"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextOrientation"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textOrientationArg ]
    , textDecoration =
        \textDecorationArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecoration"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationLine"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorationArg ]
    , textDecoration2 =
        \textDecoration2Arg textDecoration2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecoration2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationLine"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecoration2Arg, textDecoration2Arg0 ]
    , textDecoration3 =
        \textDecoration3Arg textDecoration3Arg0 textDecoration3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecoration3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationLine"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecoration3Arg, textDecoration3Arg0, textDecoration3Arg1 ]
    , textDecorations =
        \textDecorationsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorations"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "TextDecorationLine"
                                        [ Type.var "compatible" ]
                                    )
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorationsArg ]
    , textDecorations2 =
        \textDecorations2Arg textDecorations2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorations2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "TextDecorationLine"
                                        [ Type.var "compatibleA" ]
                                    )
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorations2Arg, textDecorations2Arg0 ]
    , textDecorations3 =
        \textDecorations3Arg textDecorations3Arg0 textDecorations3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorations3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "TextDecorationLine"
                                        [ Type.var "compatibleA" ]
                                    )
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorations3Arg
                , textDecorations3Arg0
                , textDecorations3Arg1
                ]
    , textDecorationLine =
        \textDecorationLineArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorationLine"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationLine"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorationLineArg ]
    , textDecorationLines =
        \textDecorationLinesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorationLines"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "TextDecorationLine"
                                        [ Type.var "compatible" ]
                                    )
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorationLinesArg ]
    , textDecorationStyle =
        \textDecorationStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textDecorationStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextDecorationStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textDecorationStyleArg ]
    , textEmphasisColor =
        \textEmphasisColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textEmphasisColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textEmphasisColorArg ]
    , textIndent =
        \textIndentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textIndent"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textIndentArg ]
    , textIndent2 =
        \textIndent2Arg textIndent2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textIndent2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextIndent"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textIndent2Arg, textIndent2Arg0 ]
    , textIndent3 =
        \textIndent3Arg textIndent3Arg0 textIndent3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textIndent3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextIndent"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "TextIndent"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textIndent3Arg, textIndent3Arg0, textIndent3Arg1 ]
    , textOverflow =
        \textOverflowArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textOverflow"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextOverflow"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textOverflowArg ]
    , textRendering =
        \textRenderingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textRendering"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextRendering"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textRenderingArg ]
    , textTransform =
        \textTransformArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textTransform"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TextTransform"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textTransformArg ]
    , textAlign =
        \textAlignArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textAlign"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textAlignArg ]
    , textAlignLast =
        \textAlignLastArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textAlignLast"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textAlignLastArg ]
    , left =
        \leftArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "left"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ leftArg ]
    , right =
        \rightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "right"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ rightArg ]
    , verticalAlign =
        \verticalAlignArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "verticalAlign"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ verticalAlignArg ]
    , display =
        \displayArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "display"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Display"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ displayArg ]
    , opacity =
        \opacityArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "opacity"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Number"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ opacityArg ]
    , width =
        \widthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "width"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ widthArg ]
    , minWidth =
        \minWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "minWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrMinMaxDimension"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ minWidthArg ]
    , maxWidth =
        \maxWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "maxWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNoneOrMinMaxDimension"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ maxWidthArg ]
    , height =
        \heightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "height"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ heightArg ]
    , minHeight =
        \minHeightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "minHeight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrMinMaxDimension"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ minHeightArg ]
    , maxHeight =
        \maxHeightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "maxHeight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNoneOrMinMaxDimension"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ maxHeightArg ]
    , padding =
        \paddingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "padding"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ paddingArg ]
    , padding2 =
        \padding2Arg padding2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "padding2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ padding2Arg, padding2Arg0 ]
    , padding3 =
        \padding3Arg padding3Arg0 padding3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "padding3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ padding3Arg, padding3Arg0, padding3Arg1 ]
    , padding4 =
        \padding4Arg padding4Arg0 padding4Arg1 padding4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "padding4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ padding4Arg, padding4Arg0, padding4Arg1, padding4Arg2 ]
    , paddingTop =
        \paddingTopArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "paddingTop"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ paddingTopArg ]
    , paddingBottom =
        \paddingBottomArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "paddingBottom"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ paddingBottomArg ]
    , paddingRight =
        \paddingRightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "paddingRight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ paddingRightArg ]
    , paddingLeft =
        \paddingLeftArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "paddingLeft"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ paddingLeftArg ]
    , pointerEvents =
        \pointerEventsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pointerEvents"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "PointerEvents"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ pointerEventsArg ]
    , margin =
        \marginArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "margin"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginArg ]
    , margin2 =
        \margin2Arg margin2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "margin2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ margin2Arg, margin2Arg0 ]
    , margin3 =
        \margin3Arg margin3Arg0 margin3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "margin3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ margin3Arg, margin3Arg0, margin3Arg1 ]
    , margin4 =
        \margin4Arg margin4Arg0 margin4Arg1 margin4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "margin4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleC" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleD" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ margin4Arg, margin4Arg0, margin4Arg1, margin4Arg2 ]
    , marginTop =
        \marginTopArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginTop"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginTopArg ]
    , marginBottom =
        \marginBottomArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginBottom"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginBottomArg ]
    , marginRight =
        \marginRightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginRight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginRightArg ]
    , marginLeft =
        \marginLeftArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginLeft"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginLeftArg ]
    , marginBlockStart =
        \marginBlockStartArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginBlockStart"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginBlockStartArg ]
    , marginBlockEnd =
        \marginBlockEndArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginBlockEnd"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginBlockEndArg ]
    , marginInlineStart =
        \marginInlineStartArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginInlineStart"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginInlineStartArg ]
    , marginInlineEnd =
        \marginInlineEndArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "marginInlineEnd"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ marginInlineEndArg ]
    , boxSizing =
        \boxSizingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxSizing"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BoxSizing"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxSizingArg ]
    , overflow =
        \overflowArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "overflow"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Overflow"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ overflowArg ]
    , overflowX =
        \overflowXArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "overflowX"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Overflow"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ overflowXArg ]
    , overflowY =
        \overflowYArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "overflowY"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Overflow"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ overflowYArg ]
    , overflowWrap =
        \overflowWrapArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "overflowWrap"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Wrap"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ overflowWrapArg ]
    , whiteSpace =
        \whiteSpaceArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "whiteSpace"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "WhiteSpace"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ whiteSpaceArg ]
    , backgroundColor =
        \backgroundColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundColorArg ]
    , color =
        \colorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "color"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ colorArg ]
    , textShadow =
        \textShadowArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textShadow"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "None"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textShadowArg ]
    , textShadow2 =
        \textShadow2Arg textShadow2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textShadow2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textShadow2Arg, textShadow2Arg0 ]
    , textShadow3 =
        \textShadow3Arg textShadow3Arg0 textShadow3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textShadow3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textShadow3Arg, textShadow3Arg0, textShadow3Arg1 ]
    , textShadow4 =
        \textShadow4Arg textShadow4Arg0 textShadow4Arg1 textShadow4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "textShadow4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleD" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ textShadow4Arg
                , textShadow4Arg0
                , textShadow4Arg1
                , textShadow4Arg2
                ]
    , boxShadow =
        \boxShadowArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "None"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadowArg ]
    , boxShadow2 =
        \boxShadow2Arg boxShadow2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadow2Arg, boxShadow2Arg0 ]
    , boxShadow3 =
        \boxShadow3Arg boxShadow3Arg0 boxShadow3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "a" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "c" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadow3Arg, boxShadow3Arg0, boxShadow3Arg1 ]
    , boxShadow4 =
        \boxShadow4Arg boxShadow4Arg0 boxShadow4Arg1 boxShadow4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "a" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "d" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadow4Arg
                , boxShadow4Arg0
                , boxShadow4Arg1
                , boxShadow4Arg2
                ]
    , boxShadow5 =
        \boxShadow5Arg boxShadow5Arg0 boxShadow5Arg1 boxShadow5Arg2 boxShadow5Arg3 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow5"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "a" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleD"
                                    , Type.var "unitsD"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleE" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadow5Arg
                , boxShadow5Arg0
                , boxShadow5Arg1
                , boxShadow5Arg2
                , boxShadow5Arg3
                ]
    , boxShadow6 =
        \boxShadow6Arg boxShadow6Arg0 boxShadow6Arg1 boxShadow6Arg2 boxShadow6Arg3 boxShadow6Arg4 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "boxShadow6"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Value"
                                    [ Type.var "a" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleD"
                                    , Type.var "unitsD"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleE" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ boxShadow6Arg
                , boxShadow6Arg0
                , boxShadow6Arg1
                , boxShadow6Arg2
                , boxShadow6Arg3
                , boxShadow6Arg4
                ]
    , lineHeight =
        \lineHeightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "lineHeight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ lineHeightArg ]
    , letterSpacing =
        \letterSpacingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "letterSpacing"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ letterSpacingArg ]
    , fontFace =
        \fontFaceArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontFace"
                    , annotation =
                        Just (Type.function [ Type.string ] Type.string)
                    }
                )
                [ fontFaceArg ]
    , fontFamily =
        \fontFamilyArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontFamily"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontFamily"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontFamilyArg ]
    , fontSize =
        \fontSizeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontSize"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontSize"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontSizeArg ]
    , fontStyle =
        \fontStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontStyle"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontStyleArg ]
    , fontWeight =
        \fontWeightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontWeight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontWeight"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontWeightArg ]
    , fontVariant =
        \fontVariantArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariant"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantArg ]
    , fontVariant2 =
        \fontVariant2Arg fontVariant2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariant2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariant2Arg, fontVariant2Arg0 ]
    , fontVariant3 =
        \fontVariant3Arg fontVariant3Arg0 fontVariant3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariant3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariant"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariant3Arg, fontVariant3Arg0, fontVariant3Arg1 ]
    , fontVariantLigatures =
        \fontVariantLigaturesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantLigatures"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariantLigatures"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantLigaturesArg ]
    , fontVariantCaps =
        \fontVariantCapsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantCaps"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariantCaps"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantCapsArg ]
    , fontVariantNumeric =
        \fontVariantNumericArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantNumeric"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantNumericArg ]
    , fontVariantNumeric2 =
        \fontVariantNumeric2Arg fontVariantNumeric2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantNumeric2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantNumeric2Arg, fontVariantNumeric2Arg0 ]
    , fontVariantNumeric3 =
        \fontVariantNumeric3Arg fontVariantNumeric3Arg0 fontVariantNumeric3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantNumeric3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "FontVariantNumeric"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantNumeric3Arg
                , fontVariantNumeric3Arg0
                , fontVariantNumeric3Arg1
                ]
    , fontFamilies =
        \fontFamiliesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontFamilies"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list Type.string ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontFamiliesArg ]
    , fontVariantNumerics =
        \fontVariantNumericsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontVariantNumerics"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "FontVariantNumeric"
                                        [ Type.var "compatible" ]
                                    )
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontVariantNumericsArg ]
    , fontFeatureSettings =
        \fontFeatureSettingsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontFeatureSettings"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "FeatureTagValue"
                                    [ Type.var "a" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontFeatureSettingsArg ]
    , fontFeatureSettingsList =
        \fontFeatureSettingsListArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fontFeatureSettingsList"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "FeatureTagValue"
                                        [ Type.var "a" ]
                                    )
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fontFeatureSettingsListArg ]
    , cursor =
        \cursorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "cursor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Cursor"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ cursorArg ]
    , outline =
        \outlineArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outline"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Outline"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outlineArg ]
    , outline3 =
        \outline3Arg outline3Arg0 outline3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outline3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outline3Arg, outline3Arg0, outline3Arg1 ]
    , outlineColor =
        \outlineColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outlineColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outlineColorArg ]
    , outlineWidth =
        \outlineWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outlineWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNone"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outlineWidthArg ]
    , outlineStyle =
        \outlineStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outlineStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outlineStyleArg ]
    , outlineOffset =
        \outlineOffsetArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outlineOffset"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outlineOffsetArg ]
    , zIndex =
        \zIndexArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "zIndex"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IntOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ zIndexArg ]
    , resize =
        \resizeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "resize"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Resize"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ resizeArg ]
    , fill =
        \fillArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fill"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fillArg ]
    , touchAction =
        \touchActionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "touchAction"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TouchAction"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ touchActionArg ]
    , borderSpacing =
        \borderSpacingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderSpacing"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderSpacingArg ]
    , borderSpacing2 =
        \borderSpacing2Arg borderSpacing2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderSpacing2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderSpacing2Arg, borderSpacing2Arg0 ]
    , visibility =
        \visibilityArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "visibility"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Visibility"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ visibilityArg ]
    , all =
        \allArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "all"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "All"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ allArg ]
    , important =
        \importantArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "important"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "Css" ] "Style" [] ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ importantArg ]
    , rgb =
        \rgbArg rgbArg0 rgbArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rgb"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.int, Type.int, Type.int ]
                                (Type.namedWith [ "Css" ] "Color" [])
                            )
                    }
                )
                [ rgbArg, rgbArg0, rgbArg1 ]
    , rgba =
        \rgbaArg rgbaArg0 rgbaArg1 rgbaArg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rgba"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.int, Type.int, Type.int, Type.float ]
                                (Type.namedWith [ "Css" ] "Color" [])
                            )
                    }
                )
                [ rgbaArg, rgbaArg0, rgbaArg1, rgbaArg2 ]
    , hsl =
        \hslArg hslArg0 hslArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "hsl"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float, Type.float, Type.float ]
                                (Type.namedWith [ "Css" ] "Color" [])
                            )
                    }
                )
                [ hslArg, hslArg0, hslArg1 ]
    , hsla =
        \hslaArg hslaArg0 hslaArg1 hslaArg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "hsla"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                ]
                                (Type.namedWith [ "Css" ] "Color" [])
                            )
                    }
                )
                [ hslaArg, hslaArg0, hslaArg1, hslaArg2 ]
    , hex =
        \hexArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "hex"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string ]
                                (Type.namedWith [ "Css" ] "Color" [])
                            )
                    }
                )
                [ hexArg ]
    , featureTag =
        \featureTagArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "featureTag"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "FeatureTagValue"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ featureTagArg ]
    , featureTag2 =
        \featureTag2Arg featureTag2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "featureTag2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string, Type.int ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "FeatureTagValue"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ featureTag2Arg, featureTag2Arg0 ]
    , borderCollapse =
        \borderCollapseArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderCollapse"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderCollapse"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderCollapseArg ]
    , borderColor =
        \borderColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderColorArg ]
    , borderColor2 =
        \borderColor2Arg borderColor2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderColor2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderColor2Arg, borderColor2Arg0 ]
    , borderColor3 =
        \borderColor3Arg borderColor3Arg0 borderColor3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderColor3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderColor3Arg, borderColor3Arg0, borderColor3Arg1 ]
    , borderColor4 =
        \borderColor4Arg borderColor4Arg0 borderColor4Arg1 borderColor4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderColor4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleD" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderColor4Arg
                , borderColor4Arg0
                , borderColor4Arg1
                , borderColor4Arg2
                ]
    , borderBottomLeftRadius =
        \borderBottomLeftRadiusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomLeftRadius"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomLeftRadiusArg ]
    , borderBottomLeftRadius2 =
        \borderBottomLeftRadius2Arg borderBottomLeftRadius2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomLeftRadius2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomLeftRadius2Arg, borderBottomLeftRadius2Arg0 ]
    , borderBottomRightRadius =
        \borderBottomRightRadiusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomRightRadius"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomRightRadiusArg ]
    , borderBottomRightRadius2 =
        \borderBottomRightRadius2Arg borderBottomRightRadius2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomRightRadius2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomRightRadius2Arg, borderBottomRightRadius2Arg0 ]
    , borderTopLeftRadius =
        \borderTopLeftRadiusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopLeftRadius"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopLeftRadiusArg ]
    , borderTopLeftRadius2 =
        \borderTopLeftRadius2Arg borderTopLeftRadius2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopLeftRadius2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopLeftRadius2Arg, borderTopLeftRadius2Arg0 ]
    , borderTopRightRadius =
        \borderTopRightRadiusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopRightRadius"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopRightRadiusArg ]
    , borderTopRightRadius2 =
        \borderTopRightRadius2Arg borderTopRightRadius2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopRightRadius2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopRightRadius2Arg, borderTopRightRadius2Arg0 ]
    , borderRadius =
        \borderRadiusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRadius"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRadiusArg ]
    , borderRadius2 =
        \borderRadius2Arg borderRadius2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRadius2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRadius2Arg, borderRadius2Arg0 ]
    , borderRadius3 =
        \borderRadius3Arg borderRadius3Arg0 borderRadius3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRadius3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRadius3Arg, borderRadius3Arg0, borderRadius3Arg1 ]
    , borderRadius4 =
        \borderRadius4Arg borderRadius4Arg0 borderRadius4Arg1 borderRadius4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRadius4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleD"
                                    , Type.var "unitsD"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRadius4Arg
                , borderRadius4Arg0
                , borderRadius4Arg1
                , borderRadius4Arg2
                ]
    , borderWidth =
        \borderWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderWidthArg ]
    , borderWidth2 =
        \borderWidth2Arg borderWidth2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderWidth2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderWidth2Arg, borderWidth2Arg0 ]
    , borderWidth3 =
        \borderWidth3Arg borderWidth3Arg0 borderWidth3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderWidth3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderWidth3Arg, borderWidth3Arg0, borderWidth3Arg1 ]
    , borderWidth4 =
        \borderWidth4Arg borderWidth4Arg0 borderWidth4Arg1 borderWidth4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderWidth4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleD"
                                    , Type.var "unitsD"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderWidth4Arg
                , borderWidth4Arg0
                , borderWidth4Arg1
                , borderWidth4Arg2
                ]
    , borderBottomWidth =
        \borderBottomWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomWidthArg ]
    , borderLeftWidth =
        \borderLeftWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeftWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeftWidthArg ]
    , borderRightWidth =
        \borderRightWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRightWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRightWidthArg ]
    , borderTopWidth =
        \borderTopWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopWidthArg ]
    , borderBottomStyle =
        \borderBottomStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomStyleArg ]
    , borderLeftStyle =
        \borderLeftStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeftStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeftStyleArg ]
    , borderRightStyle =
        \borderRightStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRightStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRightStyleArg ]
    , borderTopStyle =
        \borderTopStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopStyleArg ]
    , borderStyle =
        \borderStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderStyleArg ]
    , borderBottomColor =
        \borderBottomColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottomColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomColorArg ]
    , borderLeftColor =
        \borderLeftColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeftColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeftColorArg ]
    , borderRightColor =
        \borderRightColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRightColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRightColorArg ]
    , borderTopColor =
        \borderTopColorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTopColor"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopColorArg ]
    , border =
        \borderArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "border"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderArg ]
    , border2 =
        \border2Arg border2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "border2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ border2Arg, border2Arg0 ]
    , border3 =
        \border3Arg border3Arg0 border3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "border3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ border3Arg, border3Arg0, border3Arg1 ]
    , borderTop =
        \borderTopArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTop"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTopArg ]
    , borderTop2 =
        \borderTop2Arg borderTop2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTop2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTop2Arg, borderTop2Arg0 ]
    , borderTop3 =
        \borderTop3Arg borderTop3Arg0 borderTop3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderTop3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderTop3Arg, borderTop3Arg0, borderTop3Arg1 ]
    , borderBottom =
        \borderBottomArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottom"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottomArg ]
    , borderBottom2 =
        \borderBottom2Arg borderBottom2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottom2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottom2Arg, borderBottom2Arg0 ]
    , borderBottom3 =
        \borderBottom3Arg borderBottom3Arg0 borderBottom3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderBottom3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderBottom3Arg, borderBottom3Arg0, borderBottom3Arg1 ]
    , borderLeft =
        \borderLeftArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeft"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeftArg ]
    , borderLeft2 =
        \borderLeft2Arg borderLeft2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeft2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeft2Arg, borderLeft2Arg0 ]
    , borderLeft3 =
        \borderLeft3Arg borderLeft3Arg0 borderLeft3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderLeft3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderLeft3Arg, borderLeft3Arg0, borderLeft3Arg1 ]
    , borderRight =
        \borderRightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRight"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRightArg ]
    , borderRight2 =
        \borderRight2Arg borderRight2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRight2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRight2Arg, borderRight2Arg0 ]
    , borderRight3 =
        \borderRight3Arg borderRight3Arg0 borderRight3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderRight3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BorderStyle"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderRight3Arg, borderRight3Arg0, borderRight3Arg1 ]
    , borderImageOutset =
        \borderImageOutsetArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageOutset"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageOutsetArg ]
    , borderImageOutset2 =
        \borderImageOutset2Arg borderImageOutset2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageOutset2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageOutset2Arg, borderImageOutset2Arg0 ]
    , borderImageOutset3 =
        \borderImageOutset3Arg borderImageOutset3Arg0 borderImageOutset3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageOutset3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageOutset3Arg
                , borderImageOutset3Arg0
                , borderImageOutset3Arg1
                ]
    , borderImageOutset4 =
        \borderImageOutset4Arg borderImageOutset4Arg0 borderImageOutset4Arg1 borderImageOutset4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageOutset4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleC" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleD" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageOutset4Arg
                , borderImageOutset4Arg0
                , borderImageOutset4Arg1
                , borderImageOutset4Arg2
                ]
    , borderImageWidth =
        \borderImageWidthArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageWidth"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageWidthArg ]
    , borderImageWidth2 =
        \borderImageWidth2Arg borderImageWidth2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageWidth2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageWidth2Arg, borderImageWidth2Arg0 ]
    , borderImageWidth3 =
        \borderImageWidth3Arg borderImageWidth3Arg0 borderImageWidth3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageWidth3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleC" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageWidth3Arg
                , borderImageWidth3Arg0
                , borderImageWidth3Arg1
                ]
    , borderImageWidth4 =
        \borderImageWidth4Arg borderImageWidth4Arg0 borderImageWidth4Arg1 borderImageWidth4Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "borderImageWidth4"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleB" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleC" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.var "compatibleD" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ borderImageWidth4Arg
                , borderImageWidth4Arg0
                , borderImageWidth4Arg1
                , borderImageWidth4Arg2
                ]
    , top =
        \topArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "top"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ topArg ]
    , position =
        \positionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "position"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Position"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ positionArg ]
    , float =
        \floatArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "float"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ floatArg ]
    , bottom =
        \bottomArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "bottom"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ bottomArg ]
    , matrix =
        \matrixArg matrixArg0 matrixArg1 matrixArg2 matrixArg3 matrixArg4 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "matrix"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ matrixArg
                , matrixArg0
                , matrixArg1
                , matrixArg2
                , matrixArg3
                , matrixArg4
                ]
    , matrix3d =
        \matrix3dArg matrix3dArg0 matrix3dArg1 matrix3dArg2 matrix3dArg3 matrix3dArg4 matrix3dArg5 matrix3dArg6 matrix3dArg7 matrix3dArg8 matrix3dArg9 matrix3dArg10 matrix3dArg11 matrix3dArg12 matrix3dArg13 matrix3dArg14 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "matrix3d"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                , Type.float
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ matrix3dArg
                , matrix3dArg0
                , matrix3dArg1
                , matrix3dArg2
                , matrix3dArg3
                , matrix3dArg4
                , matrix3dArg5
                , matrix3dArg6
                , matrix3dArg7
                , matrix3dArg8
                , matrix3dArg9
                , matrix3dArg10
                , matrix3dArg11
                , matrix3dArg12
                , matrix3dArg13
                , matrix3dArg14
                ]
    , perspective =
        \perspectiveArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "perspective"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ perspectiveArg ]
    , rotate3d =
        \rotate3dArg rotate3dArg0 rotate3dArg1 rotate3dArg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rotate3d"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float
                                , Type.float
                                , Type.float
                                , Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ rotate3dArg, rotate3dArg0, rotate3dArg1, rotate3dArg2 ]
    , rotateX =
        \rotateXArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rotateX"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ rotateXArg ]
    , rotateY =
        \rotateYArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rotateY"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ rotateYArg ]
    , rotateZ =
        \rotateZArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rotateZ"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ rotateZArg ]
    , scale =
        \scaleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scale"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ scaleArg ]
    , scale2 =
        \scale2Arg scale2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scale2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float, Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ scale2Arg, scale2Arg0 ]
    , scale3d =
        \scale3dArg scale3dArg0 scale3dArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scale3d"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float, Type.float, Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ scale3dArg, scale3dArg0, scale3dArg1 ]
    , scaleX =
        \scaleXArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scaleX"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ scaleXArg ]
    , scaleY =
        \scaleYArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scaleY"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ scaleYArg ]
    , skew =
        \skewArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "skew"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ skewArg ]
    , skew2 =
        \skew2Arg skew2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "skew2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ skew2Arg, skew2Arg0 ]
    , skewX =
        \skewXArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "skewX"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ skewXArg ]
    , skewY =
        \skewYArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "skewY"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ skewYArg ]
    , translate =
        \translateArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translate"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translateArg ]
    , translate2 =
        \translate2Arg translate2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translate2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translate2Arg, translate2Arg0 ]
    , translate3d =
        \translate3dArg translate3dArg0 translate3dArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translate3d"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleC"
                                    , Type.var "unitsC"
                                    ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translate3dArg, translate3dArg0, translate3dArg1 ]
    , translateX =
        \translateXArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translateX"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translateXArg ]
    , translateY =
        \translateYArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translateY"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translateYArg ]
    , translateZ =
        \translateZArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "translateZ"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatible", Type.var "units" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ translateZArg ]
    , rotate =
        \rotateArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rotate"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Angle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Transform"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ rotateArg ]
    , pct =
        \pctArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pct"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Pct" [])
                            )
                    }
                )
                [ pctArg ]
    , px =
        \pxArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "px"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Px" [])
                            )
                    }
                )
                [ pxArg ]
    , em =
        \emArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "em"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Em" [])
                            )
                    }
                )
                [ emArg ]
    , pt =
        \ptArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pt"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Pt" [])
                            )
                    }
                )
                [ ptArg ]
    , ex =
        \exArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "ex"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Ex" [])
                            )
                    }
                )
                [ exArg ]
    , ch =
        \chArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "ch"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Ch" [])
                            )
                    }
                )
                [ chArg ]
    , rem =
        \remArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rem"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Rem" [])
                            )
                    }
                )
                [ remArg ]
    , vh =
        \vhArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "vh"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Vh" [])
                            )
                    }
                )
                [ vhArg ]
    , vw =
        \vwArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "vw"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Vw" [])
                            )
                    }
                )
                [ vwArg ]
    , vmin =
        \vminArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "vmin"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Vmin" [])
                            )
                    }
                )
                [ vminArg ]
    , vmax =
        \vmaxArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "vmax"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Vmax" [])
                            )
                    }
                )
                [ vmaxArg ]
    , mm =
        \mmArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "mm"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Mm" [])
                            )
                    }
                )
                [ mmArg ]
    , cm =
        \cmArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "cm"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Cm" [])
                            )
                    }
                )
                [ cmArg ]
    , inches =
        \inchesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "inches"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "In" [])
                            )
                    }
                )
                [ inchesArg ]
    , pc =
        \pcArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pc"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith [ "Css" ] "Pc" [])
                            )
                    }
                )
                [ pcArg ]
    , int =
        \intArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "int"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.int ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "IntOrAuto"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Number"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "LengthOrNumberOrAutoOrNoneOrContent"
                                            [ Type.namedWith
                                                [ "Css" ]
                                                "LengthOrNumber"
                                                [ Type.namedWith
                                                    [ "Css" ]
                                                    "FontWeight"
                                                    [ Type.namedWith
                                                        [ "Css" ]
                                                        "NumberOrInfinite"
                                                        [ Type.record
                                                            [ ( "numericValue"
                                                              , Type.float
                                                              )
                                                            , ( "unitLabel"
                                                              , Type.string
                                                              )
                                                            , ( "units"
                                                              , Type.namedWith
                                                                    [ "Css" ]
                                                                    "UnitlessInteger"
                                                                    []
                                                              )
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                )
                            )
                    }
                )
                [ intArg ]
    , num =
        \numArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "num"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumberOrAutoOrNoneOrContent"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Number"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "LengthOrNumber"
                                            [ Type.namedWith
                                                [ "Css" ]
                                                "NumberOrInfinite"
                                                [ Type.record
                                                    [ ( "numericValue"
                                                      , Type.float
                                                      )
                                                    , ( "unitLabel"
                                                      , Type.string
                                                      )
                                                    , ( "units"
                                                      , Type.namedWith
                                                            [ "Css" ]
                                                            "UnitlessFloat"
                                                            []
                                                      )
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                )
                            )
                    }
                )
                [ numArg ]
    , calc =
        \calcArg calcArg0 calcArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "calc"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Calc"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith [ "Css" ] "CalcExpression" []
                                , Type.namedWith
                                    [ "Css" ]
                                    "Calc"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "CalculatedLength" [])
                            )
                    }
                )
                [ calcArg, calcArg0, calcArg1 ]
    , deg =
        \degArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "deg"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "AngleOrDirection"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Angle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ degArg ]
    , rad =
        \radArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "rad"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "AngleOrDirection"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Angle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ radArg ]
    , grad =
        \gradArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "grad"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "AngleOrDirection"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Angle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ gradArg ]
    , turn =
        \turnArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "turn"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "AngleOrDirection"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "Angle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ turnArg ]
    , sec =
        \secArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "sec"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Duration"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ secArg ]
    , ms =
        \msArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "ms"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.float ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "Duration"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ msArg ]
    , pseudoClass =
        \pseudoClassArg pseudoClassArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pseudoClass"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ pseudoClassArg, pseudoClassArg0 ]
    , active =
        \activeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "active"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ activeArg ]
    , any =
        \anyArg anyArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "any"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ anyArg, anyArg0 ]
    , checked =
        \checkedArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "checked"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ checkedArg ]
    , disabled =
        \disabledArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "disabled"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ disabledArg ]
    , empty =
        \emptyArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "empty"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ emptyArg ]
    , enabled =
        \enabledArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "enabled"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ enabledArg ]
    , first =
        \firstArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "first"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ firstArg ]
    , firstChild =
        \firstChildArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "firstChild"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ firstChildArg ]
    , firstOfType =
        \firstOfTypeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "firstOfType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ firstOfTypeArg ]
    , fullscreen =
        \fullscreenArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "fullscreen"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ fullscreenArg ]
    , focus =
        \focusArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "focus"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ focusArg ]
    , hover =
        \hoverArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "hover"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ hoverArg ]
    , visited =
        \visitedArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "visited"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ visitedArg ]
    , indeterminate =
        \indeterminateArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "indeterminate"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ indeterminateArg ]
    , invalid =
        \invalidArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "invalid"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ invalidArg ]
    , lang =
        \langArg langArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "lang"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ langArg, langArg0 ]
    , lastChild =
        \lastChildArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "lastChild"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ lastChildArg ]
    , lastOfType =
        \lastOfTypeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "lastOfType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ lastOfTypeArg ]
    , link =
        \linkArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "link"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ linkArg ]
    , nthChild =
        \nthChildArg nthChildArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "nthChild"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ nthChildArg, nthChildArg0 ]
    , nthLastChild =
        \nthLastChildArg nthLastChildArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "nthLastChild"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ nthLastChildArg, nthLastChildArg0 ]
    , nthLastOfType =
        \nthLastOfTypeArg nthLastOfTypeArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "nthLastOfType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ nthLastOfTypeArg, nthLastOfTypeArg0 ]
    , nthOfType =
        \nthOfTypeArg nthOfTypeArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "nthOfType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ nthOfTypeArg, nthOfTypeArg0 ]
    , onlyChild =
        \onlyChildArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "onlyChild"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ onlyChildArg ]
    , onlyOfType =
        \onlyOfTypeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "onlyOfType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ onlyOfTypeArg ]
    , optional =
        \optionalArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "optional"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ optionalArg ]
    , outOfRange =
        \outOfRangeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "outOfRange"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ outOfRangeArg ]
    , readWrite =
        \readWriteArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "readWrite"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ readWriteArg ]
    , required =
        \requiredArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "required"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ requiredArg ]
    , root =
        \rootArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "root"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ rootArg ]
    , scope =
        \scopeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "scope"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ scopeArg ]
    , target =
        \targetArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "target"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ targetArg ]
    , valid =
        \validArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "valid"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ validArg ]
    , pseudoElement =
        \pseudoElementArg pseudoElementArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "pseudoElement"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string
                                , Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ pseudoElementArg, pseudoElementArg0 ]
    , after =
        \afterArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "after"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ afterArg ]
    , before =
        \beforeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "before"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ beforeArg ]
    , firstLetter =
        \firstLetterArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "firstLetter"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ firstLetterArg ]
    , firstLine =
        \firstLineArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "firstLine"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ firstLineArg ]
    , selection =
        \selectionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "selection"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.list
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ selectionArg ]
    , src_ =
        \src_Arg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "src_"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ImportType"
                                    [ Type.var "compatible" ]
                                ]
                                Type.string
                            )
                    }
                )
                [ src_Arg ]
    , qt =
        \qtArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "qt"
                    , annotation =
                        Just (Type.function [ Type.string ] Type.string)
                    }
                )
                [ qtArg ]
    , listStyleType =
        \listStyleTypeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "listStyleType"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ListStyleType"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ listStyleTypeArg ]
    , listStylePosition =
        \listStylePositionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "listStylePosition"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ListStylePosition"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ listStylePositionArg ]
    , listStyle =
        \listStyleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "listStyle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ listStyleArg ]
    , listStyle2 =
        \listStyle2Arg listStyle2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "listStyle2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible1" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible2" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ listStyle2Arg, listStyle2Arg0 ]
    , listStyle3 =
        \listStyle3Arg listStyle3Arg0 listStyle3Arg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "listStyle3"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible1" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible2" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ListStyle"
                                    [ Type.var "compatible3" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ listStyle3Arg, listStyle3Arg0, listStyle3Arg1 ]
    , linearGradient =
        \linearGradientArg linearGradientArg0 linearGradientArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "linearGradient"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                , Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "ColorStop"
                                        [ Type.var "compatibleA"
                                        , Type.var "compatibleB"
                                        , Type.var "unit"
                                        ]
                                    )
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "BackgroundImage"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ListStyle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ linearGradientArg, linearGradientArg0, linearGradientArg1 ]
    , linearGradient2 =
        \linearGradient2Arg linearGradient2Arg0 linearGradient2Arg1 linearGradient2Arg2 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "linearGradient2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "AngleOrDirection"
                                    [ Type.var "compatible" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                , Type.list
                                    (Type.namedWith
                                        [ "Css" ]
                                        "ColorStop"
                                        [ Type.var "compatibleA"
                                        , Type.var "compatibleB"
                                        , Type.var "unit"
                                        ]
                                    )
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "BackgroundImage"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ListStyle"
                                        [ Type.record [] ]
                                    ]
                                )
                            )
                    }
                )
                [ linearGradient2Arg
                , linearGradient2Arg0
                , linearGradient2Arg1
                , linearGradient2Arg2
                ]
    , stop =
        \stopArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "stop"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleA" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                )
                            )
                    }
                )
                [ stopArg ]
    , stop2 =
        \stop2Arg stop2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "stop2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "ColorValue"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB", Type.var "unit" ]
                                ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "ColorStop"
                                    [ Type.var "compatibleA"
                                    , Type.var "compatibleB"
                                    , Type.var "unit"
                                    ]
                                )
                            )
                    }
                )
                [ stop2Arg, stop2Arg0 ]
    , url =
        \urlArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "url"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string ]
                                (Type.namedWith
                                    [ "Css" ]
                                    "BackgroundImage"
                                    [ Type.record [] ]
                                )
                            )
                    }
                )
                [ urlArg ]
    , tableLayout =
        \tableLayoutArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "tableLayout"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "TableLayout"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ tableLayoutArg ]
    , backgroundAttachment =
        \backgroundAttachmentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundAttachment"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundAttachment"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundAttachmentArg ]
    , backgroundBlendMode =
        \backgroundBlendModeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundBlendMode"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ColorValue"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "NonMixable"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundBlendModeArg ]
    , backgroundClip =
        \backgroundClipArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundClip"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundClip"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundClipArg ]
    , backgroundImage =
        \backgroundImageArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundImage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundImage"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundImageArg ]
    , backgroundOrigin =
        \backgroundOriginArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundOrigin"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundOrigin"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundOriginArg ]
    , backgroundPosition =
        \backgroundPositionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundPosition"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "ExplicitLength"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "IncompatibleUnits"
                                            []
                                        ]
                                    ]
                                    (Type.namedWith [ "Css" ] "Style" [])
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundPositionArg ]
    , backgroundPosition2 =
        \backgroundPosition2Arg backgroundPosition2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundPosition2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleA"
                                    , Type.var "unitsA"
                                    ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "Length"
                                    [ Type.var "compatibleB"
                                    , Type.var "unitsB"
                                    ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundPosition2Arg, backgroundPosition2Arg0 ]
    , backgroundRepeat =
        \backgroundRepeatArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundRepeat"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundRepeatShorthand"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundRepeatArg ]
    , backgroundRepeat2 =
        \backgroundRepeat2Arg backgroundRepeat2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundRepeat2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "BackgroundRepeat"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "BackgroundRepeat"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundRepeat2Arg, backgroundRepeat2Arg0 ]
    , backgroundSize =
        \backgroundSizeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundSize"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAutoOrCoverOrContain"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundSizeArg ]
    , backgroundSize2 =
        \backgroundSize2Arg backgroundSize2Arg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "backgroundSize2"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleA" ]
                                , Type.namedWith
                                    [ "Css" ]
                                    "LengthOrAuto"
                                    [ Type.var "compatibleB" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ backgroundSize2Arg, backgroundSize2Arg0 ]
    , animationName =
        \animationNameArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "animationName"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css", "Animations" ]
                                    "Keyframes"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ animationNameArg ]
    , animationDelay =
        \animationDelayArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "animationDelay"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Duration"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ animationDelayArg ]
    , animationDuration =
        \animationDurationArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "animationDuration"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "Duration"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ animationDurationArg ]
    , animationIterationCount =
        \animationIterationCountArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "Css" ]
                    , name = "animationIterationCount"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith
                                    [ "Css" ]
                                    "NumberOrInfinite"
                                    [ Type.var "compatible" ]
                                ]
                                (Type.namedWith [ "Css" ] "Style" [])
                            )
                    }
                )
                [ animationIterationCountArg ]
    }


values_ :
    { batch : Elm.Expression
    , property : Elm.Expression
    , flex : Elm.Expression
    , flex2 : Elm.Expression
    , flex3 : Elm.Expression
    , medium : Elm.Expression
    , alignSelf : Elm.Expression
    , alignItems : Elm.Expression
    , justifyContent : Elm.Expression
    , order : Elm.Expression
    , flexDirection : Elm.Expression
    , flexFlow1 : Elm.Expression
    , flexFlow2 : Elm.Expression
    , flexWrap : Elm.Expression
    , flexBasis : Elm.Expression
    , flexGrow : Elm.Expression
    , flexShrink : Elm.Expression
    , transformStyle : Elm.Expression
    , transformBox : Elm.Expression
    , transform : Elm.Expression
    , transforms : Elm.Expression
    , currentColor : Elm.Expression
    , underline : Elm.Expression
    , overline : Elm.Expression
    , lineThrough : Elm.Expression
    , textOrientation : Elm.Expression
    , textDecoration : Elm.Expression
    , textDecoration2 : Elm.Expression
    , textDecoration3 : Elm.Expression
    , textDecorations : Elm.Expression
    , textDecorations2 : Elm.Expression
    , textDecorations3 : Elm.Expression
    , textDecorationLine : Elm.Expression
    , textDecorationLines : Elm.Expression
    , textDecorationStyle : Elm.Expression
    , textEmphasisColor : Elm.Expression
    , capitalize : Elm.Expression
    , uppercase : Elm.Expression
    , lowercase : Elm.Expression
    , fullWidth : Elm.Expression
    , hanging : Elm.Expression
    , eachLine : Elm.Expression
    , textIndent : Elm.Expression
    , textIndent2 : Elm.Expression
    , textIndent3 : Elm.Expression
    , clip : Elm.Expression
    , ellipsis : Elm.Expression
    , textOverflow : Elm.Expression
    , optimizeSpeed : Elm.Expression
    , optimizeLegibility : Elm.Expression
    , geometricPrecision : Elm.Expression
    , textRendering : Elm.Expression
    , textTransform : Elm.Expression
    , textAlign : Elm.Expression
    , textAlignLast : Elm.Expression
    , left : Elm.Expression
    , right : Elm.Expression
    , center : Elm.Expression
    , justify : Elm.Expression
    , justifyAll : Elm.Expression
    , start : Elm.Expression
    , end : Elm.Expression
    , matchParent : Elm.Expression
    , true : Elm.Expression
    , verticalAlign : Elm.Expression
    , display : Elm.Expression
    , opacity : Elm.Expression
    , minContent : Elm.Expression
    , maxContent : Elm.Expression
    , fitContent : Elm.Expression
    , fillAvailable : Elm.Expression
    , width : Elm.Expression
    , minWidth : Elm.Expression
    , maxWidth : Elm.Expression
    , height : Elm.Expression
    , minHeight : Elm.Expression
    , maxHeight : Elm.Expression
    , padding : Elm.Expression
    , padding2 : Elm.Expression
    , padding3 : Elm.Expression
    , padding4 : Elm.Expression
    , paddingTop : Elm.Expression
    , paddingBottom : Elm.Expression
    , paddingRight : Elm.Expression
    , paddingLeft : Elm.Expression
    , pointerEvents : Elm.Expression
    , margin : Elm.Expression
    , margin2 : Elm.Expression
    , margin3 : Elm.Expression
    , margin4 : Elm.Expression
    , marginTop : Elm.Expression
    , marginBottom : Elm.Expression
    , marginRight : Elm.Expression
    , marginLeft : Elm.Expression
    , marginBlockStart : Elm.Expression
    , marginBlockEnd : Elm.Expression
    , marginInlineStart : Elm.Expression
    , marginInlineEnd : Elm.Expression
    , boxSizing : Elm.Expression
    , overflow : Elm.Expression
    , overflowX : Elm.Expression
    , overflowY : Elm.Expression
    , overflowWrap : Elm.Expression
    , whiteSpace : Elm.Expression
    , backgroundColor : Elm.Expression
    , color : Elm.Expression
    , textShadow : Elm.Expression
    , textShadow2 : Elm.Expression
    , textShadow3 : Elm.Expression
    , textShadow4 : Elm.Expression
    , boxShadow : Elm.Expression
    , boxShadow2 : Elm.Expression
    , boxShadow3 : Elm.Expression
    , boxShadow4 : Elm.Expression
    , boxShadow5 : Elm.Expression
    , boxShadow6 : Elm.Expression
    , lineHeight : Elm.Expression
    , letterSpacing : Elm.Expression
    , fontFace : Elm.Expression
    , fontFamily : Elm.Expression
    , fontSize : Elm.Expression
    , fontStyle : Elm.Expression
    , fontWeight : Elm.Expression
    , fontVariant : Elm.Expression
    , fontVariant2 : Elm.Expression
    , fontVariant3 : Elm.Expression
    , fontVariantLigatures : Elm.Expression
    , fontVariantCaps : Elm.Expression
    , fontVariantNumeric : Elm.Expression
    , fontVariantNumeric2 : Elm.Expression
    , fontVariantNumeric3 : Elm.Expression
    , fontFamilies : Elm.Expression
    , fontVariantNumerics : Elm.Expression
    , fontFeatureSettings : Elm.Expression
    , fontFeatureSettingsList : Elm.Expression
    , cursor : Elm.Expression
    , outline : Elm.Expression
    , outline3 : Elm.Expression
    , outlineColor : Elm.Expression
    , outlineWidth : Elm.Expression
    , outlineStyle : Elm.Expression
    , outlineOffset : Elm.Expression
    , zIndex : Elm.Expression
    , spaceAround : Elm.Expression
    , spaceBetween : Elm.Expression
    , resize : Elm.Expression
    , fill : Elm.Expression
    , touchAction : Elm.Expression
    , borderSpacing : Elm.Expression
    , borderSpacing2 : Elm.Expression
    , visibility : Elm.Expression
    , all : Elm.Expression
    , important : Elm.Expression
    , solid : Elm.Expression
    , transparent : Elm.Expression
    , rgb : Elm.Expression
    , rgba : Elm.Expression
    , hsl : Elm.Expression
    , hsla : Elm.Expression
    , hex : Elm.Expression
    , featureTag : Elm.Expression
    , featureTag2 : Elm.Expression
    , featureOn : Elm.Expression
    , featureOff : Elm.Expression
    , borderCollapse : Elm.Expression
    , borderColor : Elm.Expression
    , borderColor2 : Elm.Expression
    , borderColor3 : Elm.Expression
    , borderColor4 : Elm.Expression
    , borderBottomLeftRadius : Elm.Expression
    , borderBottomLeftRadius2 : Elm.Expression
    , borderBottomRightRadius : Elm.Expression
    , borderBottomRightRadius2 : Elm.Expression
    , borderTopLeftRadius : Elm.Expression
    , borderTopLeftRadius2 : Elm.Expression
    , borderTopRightRadius : Elm.Expression
    , borderTopRightRadius2 : Elm.Expression
    , borderRadius : Elm.Expression
    , borderRadius2 : Elm.Expression
    , borderRadius3 : Elm.Expression
    , borderRadius4 : Elm.Expression
    , borderWidth : Elm.Expression
    , borderWidth2 : Elm.Expression
    , borderWidth3 : Elm.Expression
    , borderWidth4 : Elm.Expression
    , borderBottomWidth : Elm.Expression
    , borderLeftWidth : Elm.Expression
    , borderRightWidth : Elm.Expression
    , borderTopWidth : Elm.Expression
    , borderBottomStyle : Elm.Expression
    , borderLeftStyle : Elm.Expression
    , borderRightStyle : Elm.Expression
    , borderTopStyle : Elm.Expression
    , borderStyle : Elm.Expression
    , borderBottomColor : Elm.Expression
    , borderLeftColor : Elm.Expression
    , borderRightColor : Elm.Expression
    , borderTopColor : Elm.Expression
    , borderBox : Elm.Expression
    , contentBox : Elm.Expression
    , border : Elm.Expression
    , border2 : Elm.Expression
    , border3 : Elm.Expression
    , borderTop : Elm.Expression
    , borderTop2 : Elm.Expression
    , borderTop3 : Elm.Expression
    , borderBottom : Elm.Expression
    , borderBottom2 : Elm.Expression
    , borderBottom3 : Elm.Expression
    , borderLeft : Elm.Expression
    , borderLeft2 : Elm.Expression
    , borderLeft3 : Elm.Expression
    , borderRight : Elm.Expression
    , borderRight2 : Elm.Expression
    , borderRight3 : Elm.Expression
    , borderImageOutset : Elm.Expression
    , borderImageOutset2 : Elm.Expression
    , borderImageOutset3 : Elm.Expression
    , borderImageOutset4 : Elm.Expression
    , borderImageWidth : Elm.Expression
    , borderImageWidth2 : Elm.Expression
    , borderImageWidth3 : Elm.Expression
    , borderImageWidth4 : Elm.Expression
    , scroll : Elm.Expression
    , visible : Elm.Expression
    , block : Elm.Expression
    , inlineBlock : Elm.Expression
    , inlineFlex : Elm.Expression
    , inline : Elm.Expression
    , none : Elm.Expression
    , auto : Elm.Expression
    , inherit : Elm.Expression
    , unset : Elm.Expression
    , initial : Elm.Expression
    , noWrap : Elm.Expression
    , top : Elm.Expression
    , static : Elm.Expression
    , fixed : Elm.Expression
    , sticky : Elm.Expression
    , relative : Elm.Expression
    , absolute : Elm.Expression
    , position : Elm.Expression
    , float : Elm.Expression
    , bottom : Elm.Expression
    , middle : Elm.Expression
    , baseline : Elm.Expression
    , sub : Elm.Expression
    , super : Elm.Expression
    , textTop : Elm.Expression
    , textBottom : Elm.Expression
    , hidden : Elm.Expression
    , wavy : Elm.Expression
    , dotted : Elm.Expression
    , dashed : Elm.Expression
    , double : Elm.Expression
    , groove : Elm.Expression
    , ridge : Elm.Expression
    , inset : Elm.Expression
    , outset : Elm.Expression
    , matrix : Elm.Expression
    , matrix3d : Elm.Expression
    , perspective : Elm.Expression
    , rotate3d : Elm.Expression
    , rotateX : Elm.Expression
    , rotateY : Elm.Expression
    , rotateZ : Elm.Expression
    , scale : Elm.Expression
    , scale2 : Elm.Expression
    , scale3d : Elm.Expression
    , scaleX : Elm.Expression
    , scaleY : Elm.Expression
    , skew : Elm.Expression
    , skew2 : Elm.Expression
    , skewX : Elm.Expression
    , skewY : Elm.Expression
    , translate : Elm.Expression
    , translate2 : Elm.Expression
    , translate3d : Elm.Expression
    , translateX : Elm.Expression
    , translateY : Elm.Expression
    , translateZ : Elm.Expression
    , rotate : Elm.Expression
    , fillBox : Elm.Expression
    , viewBox : Elm.Expression
    , flat : Elm.Expression
    , preserve3d : Elm.Expression
    , content : Elm.Expression
    , wrapReverse : Elm.Expression
    , wrap : Elm.Expression
    , flexStart : Elm.Expression
    , flexEnd : Elm.Expression
    , stretch : Elm.Expression
    , row : Elm.Expression
    , rowReverse : Elm.Expression
    , column : Elm.Expression
    , columnReverse : Elm.Expression
    , serif : Elm.Expression
    , sansSerif : Elm.Expression
    , monospace : Elm.Expression
    , cursive : Elm.Expression
    , fantasy : Elm.Expression
    , xxSmall : Elm.Expression
    , xSmall : Elm.Expression
    , small : Elm.Expression
    , large : Elm.Expression
    , xLarge : Elm.Expression
    , xxLarge : Elm.Expression
    , smaller : Elm.Expression
    , larger : Elm.Expression
    , normal : Elm.Expression
    , italic : Elm.Expression
    , oblique : Elm.Expression
    , bold : Elm.Expression
    , lighter : Elm.Expression
    , bolder : Elm.Expression
    , smallCaps : Elm.Expression
    , allSmallCaps : Elm.Expression
    , petiteCaps : Elm.Expression
    , allPetiteCaps : Elm.Expression
    , unicase : Elm.Expression
    , titlingCaps : Elm.Expression
    , commonLigatures : Elm.Expression
    , noCommonLigatures : Elm.Expression
    , discretionaryLigatures : Elm.Expression
    , noDiscretionaryLigatures : Elm.Expression
    , historicalLigatures : Elm.Expression
    , noHistoricalLigatures : Elm.Expression
    , contextual : Elm.Expression
    , noContextual : Elm.Expression
    , liningNums : Elm.Expression
    , oldstyleNums : Elm.Expression
    , proportionalNums : Elm.Expression
    , tabularNums : Elm.Expression
    , diagonalFractions : Elm.Expression
    , stackedFractions : Elm.Expression
    , ordinal : Elm.Expression
    , slashedZero : Elm.Expression
    , default : Elm.Expression
    , pointer : Elm.Expression
    , crosshair : Elm.Expression
    , contextMenu : Elm.Expression
    , help : Elm.Expression
    , progress : Elm.Expression
    , wait : Elm.Expression
    , cell : Elm.Expression
    , text_ : Elm.Expression
    , verticalText : Elm.Expression
    , cursorAlias : Elm.Expression
    , copy : Elm.Expression
    , move : Elm.Expression
    , noDrop : Elm.Expression
    , notAllowed : Elm.Expression
    , eResize : Elm.Expression
    , nResize : Elm.Expression
    , neResize : Elm.Expression
    , nwResize : Elm.Expression
    , sResize : Elm.Expression
    , seResize : Elm.Expression
    , swResize : Elm.Expression
    , wResize : Elm.Expression
    , ewResize : Elm.Expression
    , nsResize : Elm.Expression
    , neswResize : Elm.Expression
    , nwseResize : Elm.Expression
    , colResize : Elm.Expression
    , rowResize : Elm.Expression
    , allScroll : Elm.Expression
    , zoomIn : Elm.Expression
    , zoomOut : Elm.Expression
    , grab : Elm.Expression
    , grabbing : Elm.Expression
    , visiblePainted : Elm.Expression
    , visibleFill : Elm.Expression
    , visibleStroke : Elm.Expression
    , painted : Elm.Expression
    , stroke : Elm.Expression
    , pct : Elm.Expression
    , px : Elm.Expression
    , em : Elm.Expression
    , pt : Elm.Expression
    , ex : Elm.Expression
    , ch : Elm.Expression
    , rem : Elm.Expression
    , vh : Elm.Expression
    , vw : Elm.Expression
    , vmin : Elm.Expression
    , vmax : Elm.Expression
    , mm : Elm.Expression
    , cm : Elm.Expression
    , inches : Elm.Expression
    , pc : Elm.Expression
    , int : Elm.Expression
    , num : Elm.Expression
    , zero : Elm.Expression
    , calc : Elm.Expression
    , plus : Elm.Expression
    , minus : Elm.Expression
    , deg : Elm.Expression
    , rad : Elm.Expression
    , grad : Elm.Expression
    , turn : Elm.Expression
    , sec : Elm.Expression
    , ms : Elm.Expression
    , pseudoClass : Elm.Expression
    , active : Elm.Expression
    , any : Elm.Expression
    , checked : Elm.Expression
    , disabled : Elm.Expression
    , empty : Elm.Expression
    , enabled : Elm.Expression
    , first : Elm.Expression
    , firstChild : Elm.Expression
    , firstOfType : Elm.Expression
    , fullscreen : Elm.Expression
    , focus : Elm.Expression
    , hover : Elm.Expression
    , visited : Elm.Expression
    , indeterminate : Elm.Expression
    , invalid : Elm.Expression
    , lang : Elm.Expression
    , lastChild : Elm.Expression
    , lastOfType : Elm.Expression
    , link : Elm.Expression
    , nthChild : Elm.Expression
    , nthLastChild : Elm.Expression
    , nthLastOfType : Elm.Expression
    , nthOfType : Elm.Expression
    , onlyChild : Elm.Expression
    , onlyOfType : Elm.Expression
    , optional : Elm.Expression
    , outOfRange : Elm.Expression
    , readWrite : Elm.Expression
    , required : Elm.Expression
    , root : Elm.Expression
    , scope : Elm.Expression
    , target : Elm.Expression
    , valid : Elm.Expression
    , pseudoElement : Elm.Expression
    , after : Elm.Expression
    , before : Elm.Expression
    , firstLetter : Elm.Expression
    , firstLine : Elm.Expression
    , selection : Elm.Expression
    , src_ : Elm.Expression
    , qt : Elm.Expression
    , listStyleType : Elm.Expression
    , disc : Elm.Expression
    , circle : Elm.Expression
    , square : Elm.Expression
    , decimal : Elm.Expression
    , decimalLeadingZero : Elm.Expression
    , lowerRoman : Elm.Expression
    , upperRoman : Elm.Expression
    , lowerGreek : Elm.Expression
    , lowerAlpha : Elm.Expression
    , lowerLatin : Elm.Expression
    , upperAlpha : Elm.Expression
    , upperLatin : Elm.Expression
    , arabicIndic : Elm.Expression
    , armenian : Elm.Expression
    , bengali : Elm.Expression
    , cjkEarthlyBranch : Elm.Expression
    , cjkHeavenlyStem : Elm.Expression
    , devanagari : Elm.Expression
    , georgian : Elm.Expression
    , gujarati : Elm.Expression
    , gurmukhi : Elm.Expression
    , kannada : Elm.Expression
    , khmer : Elm.Expression
    , lao : Elm.Expression
    , malayalam : Elm.Expression
    , myanmar : Elm.Expression
    , oriya : Elm.Expression
    , telugu : Elm.Expression
    , thai : Elm.Expression
    , listStylePosition : Elm.Expression
    , inside : Elm.Expression
    , outside : Elm.Expression
    , listStyle : Elm.Expression
    , listStyle2 : Elm.Expression
    , listStyle3 : Elm.Expression
    , linearGradient : Elm.Expression
    , linearGradient2 : Elm.Expression
    , stop : Elm.Expression
    , stop2 : Elm.Expression
    , toBottom : Elm.Expression
    , toBottomLeft : Elm.Expression
    , toBottomRight : Elm.Expression
    , toLeft : Elm.Expression
    , toRight : Elm.Expression
    , toTop : Elm.Expression
    , toTopLeft : Elm.Expression
    , toTopRight : Elm.Expression
    , pre : Elm.Expression
    , preLine : Elm.Expression
    , preWrap : Elm.Expression
    , infinite : Elm.Expression
    , url : Elm.Expression
    , vertical : Elm.Expression
    , tableRowGroup : Elm.Expression
    , tableRow : Elm.Expression
    , tableLayout : Elm.Expression
    , tableHeaderGroup : Elm.Expression
    , tableFooterGroup : Elm.Expression
    , tableColumnGroup : Elm.Expression
    , tableCell : Elm.Expression
    , tableColumn : Elm.Expression
    , tableCaption : Elm.Expression
    , table : Elm.Expression
    , space : Elm.Expression
    , softLight : Elm.Expression
    , separate : Elm.Expression
    , screenBlendMode : Elm.Expression
    , saturation : Elm.Expression
    , round : Elm.Expression
    , repeatY : Elm.Expression
    , repeatX : Elm.Expression
    , repeat : Elm.Expression
    , pointerEventsFill : Elm.Expression
    , pointerEventsAll : Elm.Expression
    , backgroundAttachment : Elm.Expression
    , backgroundBlendMode : Elm.Expression
    , backgroundClip : Elm.Expression
    , backgroundImage : Elm.Expression
    , backgroundOrigin : Elm.Expression
    , backgroundPosition : Elm.Expression
    , backgroundPosition2 : Elm.Expression
    , backgroundRepeat : Elm.Expression
    , backgroundRepeat2 : Elm.Expression
    , backgroundSize : Elm.Expression
    , backgroundSize2 : Elm.Expression
    , both : Elm.Expression
    , breakWord : Elm.Expression
    , collapse : Elm.Expression
    , colorBurn : Elm.Expression
    , colorDodge : Elm.Expression
    , contain : Elm.Expression
    , cover : Elm.Expression
    , darken : Elm.Expression
    , difference : Elm.Expression
    , displayFlex : Elm.Expression
    , exclusion : Elm.Expression
    , hardLight : Elm.Expression
    , horizontal : Elm.Expression
    , hue : Elm.Expression
    , inlineListItem : Elm.Expression
    , inlineTable : Elm.Expression
    , lighten : Elm.Expression
    , listItem : Elm.Expression
    , local : Elm.Expression
    , luminosity : Elm.Expression
    , manipulation : Elm.Expression
    , multiply : Elm.Expression
    , noRepeat : Elm.Expression
    , overlay : Elm.Expression
    , paddingBox : Elm.Expression
    , panDown : Elm.Expression
    , panLeft : Elm.Expression
    , panRight : Elm.Expression
    , panUp : Elm.Expression
    , panX : Elm.Expression
    , panY : Elm.Expression
    , pinchZoom : Elm.Expression
    , animationName : Elm.Expression
    , animationDelay : Elm.Expression
    , animationDuration : Elm.Expression
    , animationIterationCount : Elm.Expression
    , thin : Elm.Expression
    , thick : Elm.Expression
    , blink : Elm.Expression
    }
values_ =
    { batch =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "batch"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , property =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "property"
            , annotation =
                Just
                    (Type.function
                        [ Type.string, Type.string ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumberOrAutoOrNoneOrContent"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flex2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flex2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flex3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flex3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , medium =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "medium"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , alignSelf =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "alignSelf"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , alignItems =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "alignItems"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , justifyContent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "justifyContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , order =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "order"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexDirection =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexDirection"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexFlow1 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexFlow1"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexFlow2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexFlow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexWrap =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexWrap"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexWrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexBasis =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexBasis"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexBasis"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexGrow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexGrow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , flexShrink =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexShrink"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , transformStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "transformStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TransformStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , transformBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "transformBox"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TransformBox"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , transform =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "transform"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Transform"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , transforms =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "transforms"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "Transform"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , currentColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "currentColor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ColorValue"
                        [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                    )
            }
    , underline =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "underline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextDecorationLine"
                        [ Type.record [] ]
                    )
            }
    , overline =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextDecorationLine"
                        [ Type.record [] ]
                    )
            }
    , lineThrough =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lineThrough"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextDecorationLine"
                        [ Type.record [] ]
                    )
            }
    , textOrientation =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textOrientation"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextOrientation"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecoration =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecoration2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecoration3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecoration3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorations =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorations2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations2"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatibleA" ]
                            )
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorations3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorations3"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatibleA" ]
                            )
                        , Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorationLine =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationLine"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationLine"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorationLines =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationLines"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "TextDecorationLine"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textDecorationStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textDecorationStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textEmphasisColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textEmphasisColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , capitalize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "capitalize"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ]
                    )
            }
    , uppercase =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "uppercase"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ]
                    )
            }
    , lowercase =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lowercase"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ]
                    )
            }
    , fullWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fullWidth"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextTransform" [ Type.record [] ]
                    )
            }
    , hanging =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hanging"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TextIndent" [ Type.record [] ])
            }
    , eachLine =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "eachLine"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TextIndent" [ Type.record [] ])
            }
    , textIndent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textIndent2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textIndent3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textIndent3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "TextIndent"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , clip =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "clip"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextOverflow" [ Type.record [] ])
            }
    , ellipsis =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ellipsis"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextOverflow" [ Type.record [] ])
            }
    , textOverflow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textOverflow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextOverflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , optimizeSpeed =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "optimizeSpeed"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ]
                    )
            }
    , optimizeLegibility =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "optimizeLegibility"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ]
                    )
            }
    , geometricPrecision =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "geometricPrecision"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TextRendering" [ Type.record [] ]
                    )
            }
    , textRendering =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textRendering"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextRendering"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textTransform =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textTransform"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TextTransform"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textAlign =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textAlign"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textAlignLast =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textAlignLast"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , left =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "left"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , right =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "right"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , center =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , justify =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "justify"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , justifyAll =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "justifyAll"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , start =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "start"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , end =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "end"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , matchParent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "matchParent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , true =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "true"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , verticalAlign =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "verticalAlign"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , display =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "display"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Display"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , opacity =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "opacity"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Number"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , minContent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "minContent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "MinMaxDimension"
                        [ Type.record [] ]
                    )
            }
    , maxContent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "maxContent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "MinMaxDimension"
                        [ Type.record [] ]
                    )
            }
    , fitContent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fitContent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "MinMaxDimension"
                        [ Type.record [] ]
                    )
            }
    , fillAvailable =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fillAvailable"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "MinMaxDimension"
                        [ Type.record [] ]
                    )
            }
    , width =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "width"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , minWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "minWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , maxWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "maxWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNoneOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , height =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "height"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , minHeight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "minHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , maxHeight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "maxHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNoneOrMinMaxDimension"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , padding =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "padding"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , padding2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "padding2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , padding3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "padding3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , padding4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "padding4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , paddingTop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , paddingBottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , paddingRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , paddingLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , pointerEvents =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pointerEvents"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "PointerEvents"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , margin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "margin"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , margin2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "margin2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , margin3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "margin3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , margin4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "margin4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginTop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginBottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginBlockStart =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBlockStart"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginBlockEnd =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginBlockEnd"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginInlineStart =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginInlineStart"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , marginInlineEnd =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "marginInlineEnd"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxSizing =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxSizing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BoxSizing"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , overflow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overflow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , overflowX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , overflowY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Overflow"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , overflowWrap =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overflowWrap"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Wrap"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , whiteSpace =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "whiteSpace"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "WhiteSpace"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , color =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "color"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textShadow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "None"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textShadow2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textShadow3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , textShadow4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textShadow4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "None"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith [ "Css" ] "Value" [ Type.var "c" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith [ "Css" ] "Value" [ Type.var "d" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow5 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow5"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleE" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , boxShadow6 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "boxShadow6"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Value" [ Type.var "a" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleE" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , lineHeight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lineHeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , letterSpacing =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "letterSpacing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontFace =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFace"
            , annotation = Just (Type.function [ Type.string ] Type.string)
            }
    , fontFamily =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFamily"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontFamily" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontSize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontSize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontSize" [ Type.var "a" ] ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontStyle" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontWeight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontWeight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "FontWeight" [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariant =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariant2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariant3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariant3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariant"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantLigatures"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantLigatures"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantCaps"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantCaps"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantNumeric =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantNumeric2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantNumeric3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumeric3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "FontVariantNumeric"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontFamilies =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFamilies"
            , annotation =
                Just
                    (Type.function
                        [ Type.list Type.string ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontVariantNumerics =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontVariantNumerics"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "FontVariantNumeric"
                                [ Type.var "compatible" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontFeatureSettings =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFeatureSettings"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.var "a" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fontFeatureSettingsList =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fontFeatureSettingsList"
            , annotation =
                Just
                    (Type.function
                        [ Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "FeatureTagValue"
                                [ Type.var "a" ]
                            )
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , cursor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cursor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Cursor"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outline =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Outline"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outline3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outline3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outlineColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outlineWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNone"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outlineStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outlineOffset =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outlineOffset"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , zIndex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "zIndex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "IntOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , spaceAround =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "spaceAround"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "JustifyContent"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , spaceBetween =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "spaceBetween"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "JustifyContent"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , resize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "resize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Resize"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fill =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fill"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , touchAction =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "touchAction"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TouchAction"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderSpacing =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderSpacing"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderSpacing2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderSpacing2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , visibility =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visibility"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Visibility"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , all =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "all"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "All"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , important =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "important"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "Css" ] "Style" [] ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , solid =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "solid"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.record [] ]
                        ]
                    )
            }
    , transparent =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "transparent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ColorValue"
                        [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                    )
            }
    , rgb =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rgb"
            , annotation =
                Just
                    (Type.function
                        [ Type.int, Type.int, Type.int ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
    , rgba =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rgba"
            , annotation =
                Just
                    (Type.function
                        [ Type.int, Type.int, Type.int, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
    , hsl =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hsl"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
    , hsla =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hsla"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
    , hex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hex"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith [ "Css" ] "Color" [])
                    )
            }
    , featureTag =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "featureTag"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.record [] ]
                        )
                    )
            }
    , featureTag2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "featureTag2"
            , annotation =
                Just
                    (Type.function
                        [ Type.string, Type.int ]
                        (Type.namedWith
                            [ "Css" ]
                            "FeatureTagValue"
                            [ Type.record [] ]
                        )
                    )
            }
    , featureOn =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "featureOn"
            , annotation = Just Type.int
            }
    , featureOff =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "featureOff"
            , annotation = Just Type.int
            }
    , borderCollapse =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderCollapse"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderCollapse"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderColor2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderColor3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderColor4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderColor4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomLeftRadius =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomLeftRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomLeftRadius2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomLeftRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomRightRadius =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomRightRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomRightRadius2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomRightRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopLeftRadius =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopLeftRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopLeftRadius2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopLeftRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopRightRadius =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopRightRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopRightRadius2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopRightRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRadius =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRadius2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRadius3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRadius4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRadius4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderWidth2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderWidth3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderWidth4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderWidth4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleD", Type.var "unitsD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeftWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRightWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeftStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRightStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottomColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottomColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeftColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeftColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRightColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRightColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTopColor =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTopColor"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BoxSizing"
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundClip"
                            [ Type.record [] ]
                        ]
                    )
            }
    , contentBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "contentBox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BoxSizing"
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundClip"
                            [ Type.record [] ]
                        ]
                    )
            }
    , border =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "border"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , border2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "border2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , border3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "border3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTop2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderTop3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderTop3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottom2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderBottom3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderBottom3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeft2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderLeft3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderLeft3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRight2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderRight3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderRight3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageOutset =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageOutset2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageOutset3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageOutset4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageOutset4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageWidth =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageWidth2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageWidth3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , borderImageWidth4 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "borderImageWidth4"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleC" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrNumber"
                            [ Type.var "compatibleD" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , scroll =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scroll"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "scroll", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "overflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundAttachment"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "blockAxisOverflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "inlineAxisOverflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , visible =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visible"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "overflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "visibility"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "pointerEvents"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , block =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "block"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , inlineBlock =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inlineBlock"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , inlineFlex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inlineFlex"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , inline =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inline"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , none =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "none"
            , annotation =
                Just
                    (Type.record
                        [ ( "borderStyle"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "display"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumberOrAutoOrNoneOrContent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "none", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "keyframes"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNone"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNoneOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "listStyleType"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "listStyleTypeOrPositionOrImage"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "outline"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "pointerEvents"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "resize", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "textDecorationLine"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "transform"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundImage"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "value", Type.string )
                        , ( "textTransform"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "touchAction"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "updateFrequency"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "blockAxisOverflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "inlineAxisOverflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "pointerDevice"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "hoverCapability"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "scriptingSupport"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , auto =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "auto"
            , annotation =
                Just
                    (Type.record
                        [ ( "lengthOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "overflow"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "textRendering"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "flexBasis"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNumberOrAutoOrNoneOrContent"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "alignItemsOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "justifyContentOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "cursor", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "value", Type.string )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "intOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "pointerEvents"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "touchAction"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "tableLayout"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , inherit =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inherit"
            , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
            }
    , unset =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "unset"
            , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
            }
    , initial =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "initial"
            , annotation = Just (Type.namedWith [ "Css" ] "BasicProperty" [])
            }
    , noWrap =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noWrap"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "WhiteSpace"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirectionOrWrap"
                            [ Type.namedWith
                                [ "Css" ]
                                "FlexWrap"
                                [ Type.record [] ]
                            ]
                        ]
                    )
            }
    , top =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "top"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , static =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "static"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
            }
    , fixed =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fixed"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "position"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "backgroundAttachment"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "tableLayout"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , sticky =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "sticky"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
            }
    , relative =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "relative"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
            }
    , absolute =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "absolute"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Position" [ Type.record [] ])
            }
    , position =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "position"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Position"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , float =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "float"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , bottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "bottom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , middle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "middle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , baseline =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "baseline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , sub =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "sub"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , super =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "super"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , textTop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textTop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , textBottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "textBottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "VerticalAlign"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , hidden =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hidden"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "Overflow"
                        [ Type.namedWith
                            [ "Css" ]
                            "BorderStyle"
                            [ Type.namedWith
                                [ "Css" ]
                                "Visibility"
                                [ Type.record [] ]
                            ]
                        ]
                    )
            }
    , wavy =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "wavy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TextDecorationStyle"
                        [ Type.record [] ]
                    )
            }
    , dotted =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "dotted"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.record [] ]
                        ]
                    )
            }
    , dashed =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "dashed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.record [] ]
                        ]
                    )
            }
    , double =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "double"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "TextDecorationStyle"
                            [ Type.record [] ]
                        ]
                    )
            }
    , groove =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "groove"
            , annotation =
                Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
            }
    , ridge =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ridge"
            , annotation =
                Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
            }
    , inset =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inset"
            , annotation =
                Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
            }
    , outset =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outset"
            , annotation =
                Just (Type.namedWith [ "Css" ] "BorderStyle" [ Type.record [] ])
            }
    , matrix =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "matrix"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , matrix3d =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "matrix3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        , Type.float
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , perspective =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "perspective"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , rotate3d =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rotate3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float
                        , Type.float
                        , Type.float
                        , Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , rotateX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , rotateY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , rotateZ =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rotateZ"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , scale =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scale"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , scale2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scale2"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , scale3d =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scale3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.float, Type.float, Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , scaleX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scaleX"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , scaleY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scaleY"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , skew =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "skew"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , skew2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "skew2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , skewX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "skewX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , skewY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "skewY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translate =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translate"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translate2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translate2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translate3d =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translate3d"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleC", Type.var "unitsC" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translateX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translateX"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translateY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translateY"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , translateZ =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "translateZ"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatible", Type.var "units" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , rotate =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rotate"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Angle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Transform" [ Type.record [] ]
                        )
                    )
            }
    , fillBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fillBox"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TransformBox" [ Type.record [] ])
            }
    , viewBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "viewBox"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "TransformBox" [ Type.record [] ])
            }
    , flat =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TransformStyle"
                        [ Type.record [] ]
                    )
            }
    , preserve3d =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "preserve3d"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "TransformStyle"
                        [ Type.record [] ]
                    )
            }
    , content =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "content"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "LengthOrNumberOrAutoOrNoneOrContent"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexBasis"
                            [ Type.record [] ]
                        ]
                    )
            }
    , wrapReverse =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "wrapReverse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith [ "Css" ] "FlexWrap" [ Type.record [] ]
                        ]
                    )
            }
    , wrap =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "wrap"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith [ "Css" ] "FlexWrap" [ Type.record [] ]
                        ]
                    )
            }
    , flexStart =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexStart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AlignItems"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , flexEnd =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "flexEnd"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AlignItems"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , stretch =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "stretch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AlignItems"
                        [ Type.var "a", Type.var "b" ]
                    )
            }
    , row =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "row"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.record [] ]
                        ]
                    )
            }
    , rowReverse =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rowReverse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.record [] ]
                        ]
                    )
            }
    , column =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "column"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.record [] ]
                        ]
                    )
            }
    , columnReverse =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "columnReverse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FlexDirectionOrWrap"
                        [ Type.namedWith
                            [ "Css" ]
                            "FlexDirection"
                            [ Type.record [] ]
                        ]
                    )
            }
    , serif =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "serif"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
            }
    , sansSerif =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "sansSerif"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
            }
    , monospace =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "monospace"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
            }
    , cursive =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cursive"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
            }
    , fantasy =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fantasy"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontFamily" [ Type.record [] ])
            }
    , xxSmall =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "xxSmall"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , xSmall =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "xSmall"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , small =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "small"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , large =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "large"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , xLarge =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "xLarge"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , xxLarge =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "xxLarge"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , smaller =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "smaller"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , larger =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "larger"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontSize" [ Type.record [] ])
            }
    , normal =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "normal"
            , annotation = Just (Type.namedWith [ "Css" ] "Normal" [])
            }
    , italic =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "italic"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontStyle" [ Type.record [] ])
            }
    , oblique =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "oblique"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontStyle" [ Type.record [] ])
            }
    , bold =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "bold"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
            }
    , lighter =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lighter"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
            }
    , bolder =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "bolder"
            , annotation =
                Just (Type.namedWith [ "Css" ] "FontWeight" [ Type.record [] ])
            }
    , smallCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "smallCaps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , allSmallCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "allSmallCaps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , petiteCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "petiteCaps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , allPetiteCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "allPetiteCaps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , unicase =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "unicase"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , titlingCaps =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "titlingCaps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantCaps"
                        [ Type.record [] ]
                    )
            }
    , commonLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "commonLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , noCommonLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noCommonLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , discretionaryLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "discretionaryLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , noDiscretionaryLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noDiscretionaryLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , historicalLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "historicalLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , noHistoricalLigatures =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noHistoricalLigatures"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , contextual =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "contextual"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , noContextual =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noContextual"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantLigatures"
                        [ Type.record [] ]
                    )
            }
    , liningNums =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "liningNums"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , oldstyleNums =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "oldstyleNums"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , proportionalNums =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "proportionalNums"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , tabularNums =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tabularNums"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , diagonalFractions =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "diagonalFractions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , stackedFractions =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "stackedFractions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , ordinal =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ordinal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , slashedZero =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "slashedZero"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "FontVariantNumeric"
                        [ Type.record [] ]
                    )
            }
    , default =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "default"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , pointer =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pointer"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , crosshair =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "crosshair"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , contextMenu =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "contextMenu"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , help =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "help"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , progress =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "progress"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , wait =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "wait"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , cell =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cell"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , text_ =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "text_"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , verticalText =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "verticalText"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , cursorAlias =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cursorAlias"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , copy =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "copy"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , move =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "move"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , noDrop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noDrop"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , notAllowed =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "notAllowed"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , eResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "eResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , nResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , neResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "neResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , nwResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nwResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , sResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "sResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , seResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "seResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , swResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "swResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , wResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "wResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , ewResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ewResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , nsResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nsResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , neswResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "neswResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , nwseResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nwseResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , colResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "colResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , rowResize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rowResize"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , allScroll =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "allScroll"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , zoomIn =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "zoomIn"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , zoomOut =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "zoomOut"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , grab =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "grab"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , grabbing =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "grabbing"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Cursor" [ Type.record [] ])
            }
    , visiblePainted =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visiblePainted"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ]
                    )
            }
    , visibleFill =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visibleFill"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ]
                    )
            }
    , visibleStroke =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visibleStroke"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ]
                    )
            }
    , painted =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "painted"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ]
                    )
            }
    , stroke =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "stroke"
            , annotation =
                Just
                    (Type.namedWith [ "Css" ] "PointerEvents" [ Type.record [] ]
                    )
            }
    , pct =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pct"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pct" [])
                    )
            }
    , px =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "px"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Px" [])
                    )
            }
    , em =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "em"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Em" [])
                    )
            }
    , pt =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pt"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pt" [])
                    )
            }
    , ex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ex"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Ex" [])
                    )
            }
    , ch =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ch"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Ch" [])
                    )
            }
    , rem =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rem"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Rem" [])
                    )
            }
    , vh =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "vh"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vh" [])
                    )
            }
    , vw =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "vw"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vw" [])
                    )
            }
    , vmin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "vmin"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vmin" [])
                    )
            }
    , vmax =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "vmax"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Vmax" [])
                    )
            }
    , mm =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "mm"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Mm" [])
                    )
            }
    , cm =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cm"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Cm" [])
                    )
            }
    , inches =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inches"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "In" [])
                    )
            }
    , pc =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pc"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Pc" [])
                    )
            }
    , int =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "int"
            , annotation =
                Just
                    (Type.function
                        [ Type.int ]
                        (Type.namedWith
                            [ "Css" ]
                            "IntOrAuto"
                            [ Type.namedWith
                                [ "Css" ]
                                "Number"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumberOrAutoOrNoneOrContent"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "LengthOrNumber"
                                        [ Type.namedWith
                                            [ "Css" ]
                                            "FontWeight"
                                            [ Type.namedWith
                                                [ "Css" ]
                                                "NumberOrInfinite"
                                                [ Type.record
                                                    [ ( "numericValue"
                                                      , Type.float
                                                      )
                                                    , ( "unitLabel"
                                                      , Type.string
                                                      )
                                                    , ( "units"
                                                      , Type.namedWith
                                                            [ "Css" ]
                                                            "UnitlessInteger"
                                                            []
                                                      )
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        )
                    )
            }
    , num =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "num"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "LengthOrNumberOrAutoOrNoneOrContent"
                            [ Type.namedWith
                                [ "Css" ]
                                "Number"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "LengthOrNumber"
                                    [ Type.namedWith
                                        [ "Css" ]
                                        "NumberOrInfinite"
                                        [ Type.record
                                            [ ( "numericValue", Type.float )
                                            , ( "unitLabel", Type.string )
                                            , ( "units"
                                              , Type.namedWith
                                                    [ "Css" ]
                                                    "UnitlessFloat"
                                                    []
                                              )
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        )
                    )
            }
    , zero =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "zero"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "length", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "lengthOrNumber"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNone"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrAuto"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "lengthOrNoneOrMinMaxDimension"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "number", Type.namedWith [ "Css" ] "Compatible" [] )
                        , ( "outline"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        , ( "units"
                          , Type.namedWith [ "Css" ] "UnitlessInteger" []
                          )
                        , ( "unitLabel", Type.string )
                        , ( "numericValue", Type.float )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , calc =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "calc"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Calc"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith [ "Css" ] "CalcExpression" []
                        , Type.namedWith
                            [ "Css" ]
                            "Calc"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "CalculatedLength" [])
                    )
            }
    , plus =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "plus"
            , annotation = Just (Type.namedWith [ "Css" ] "CalcExpression" [])
            }
    , minus =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "minus"
            , annotation = Just (Type.namedWith [ "Css" ] "CalcExpression" [])
            }
    , deg =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "deg"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , rad =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "rad"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , grad =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "grad"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , turn =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "turn"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.namedWith
                                [ "Css" ]
                                "Angle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , sec =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "sec"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Duration" [ Type.record [] ])
                    )
            }
    , ms =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "ms"
            , annotation =
                Just
                    (Type.function
                        [ Type.float ]
                        (Type.namedWith [ "Css" ] "Duration" [ Type.record [] ])
                    )
            }
    , pseudoClass =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pseudoClass"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , active =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "active"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , any =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "any"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , checked =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "checked"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , disabled =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "disabled"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , empty =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "empty"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , enabled =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "enabled"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , first =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "first"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , firstChild =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "firstChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , firstOfType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "firstOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , fullscreen =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "fullscreen"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , focus =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "focus"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , hover =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hover"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , visited =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "visited"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , indeterminate =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "indeterminate"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , invalid =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "invalid"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , lang =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lang"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , lastChild =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lastChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , lastOfType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lastOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , link =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "link"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , nthChild =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nthChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , nthLastChild =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nthLastChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , nthLastOfType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nthLastOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , nthOfType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "nthOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , onlyChild =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "onlyChild"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , onlyOfType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "onlyOfType"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , optional =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "optional"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , outOfRange =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outOfRange"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , readWrite =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "readWrite"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , required =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "required"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , root =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "root"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , scope =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "scope"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , target =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "target"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , valid =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "valid"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , pseudoElement =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pseudoElement"
            , annotation =
                Just
                    (Type.function
                        [ Type.string
                        , Type.list (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , after =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "after"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , before =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "before"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , firstLetter =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "firstLetter"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , firstLine =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "firstLine"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , selection =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "selection"
            , annotation =
                Just
                    (Type.function
                        [ Type.list (Type.namedWith [ "Css" ] "Style" []) ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , src_ =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "src_"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ImportType"
                            [ Type.var "compatible" ]
                        ]
                        Type.string
                    )
            }
    , qt =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "qt"
            , annotation = Just (Type.function [ Type.string ] Type.string)
            }
    , listStyleType =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyleType"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , disc =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "disc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , circle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , square =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "square"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , decimal =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "decimal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , decimalLeadingZero =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "decimalLeadingZero"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , lowerRoman =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lowerRoman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , upperRoman =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "upperRoman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , lowerGreek =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lowerGreek"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , lowerAlpha =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lowerAlpha"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , lowerLatin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lowerLatin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , upperAlpha =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "upperAlpha"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , upperLatin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "upperLatin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , arabicIndic =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "arabicIndic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , armenian =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "armenian"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , bengali =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "bengali"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , cjkEarthlyBranch =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cjkEarthlyBranch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , cjkHeavenlyStem =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cjkHeavenlyStem"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , devanagari =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "devanagari"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , georgian =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "georgian"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , gujarati =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "gujarati"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , gurmukhi =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "gurmukhi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , kannada =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "kannada"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , khmer =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "khmer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , lao =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lao"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , malayalam =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "malayalam"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , myanmar =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "myanmar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , oriya =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "oriya"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , telugu =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "telugu"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , thai =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "thai"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyleType"
                            [ Type.record [] ]
                        ]
                    )
            }
    , listStylePosition =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listStylePosition"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStylePosition"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , inside =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inside"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStylePosition"
                            [ Type.record [] ]
                        ]
                    )
            }
    , outside =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "outside"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "ListStyle"
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStylePosition"
                            [ Type.record [] ]
                        ]
                    )
            }
    , listStyle =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , listStyle2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible1" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible2" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , listStyle3 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listStyle3"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible1" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible2" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ListStyle"
                            [ Type.var "compatible3" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , linearGradient =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "linearGradient"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "ColorStop"
                                [ Type.var "compatibleA"
                                , Type.var "compatibleB"
                                , Type.var "unit"
                                ]
                            )
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.namedWith
                                [ "Css" ]
                                "ListStyle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , linearGradient2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "linearGradient2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "AngleOrDirection"
                            [ Type.var "compatible" ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        , Type.list
                            (Type.namedWith
                                [ "Css" ]
                                "ColorStop"
                                [ Type.var "compatibleA"
                                , Type.var "compatibleB"
                                , Type.var "unit"
                                ]
                            )
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.namedWith
                                [ "Css" ]
                                "ListStyle"
                                [ Type.record [] ]
                            ]
                        )
                    )
            }
    , stop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "stop"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        )
                    )
            }
    , stop2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "stop2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "ColorValue"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unit" ]
                        ]
                        (Type.namedWith
                            [ "Css" ]
                            "ColorStop"
                            [ Type.var "compatibleA"
                            , Type.var "compatibleB"
                            , Type.var "unit"
                            ]
                        )
                    )
            }
    , toBottom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toBottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toBottomLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toBottomLeft"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toBottomRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toBottomRight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toLeft"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toRight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toTop =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toTop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toTopLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toTopLeft"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , toTopRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "toTopRight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "AngleOrDirection"
                        [ Type.record [] ]
                    )
            }
    , pre =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pre"
            , annotation =
                Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
            }
    , preLine =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "preLine"
            , annotation =
                Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
            }
    , preWrap =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "preWrap"
            , annotation =
                Just (Type.namedWith [ "Css" ] "WhiteSpace" [ Type.record [] ])
            }
    , infinite =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "infinite"
            , annotation = Just (Type.namedWith [ "Css" ] "Infinite" [])
            }
    , url =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "url"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.record [] ]
                        )
                    )
            }
    , vertical =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "vertical"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
            }
    , tableRowGroup =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableRowGroup"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableRow =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableRow"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableLayout =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableLayout"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "TableLayout"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , tableHeaderGroup =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableHeaderGroup"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableFooterGroup =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableFooterGroup"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableColumnGroup =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableColumnGroup"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableCell =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableCell"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableColumn =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableColumn"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , tableCaption =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "tableCaption"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , table =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "table"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , space =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "space"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeat"
                        [ Type.record [] ]
                    )
            }
    , softLight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "softLight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , separate =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "separate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderCollapse"
                        [ Type.record [] ]
                    )
            }
    , screenBlendMode =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "screenBlendMode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , saturation =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "saturation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , round =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "round"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeat"
                        [ Type.record [] ]
                    )
            }
    , repeatY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "repeatY"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeatShorthand"
                        [ Type.record [] ]
                    )
            }
    , repeatX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "repeatX"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeatShorthand"
                        [ Type.record [] ]
                    )
            }
    , repeat =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "repeat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeat"
                        [ Type.record [] ]
                    )
            }
    , pointerEventsFill =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pointerEventsFill"
            , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
            }
    , pointerEventsAll =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pointerEventsAll"
            , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
            }
    , backgroundAttachment =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundAttachment"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundAttachment"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundBlendMode =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundBlendMode"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ColorValue"
                                [ Type.namedWith [ "Css" ] "NonMixable" [] ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundClip =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundClip"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundClip"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundImage =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundImage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundImage"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundOrigin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundOrigin"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundOrigin"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundPosition =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundPosition"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Css" ]
                                "ExplicitLength"
                                [ Type.namedWith
                                    [ "Css" ]
                                    "IncompatibleUnits"
                                    []
                                ]
                            ]
                            (Type.namedWith [ "Css" ] "Style" [])
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundPosition2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundPosition2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleA", Type.var "unitsA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "Length"
                            [ Type.var "compatibleB", Type.var "unitsB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundRepeat =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundRepeat"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeatShorthand"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundRepeat2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundRepeat2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeat"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "BackgroundRepeat"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundSize =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundSize"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAutoOrCoverOrContain"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , backgroundSize2 =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "backgroundSize2"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleA" ]
                        , Type.namedWith
                            [ "Css" ]
                            "LengthOrAuto"
                            [ Type.var "compatibleB" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , both =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "both"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
            }
    , breakWord =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "breakWord"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Wrap" [ Type.record [] ])
            }
    , collapse =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "collapse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BorderCollapse"
                        [ Type.namedWith
                            [ "Css" ]
                            "Visibility"
                            [ Type.record [] ]
                        ]
                    )
            }
    , colorBurn =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "colorBurn"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , colorDodge =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "colorDodge"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , contain =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "contain"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , cover =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "cover"
            , annotation =
                Just
                    (Type.record
                        [ ( "value", Type.string )
                        , ( "lengthOrAutoOrCoverOrContain"
                          , Type.namedWith [ "Css" ] "Compatible" []
                          )
                        ]
                    )
            }
    , darken =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "darken"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , difference =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "difference"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , displayFlex =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "displayFlex"
            , annotation = Just (Type.namedWith [ "Css" ] "Style" [])
            }
    , exclusion =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "exclusion"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , hardLight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hardLight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , horizontal =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "horizontal"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Resize" [ Type.record [] ])
            }
    , hue =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "hue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , inlineListItem =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inlineListItem"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , inlineTable =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "inlineTable"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , lighten =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "lighten"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , listItem =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "listItem"
            , annotation =
                Just (Type.namedWith [ "Css" ] "Display" [ Type.record [] ])
            }
    , local =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "local"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundAttachment"
                        [ Type.record [] ]
                    )
            }
    , luminosity =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "luminosity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , manipulation =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "manipulation"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , multiply =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "multiply"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , noRepeat =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "noRepeat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundRepeat"
                        [ Type.record [] ]
                    )
            }
    , overlay =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "overlay"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundBlendMode"
                        [ Type.var "compatible" ]
                    )
            }
    , paddingBox =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "paddingBox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "BackgroundClip"
                        [ Type.record [] ]
                    )
            }
    , panDown =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panDown"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , panLeft =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panLeft"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , panRight =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panRight"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , panUp =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panUp"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , panX =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panX"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , panY =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "panY"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , pinchZoom =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "pinchZoom"
            , annotation =
                Just (Type.namedWith [ "Css" ] "TouchAction" [ Type.record [] ])
            }
    , animationName =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "animationName"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css", "Animations" ]
                            "Keyframes"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , animationDelay =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "animationDelay"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Duration"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , animationDuration =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "animationDuration"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "Duration"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , animationIterationCount =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "animationIterationCount"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith
                            [ "Css" ]
                            "NumberOrInfinite"
                            [ Type.var "compatible" ]
                        ]
                        (Type.namedWith [ "Css" ] "Style" [])
                    )
            }
    , thin =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "thin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "IntentionallyUnsupportedPleaseSeeDocs"
                        []
                    )
            }
    , thick =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "thick"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "IntentionallyUnsupportedPleaseSeeDocs"
                        []
                    )
            }
    , blink =
        Elm.value
            { importFrom = [ "Css" ]
            , name = "blink"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Css" ]
                        "IntentionallyUnsupportedPleaseSeeDocs"
                        []
                    )
            }
    }


