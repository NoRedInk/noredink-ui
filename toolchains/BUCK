load("@prelude//toolchains:genrule.bzl", "system_genrule_toolchain")
load("@prelude//toolchains:python.bzl", "system_python_bootstrap_toolchain")
load(":nix.bzl", "nix_binary")
load(":elm.bzl", "elm_toolchain")

system_genrule_toolchain(
    name = "genrule",
    visibility = ["PUBLIC"],
)

system_python_bootstrap_toolchain(
    name = "python_bootstrap",
    visibility = ["PUBLIC"],
)

nix_binary(
    name = "jq",
    visibility = ["PUBLIC"],
)

# system_elm_toolchain(
#     name = "elm",
#     visibility = ["PUBLIC"],
# )

elm_toolchain(
    name = "elm",
    visibility = ["PUBLIC"],
    elm = ":elm_compiler",
)

ELM_COMPILER_URL = select({
    "config//os:linux": "https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz",
    "config//os:macos": "https://github.com/elm/compiler/releases/download/0.19.1/binary-for-mac-64-bit.gz",
})

ELM_COMPILER_SHA256 = select({
    "config//os:linux": "0000000000000000000000000000000000000000",
    "config//os:macos": "05289f0e3d4f30033487c05e689964c3bb17c0c48012510dbef1df43868545d1",
})

http_file(
    name = "elm_compiler_archive",
    urls = [ELM_COMPILER_URL],
    sha256 = ELM_COMPILER_SHA256,
)

genrule(
    name = "elm_compiler",
    cmd = "gzip --decompress --stdout --keep $(location :elm_compiler_archive) > $OUT && chmod +x $OUT",
    out = "elm",
    executable = True,
)
