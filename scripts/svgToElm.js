var fs = require('fs'),
  parse = require('xml-parser'),
  util = require('util'),
  svgMapping = require('./elmSvgMapping.js');

const readFile = util.promisify(fs.readFile);

const assetFileTemplate = data => {
  return `module Nri.Ui.Assets exposing (..)
import Svg as Svg
import Svg.Attributes as A
import Html exposing (Html)

-- PSSST! CAREFUL THERE!
-- Don't edit this file manually!
-- It is generated by scripts/svgToElm.js
-- Any manual edits will for sure be lost :(

${data.join('\n\n')}`;
};

const svgTemplate = (name, implementation) => {
  return `
${name} : List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Html msg
${name} attributes extraNodes = ${implementation}`;
};

function nodeTemplate(node) {
  if (node.name === "style")
    return `Svg.${node.name} [${attributes(node.attributes)}] [ Svg.text ${sanitize(node.content)} ]`;
  else if (node.name === "svg")
    return `Svg.${node.name}
  (attributes ++ [${attributes(node.attributes)}])
  (extraNodes ++ [${node.children.map(nodeTemplate).join(',\n  ')}])`;
  else
    return `Svg.${node.name} [${attributes(node.attributes)}] [${node.children.map(nodeTemplate).join(',\n  ')}]`;
}

files = process.argv.slice(2).sort();

var svgs = files.map(file => {
  return readFile(file).then(data => {
    var result = parse(data.toString());
    var name = camelCase(file.replace(/.*\//,''));
    return svgTemplate(name, nodeTemplate(result.root));
  }).catch(err => {
    console.error(err);
  });
});

Promise.all(svgs).then(data => {
  var content = assetFileTemplate(data);
  console.log(content);
});

function camelCase(str) {
  let string = str.toLowerCase().replace(/[^A-Za-z0-9]/g, ' ').split(' ')
                  .reduce((result, word) => result + capitalize(word.toLowerCase()))
  return string.charAt(0).toLowerCase() + string.slice(1)
}

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);
}

function sanitize(content) {
  return '"' + content.replace(/(\r|\n)+/g,'\\n').replace(/\t/g,' ') + '"';
}

function attributes(node_attributes) {
  var attrs = Object.keys(node_attributes);

  return attrs.map(function(name) {
    var value = node_attributes[name];

    if (name in svgMapping.svgToElm){
      var elmName = svgMapping.svgToElm[name];
      var elmValue = sanitize(value);

      return `A.${elmName} ${elmValue}`;
    }
  }).filter(v => v).join(", ");
}
